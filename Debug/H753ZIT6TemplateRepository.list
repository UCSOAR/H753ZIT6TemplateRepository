
H753ZIT6TemplateRepository.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b48  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  08009de8  08009de8  0000ade8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a3c8  0800a3c8  0000b3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  0800a3d0  0800a3d0  0000b3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000008  0800a3dc  0800a3dc  0000b3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800a3e4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000108fc  24000064  0800a448  0000c064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24010960  0800a448  0000c960  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003a81a  00000000  00000000  0000c092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000720d  00000000  00000000  000468ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c08  00000000  00000000  0004dac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000153d  00000000  00000000  0004f6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044e15  00000000  00000000  00050c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002c320  00000000  00000000  00095a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001857d9  00000000  00000000  000c1d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00247513  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007810  00000000  00000000  00247558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005d  00000000  00000000  0024ed68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009dd0 	.word	0x08009dd0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	08009dd0 	.word	0x08009dd0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <_ZNK7Command10GetCommandEv>:
    void Reset();    // Reset the command, equivalent of a destructor that must be called, counts allocations and deallocations, asserts an error if the allocation count is too high

    // Getters
    uint16_t GetDataSize() const;
    uint8_t* GetDataPointer() const { return data; }
    GLOBAL_COMMANDS GetCommand() const { return command; }
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	370c      	adds	r7, #12
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr

080003c8 <_ZNK7Command14GetTaskCommandEv>:
    uint16_t GetTaskCommand() const { return taskCommand; }
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	885b      	ldrh	r3, [r3, #2]
 80003d4:	4618      	mov	r0, r3
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <_ZN9DebugTask4InstEv>:
constexpr uint16_t DEBUG_RX_BUFFER_SZ_BYTES = 16;

/* Class ------------------------------------------------------------------*/
class DebugTask : public Task, public UARTReceiverBase {
 public:
  static DebugTask& Inst() {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
    static DebugTask inst;
 80003e4:	4b10      	ldr	r3, [pc, #64]	@ (8000428 <_ZN9DebugTask4InstEv+0x48>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f3bf 8f5b 	dmb	ish
 80003ec:	f003 0301 	and.w	r3, r3, #1
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	bf0c      	ite	eq
 80003f4:	2301      	moveq	r3, #1
 80003f6:	2300      	movne	r3, #0
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d010      	beq.n	8000420 <_ZN9DebugTask4InstEv+0x40>
 80003fe:	480a      	ldr	r0, [pc, #40]	@ (8000428 <_ZN9DebugTask4InstEv+0x48>)
 8000400:	f008 ff92 	bl	8009328 <__cxa_guard_acquire>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	bf14      	ite	ne
 800040a:	2301      	movne	r3, #1
 800040c:	2300      	moveq	r3, #0
 800040e:	b2db      	uxtb	r3, r3
 8000410:	2b00      	cmp	r3, #0
 8000412:	d005      	beq.n	8000420 <_ZN9DebugTask4InstEv+0x40>
 8000414:	4805      	ldr	r0, [pc, #20]	@ (800042c <_ZN9DebugTask4InstEv+0x4c>)
 8000416:	f000 f82b 	bl	8000470 <_ZN9DebugTaskC1Ev>
 800041a:	4803      	ldr	r0, [pc, #12]	@ (8000428 <_ZN9DebugTask4InstEv+0x48>)
 800041c:	f008 ff90 	bl	8009340 <__cxa_guard_release>
    return inst;
 8000420:	4b02      	ldr	r3, [pc, #8]	@ (800042c <_ZN9DebugTask4InstEv+0x4c>)
  }
 8000422:	4618      	mov	r0, r3
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	240000a8 	.word	0x240000a8
 800042c:	24000080 	.word	0x24000080

08000430 <_ZN9DebugTask7RunTaskEPv>:

  // Interrupt receive callback
  void InterruptRxData(uint8_t errors);

 protected:
  static void RunTask(void* pvParams) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
    DebugTask::Inst().Run(pvParams);
 8000438:	f7ff ffd2 	bl	80003e0 <_ZN9DebugTask4InstEv>
 800043c:	4603      	mov	r3, r0
 800043e:	6879      	ldr	r1, [r7, #4]
 8000440:	4618      	mov	r0, r3
 8000442:	f000 f879 	bl	8000538 <_ZN9DebugTask3RunEPv>
  }  // Static Task Interface, passes control to the instance Run();
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
	...

08000450 <_ZN16UARTReceiverBaseC1Ev>:
/**
 * @brief Any classes that are expected to receive using a UART driver
 *		  must derive from this base class and provide an implementation
 *		  for InterruptRxData
 */
class UARTReceiverBase
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	4a04      	ldr	r2, [pc, #16]	@ (800046c <_ZN16UARTReceiverBaseC1Ev+0x1c>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4618      	mov	r0, r3
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	0800a328 	.word	0x0800a328

08000470 <_ZN9DebugTaskC1Ev>:

/* Functions -----------------------------------------------------------------*/
/**
 * @brief Constructor, sets all member variables
 */
DebugTask::DebugTask()
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
    : Task(TASK_DEBUG_QUEUE_DEPTH_OBJS), kUart_(UART::Debug) {
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	210a      	movs	r1, #10
 800047c:	4618      	mov	r0, r3
 800047e:	f008 fb97 	bl	8008bb0 <_ZN4TaskC1Et>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	330c      	adds	r3, #12
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff ffe2 	bl	8000450 <_ZN16UARTReceiverBaseC1Ev>
 800048c:	4a0e      	ldr	r2, [pc, #56]	@ (80004c8 <_ZN9DebugTaskC1Ev+0x58>)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	4a0e      	ldr	r2, [pc, #56]	@ (80004cc <_ZN9DebugTaskC1Ev+0x5c>)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	60da      	str	r2, [r3, #12]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a0d      	ldr	r2, [pc, #52]	@ (80004d0 <_ZN9DebugTaskC1Ev+0x60>)
 800049c:	625a      	str	r2, [r3, #36]	@ 0x24
  memset(debugBuffer, 0, sizeof(debugBuffer));
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	3310      	adds	r3, #16
 80004a2:	2211      	movs	r2, #17
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f008 ffbc 	bl	8009424 <memset>
  debugMsgIdx = 0;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2200      	movs	r2, #0
 80004b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  isDebugMsgReady = false;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2200      	movs	r2, #0
 80004b8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4618      	mov	r0, r3
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	0800a30c 	.word	0x0800a30c
 80004cc:	0800a31c 	.word	0x0800a31c
 80004d0:	240000bc 	.word	0x240000bc

080004d4 <_ZN9DebugTask8InitTaskEv>:

/**
 * @brief Init task for RTOS
 */
void DebugTask::InitTask() {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af02      	add	r7, sp, #8
 80004da:	6078      	str	r0, [r7, #4]
  // Make sure the task is not already initialized
  CUBE_ASSERT(rtTaskHandle == nullptr, "Cannot initialize Debug task twice");
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d005      	beq.n	80004f0 <_ZN9DebugTask8InitTaskEv+0x1c>
 80004e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000524 <_ZN9DebugTask8InitTaskEv+0x50>)
 80004e6:	222e      	movs	r2, #46	@ 0x2e
 80004e8:	490f      	ldr	r1, [pc, #60]	@ (8000528 <_ZN9DebugTask8InitTaskEv+0x54>)
 80004ea:	2000      	movs	r0, #0
 80004ec:	f008 fbf4 	bl	8008cd8 <_Z17cube_assert_debugbPKctS0_z>

  // Start the task
  BaseType_t rtValue = xTaskCreate(
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3304      	adds	r3, #4
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2302      	movs	r3, #2
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000500:	490a      	ldr	r1, [pc, #40]	@ (800052c <_ZN9DebugTask8InitTaskEv+0x58>)
 8000502:	480b      	ldr	r0, [pc, #44]	@ (8000530 <_ZN9DebugTask8InitTaskEv+0x5c>)
 8000504:	f006 f964 	bl	80067d0 <xTaskCreate>
 8000508:	60f8      	str	r0, [r7, #12]
      (TaskFunction_t)DebugTask::RunTask, (const char*)"DebugTask",
      (uint16_t)TASK_DEBUG_STACK_DEPTH_WORDS, (void*)this,
      (UBaseType_t)TASK_DEBUG_PRIORITY, (TaskHandle_t*)&rtTaskHandle);

  // Ensure creation succeded
  CUBE_ASSERT(rtValue == pdPASS, "DebugTask::InitTask - xTaskCreate() failed");
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d005      	beq.n	800051c <_ZN9DebugTask8InitTaskEv+0x48>
 8000510:	4b08      	ldr	r3, [pc, #32]	@ (8000534 <_ZN9DebugTask8InitTaskEv+0x60>)
 8000512:	2237      	movs	r2, #55	@ 0x37
 8000514:	4904      	ldr	r1, [pc, #16]	@ (8000528 <_ZN9DebugTask8InitTaskEv+0x54>)
 8000516:	2000      	movs	r0, #0
 8000518:	f008 fbde 	bl	8008cd8 <_Z17cube_assert_debugbPKctS0_z>
}
 800051c:	bf00      	nop
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	08009de8 	.word	0x08009de8
 8000528:	08009e0c 	.word	0x08009e0c
 800052c:	08009e28 	.word	0x08009e28
 8000530:	08000431 	.word	0x08000431
 8000534:	08009e34 	.word	0x08009e34

08000538 <_ZN9DebugTask3RunEPv>:

// TODO: Only run thread when appropriate GPIO pin pulled HIGH (or by define)
/**
 *    @brief Runcode for the DebugTask
 */
void DebugTask::Run(void* pvParams) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
  // Arm the interrupt
  ReceiveData();
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f000 f884 	bl	8000650 <_ZN9DebugTask11ReceiveDataEv>

  while (1) {
    Command cm;
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	4618      	mov	r0, r3
 800054e:	f008 f91e 	bl	800878e <_ZN7CommandC1Ev>

    // Wait forever for a command
    qEvtQueue->ReceiveWait(cm);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	f107 020c 	add.w	r2, r7, #12
 800055a:	4611      	mov	r1, r2
 800055c:	4618      	mov	r0, r3
 800055e:	f008 faff 	bl	8008b60 <_ZN5Queue11ReceiveWaitER7Command>

    // Process the command
    if (cm.GetCommand() == DATA_COMMAND &&
 8000562:	f107 030c 	add.w	r3, r7, #12
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff ff22 	bl	80003b0 <_ZNK7Command10GetCommandEv>
 800056c:	4603      	mov	r3, r0
 800056e:	2b02      	cmp	r3, #2
 8000570:	d109      	bne.n	8000586 <_ZN9DebugTask3RunEPv+0x4e>
        cm.GetTaskCommand() == EVENT_DEBUG_RX_COMPLETE) {
 8000572:	f107 030c 	add.w	r3, r7, #12
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff ff26 	bl	80003c8 <_ZNK7Command14GetTaskCommandEv>
 800057c:	4603      	mov	r3, r0
    if (cm.GetCommand() == DATA_COMMAND &&
 800057e:	2b01      	cmp	r3, #1
 8000580:	d101      	bne.n	8000586 <_ZN9DebugTask3RunEPv+0x4e>
 8000582:	2301      	movs	r3, #1
 8000584:	e000      	b.n	8000588 <_ZN9DebugTask3RunEPv+0x50>
 8000586:	2300      	movs	r3, #0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d005      	beq.n	8000598 <_ZN9DebugTask3RunEPv+0x60>
      HandleDebugMessage((const char*)debugBuffer);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3310      	adds	r3, #16
 8000590:	4619      	mov	r1, r3
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f000 f806 	bl	80005a4 <_ZN9DebugTask18HandleDebugMessageEPKc>
    }

    cm.Reset();
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	4618      	mov	r0, r3
 800059e:	f008 f98f 	bl	80088c0 <_ZN7Command5ResetEv>
  }
 80005a2:	e7d1      	b.n	8000548 <_ZN9DebugTask3RunEPv+0x10>

080005a4 <_ZN9DebugTask18HandleDebugMessageEPKc>:

/**
 * @brief Handles debug messages, assumes msg is null terminated
 * @param msg Message to read, must be null termianted
 */
void DebugTask::HandleDebugMessage(const char* msg) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
  //-- SYSTEM / CHAR COMMANDS -- (Must be last)
  if (strcmp(msg, "sysreset") == 0) {
 80005ae:	491f      	ldr	r1, [pc, #124]	@ (800062c <_ZN9DebugTask18HandleDebugMessageEPKc+0x88>)
 80005b0:	6838      	ldr	r0, [r7, #0]
 80005b2:	f7ff fe95 	bl	80002e0 <strcmp>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d106      	bne.n	80005ca <_ZN9DebugTask18HandleDebugMessageEPKc+0x26>
    // Reset the system
    CUBE_ASSERT(false, "System reset requested");
 80005bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000630 <_ZN9DebugTask18HandleDebugMessageEPKc+0x8c>)
 80005be:	225a      	movs	r2, #90	@ 0x5a
 80005c0:	491c      	ldr	r1, [pc, #112]	@ (8000634 <_ZN9DebugTask18HandleDebugMessageEPKc+0x90>)
 80005c2:	2000      	movs	r0, #0
 80005c4:	f008 fb88 	bl	8008cd8 <_Z17cube_assert_debugbPKctS0_z>
 80005c8:	e024      	b.n	8000614 <_ZN9DebugTask18HandleDebugMessageEPKc+0x70>
  } else if (strcmp(msg, "sysinfo") == 0) {
 80005ca:	491b      	ldr	r1, [pc, #108]	@ (8000638 <_ZN9DebugTask18HandleDebugMessageEPKc+0x94>)
 80005cc:	6838      	ldr	r0, [r7, #0]
 80005ce:	f7ff fe87 	bl	80002e0 <strcmp>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d118      	bne.n	800060a <_ZN9DebugTask18HandleDebugMessageEPKc+0x66>
    // Print message
    CUBE_PRINT("\n\n-- CUBE SYSTEM --\n");
 80005d8:	4818      	ldr	r0, [pc, #96]	@ (800063c <_ZN9DebugTask18HandleDebugMessageEPKc+0x98>)
 80005da:	f008 fb1b 	bl	8008c14 <_Z10cube_printPKcz>
    CUBE_PRINT("Current System Free Heap: %d Bytes\n", xPortGetFreeHeapSize());
 80005de:	f007 ffc7 	bl	8008570 <xPortGetFreeHeapSize>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4619      	mov	r1, r3
 80005e6:	4816      	ldr	r0, [pc, #88]	@ (8000640 <_ZN9DebugTask18HandleDebugMessageEPKc+0x9c>)
 80005e8:	f008 fb14 	bl	8008c14 <_Z10cube_printPKcz>
    CUBE_PRINT("Lowest Ever Free Heap: %d Bytes\n",
 80005ec:	f007 ffcc 	bl	8008588 <xPortGetMinimumEverFreeHeapSize>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4619      	mov	r1, r3
 80005f4:	4813      	ldr	r0, [pc, #76]	@ (8000644 <_ZN9DebugTask18HandleDebugMessageEPKc+0xa0>)
 80005f6:	f008 fb0d 	bl	8008c14 <_Z10cube_printPKcz>
               xPortGetMinimumEverFreeHeapSize());
    CUBE_PRINT("Debug Task Runtime  \t: %d ms\n\n",
 80005fa:	f006 fb8b 	bl	8006d14 <xTaskGetTickCount>
 80005fe:	4603      	mov	r3, r0
 8000600:	4619      	mov	r1, r3
 8000602:	4811      	ldr	r0, [pc, #68]	@ (8000648 <_ZN9DebugTask18HandleDebugMessageEPKc+0xa4>)
 8000604:	f008 fb06 	bl	8008c14 <_Z10cube_printPKcz>
 8000608:	e004      	b.n	8000614 <_ZN9DebugTask18HandleDebugMessageEPKc+0x70>
               TICKS_TO_MS(xTaskGetTickCount()));
  } else {
    // Single character command, or unknown command
    switch (msg[0]) {
      default:
        CUBE_PRINT("Debug, unknown command: %s\n", msg);
 800060a:	6839      	ldr	r1, [r7, #0]
 800060c:	480f      	ldr	r0, [pc, #60]	@ (800064c <_ZN9DebugTask18HandleDebugMessageEPKc+0xa8>)
 800060e:	f008 fb01 	bl	8008c14 <_Z10cube_printPKcz>
        break;
 8000612:	bf00      	nop
    }
  }

  // We've read the data, clear the buffer
  debugMsgIdx = 0;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2200      	movs	r2, #0
 8000618:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  isDebugMsgReady = false;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2200      	movs	r2, #0
 8000620:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	08009e60 	.word	0x08009e60
 8000630:	08009e6c 	.word	0x08009e6c
 8000634:	08009e0c 	.word	0x08009e0c
 8000638:	08009e84 	.word	0x08009e84
 800063c:	08009e8c 	.word	0x08009e8c
 8000640:	08009ea4 	.word	0x08009ea4
 8000644:	08009ec8 	.word	0x08009ec8
 8000648:	08009eec 	.word	0x08009eec
 800064c:	08009f0c 	.word	0x08009f0c

08000650 <_ZN9DebugTask11ReceiveDataEv>:

/**
 * @brief Receive data, currently receives by arming interrupt
 */
bool DebugTask::ReceiveData() { return kUart_->ReceiveIT(&debugRxChar, this); }
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f103 0123 	add.w	r1, r3, #35	@ 0x23
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	330c      	adds	r3, #12
 8000666:	461a      	mov	r2, r3
 8000668:	f008 fde1 	bl	800922e <_ZN10UARTDriver9ReceiveITEPhP16UARTReceiverBase>
 800066c:	4603      	mov	r3, r0
 800066e:	4618      	mov	r0, r3
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <_ZN9DebugTask15InterruptRxDataEh>:

/**
 * @brief Receive data to the buffer
 * @return Whether the debugBuffer is ready or not
 */
void DebugTask::InterruptRxData(uint8_t errors) {
 8000676:	b580      	push	{r7, lr}
 8000678:	b086      	sub	sp, #24
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
 800067e:	460b      	mov	r3, r1
 8000680:	70fb      	strb	r3, [r7, #3]
  // If we already have an unprocessed debug message, ignore this byte
  if (!isDebugMsgReady) {
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000688:	f083 0301 	eor.w	r3, r3, #1
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b00      	cmp	r3, #0
 8000690:	d049      	beq.n	8000726 <_ZN9DebugTask15InterruptRxDataEh+0xb0>
    // Check byte for end of message - note if using termite you must turn on
    // append CR
    if (debugRxChar == '\r' || debugMsgIdx == DEBUG_RX_BUFFER_SZ_BYTES) {
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000698:	2b0d      	cmp	r3, #13
 800069a:	d004      	beq.n	80006a6 <_ZN9DebugTask15InterruptRxDataEh+0x30>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80006a2:	2b10      	cmp	r3, #16
 80006a4:	d12d      	bne.n	8000702 <_ZN9DebugTask15InterruptRxDataEh+0x8c>
      // Null terminate and process
      debugBuffer[debugMsgIdx++] = '\0';
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80006ac:	1c5a      	adds	r2, r3, #1
 80006ae:	b2d1      	uxtb	r1, r2
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	f882 1021 	strb.w	r1, [r2, #33]	@ 0x21
 80006b6:	461a      	mov	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4413      	add	r3, r2
 80006bc:	2200      	movs	r2, #0
 80006be:	741a      	strb	r2, [r3, #16]
      isDebugMsgReady = true;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2201      	movs	r2, #1
 80006c4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

      // Notify the debug task
      Command cm(DATA_COMMAND, EVENT_DEBUG_RX_COMPLETE);
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2201      	movs	r2, #1
 80006ce:	2102      	movs	r1, #2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f008 f876 	bl	80087c2 <_ZN7CommandC1E15GLOBAL_COMMANDSt>
      bool res = qEvtQueue->SendFromISR(cm);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	f107 0208 	add.w	r2, r7, #8
 80006de:	4611      	mov	r1, r2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f008 f9f6 	bl	8008ad2 <_ZN5Queue11SendFromISRER7Command>
 80006e6:	4603      	mov	r3, r0
 80006e8:	75fb      	strb	r3, [r7, #23]

      // If we failed to send the event, we should reset the buffer, that way
      // DebugTask doesn't stall
      if (res == false) {
 80006ea:	7dfb      	ldrb	r3, [r7, #23]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d119      	bne.n	8000724 <_ZN9DebugTask15InterruptRxDataEh+0xae>
        debugMsgIdx = 0;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        isDebugMsgReady = false;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      }
    } else {
 8000700:	e010      	b.n	8000724 <_ZN9DebugTask15InterruptRxDataEh+0xae>
      debugBuffer[debugMsgIdx++] = debugRxChar;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f893 1023 	ldrb.w	r1, [r3, #35]	@ 0x23
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	b2d0      	uxtb	r0, r2
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	f882 0021 	strb.w	r0, [r2, #33]	@ 0x21
 8000718:	461a      	mov	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	460a      	mov	r2, r1
 8000720:	741a      	strb	r2, [r3, #16]
 8000722:	e000      	b.n	8000726 <_ZN9DebugTask15InterruptRxDataEh+0xb0>
    } else {
 8000724:	bf00      	nop
    }
  }

  // Re-arm the interrupt
  ReceiveData();
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff ff92 	bl	8000650 <_ZN9DebugTask11ReceiveDataEv>
}
 800072c:	bf00      	nop
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <_ZThn12_N9DebugTask15InterruptRxDataEh>:
  void InterruptRxData(uint8_t errors);
 8000734:	f1a0 000c 	sub.w	r0, r0, #12
 8000738:	f7ff bf9d 	b.w	8000676 <_ZN9DebugTask15InterruptRxDataEh>

0800073c <run_interface>:
#include "main_system.hpp"
#include "UARTDriver.hpp"

extern "C" {
    void run_interface()
    {
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
        run_main();
 8000740:	f000 f854 	bl	80007ec <_Z8run_mainv>
    }
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <_ZN10UARTDriverC1EP13USART_TypeDef>:
 *	      based on the STM32 LL Library
 */
class UARTDriver
{
public:
	UARTDriver(USART_TypeDef* uartInstance) :
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
		kUart_(uartInstance),
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	683a      	ldr	r2, [r7, #0]
 8000756:	601a      	str	r2, [r3, #0]
		rxCharBuf_(nullptr),
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2200      	movs	r2, #0
 800075c:	605a      	str	r2, [r3, #4]
		rxReceiver_(nullptr) {}
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4618      	mov	r0, r3
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <_ZN8CubeTask4InstEv>:

/* Class ------------------------------------------------------------------*/
class CubeTask : public Task
{
public:
    static CubeTask& Inst() {
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
        static CubeTask inst;
 8000778:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <_ZN8CubeTask4InstEv+0x48>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f3bf 8f5b 	dmb	ish
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	2b00      	cmp	r3, #0
 8000786:	bf0c      	ite	eq
 8000788:	2301      	moveq	r3, #1
 800078a:	2300      	movne	r3, #0
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	d010      	beq.n	80007b4 <_ZN8CubeTask4InstEv+0x40>
 8000792:	480a      	ldr	r0, [pc, #40]	@ (80007bc <_ZN8CubeTask4InstEv+0x48>)
 8000794:	f008 fdc8 	bl	8009328 <__cxa_guard_acquire>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	bf14      	ite	ne
 800079e:	2301      	movne	r3, #1
 80007a0:	2300      	moveq	r3, #0
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d005      	beq.n	80007b4 <_ZN8CubeTask4InstEv+0x40>
 80007a8:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <_ZN8CubeTask4InstEv+0x4c>)
 80007aa:	f000 f80b 	bl	80007c4 <_ZN8CubeTaskC1Ev>
 80007ae:	4803      	ldr	r0, [pc, #12]	@ (80007bc <_ZN8CubeTask4InstEv+0x48>)
 80007b0:	f008 fdc6 	bl	8009340 <__cxa_guard_release>
        return inst;
 80007b4:	4b02      	ldr	r3, [pc, #8]	@ (80007c0 <_ZN8CubeTask4InstEv+0x4c>)
    }
 80007b6:	4618      	mov	r0, r3
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	240000b8 	.word	0x240000b8
 80007c0:	240000ac 	.word	0x240000ac

080007c4 <_ZN8CubeTaskC1Ev>:
    void Run(void* pvParams);    // Main run code

    void HandleCommand(Command& cm);

private:
    CubeTask() : Task(UART_TASK_QUEUE_DEPTH_OBJS) {}    // Private constructor
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	210a      	movs	r1, #10
 80007d0:	4618      	mov	r0, r3
 80007d2:	f008 f9ed 	bl	8008bb0 <_ZN4TaskC1Et>
 80007d6:	4a04      	ldr	r2, [pc, #16]	@ (80007e8 <_ZN8CubeTaskC1Ev+0x24>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	0800a390 	.word	0x0800a390

080007ec <_Z8run_mainv>:

/* Interface Functions ------------------------------------------------------------*/
/**
 * @brief Main function interface, called inside main.cpp before os initialization takes place.
*/
void run_main() {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
    // Init Tasks
    CubeTask::Inst().InitTask();
 80007f0:	f7ff ffc0 	bl	8000774 <_ZN8CubeTask4InstEv>
 80007f4:	4603      	mov	r3, r0
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	6812      	ldr	r2, [r2, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	4790      	blx	r2
    DebugTask::Inst().InitTask();
 80007fe:	f7ff fdef 	bl	80003e0 <_ZN9DebugTask4InstEv>
 8000802:	4603      	mov	r3, r0
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	6812      	ldr	r2, [r2, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	4790      	blx	r2

    // Print System Boot Info : Warning, don't queue more than 10 prints before scheduler starts
    CUBE_PRINT("\n-- CUBE SYSTEM --\n");
 800080c:	4811      	ldr	r0, [pc, #68]	@ (8000854 <_Z8run_mainv+0x68>)
 800080e:	f008 fa01 	bl	8008c14 <_Z10cube_printPKcz>
    CUBE_PRINT("System Reset Reason: [TODO]\n"); //TODO: System reset reason can be implemented via. Flash storage
 8000812:	4811      	ldr	r0, [pc, #68]	@ (8000858 <_Z8run_mainv+0x6c>)
 8000814:	f008 f9fe 	bl	8008c14 <_Z10cube_printPKcz>
    CUBE_PRINT("Current System Free Heap: %d Bytes\n", xPortGetFreeHeapSize());
 8000818:	f007 feaa 	bl	8008570 <xPortGetFreeHeapSize>
 800081c:	4603      	mov	r3, r0
 800081e:	4619      	mov	r1, r3
 8000820:	480e      	ldr	r0, [pc, #56]	@ (800085c <_Z8run_mainv+0x70>)
 8000822:	f008 f9f7 	bl	8008c14 <_Z10cube_printPKcz>
    CUBE_PRINT("Lowest Ever Free Heap: %d Bytes\n\n", xPortGetMinimumEverFreeHeapSize());
 8000826:	f007 feaf 	bl	8008588 <xPortGetMinimumEverFreeHeapSize>
 800082a:	4603      	mov	r3, r0
 800082c:	4619      	mov	r1, r3
 800082e:	480c      	ldr	r0, [pc, #48]	@ (8000860 <_Z8run_mainv+0x74>)
 8000830:	f008 f9f0 	bl	8008c14 <_Z10cube_printPKcz>

    // Start the Scheduler
    // Guidelines:
    // - Be CAREFUL with race conditions after osKernelStart
    // - All uses of new and delete should be closely monitored after this point
    osKernelStart();
 8000834:	f004 ffc2 	bl	80057bc <osKernelStart>

    // Should never reach here
    CUBE_ASSERT(false, "osKernelStart() failed");
 8000838:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <_Z8run_mainv+0x78>)
 800083a:	222b      	movs	r2, #43	@ 0x2b
 800083c:	490a      	ldr	r1, [pc, #40]	@ (8000868 <_Z8run_mainv+0x7c>)
 800083e:	2000      	movs	r0, #0
 8000840:	f008 fa4a 	bl	8008cd8 <_Z17cube_assert_debugbPKctS0_z>

    while (1)
    {
        osDelay(100);
 8000844:	2064      	movs	r0, #100	@ 0x64
 8000846:	f004 ffc0 	bl	80057ca <osDelay>
        HAL_NVIC_SystemReset();
 800084a:	f000 fe8e 	bl	800156a <HAL_NVIC_SystemReset>
        osDelay(100);
 800084e:	bf00      	nop
 8000850:	e7f8      	b.n	8000844 <_Z8run_mainv+0x58>
 8000852:	bf00      	nop
 8000854:	08009f7c 	.word	0x08009f7c
 8000858:	08009f90 	.word	0x08009f90
 800085c:	08009fb0 	.word	0x08009fb0
 8000860:	08009fd4 	.word	0x08009fd4
 8000864:	08009ff8 	.word	0x08009ff8
 8000868:	0800a010 	.word	0x0800a010

0800086c <_Z41__static_initialization_and_destruction_0ii>:
    }
}
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d108      	bne.n	800088e <_Z41__static_initialization_and_destruction_0ii+0x22>
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000882:	4293      	cmp	r3, r2
 8000884:	d103      	bne.n	800088e <_Z41__static_initialization_and_destruction_0ii+0x22>
    UARTDriver uart4(UART4);
 8000886:	4904      	ldr	r1, [pc, #16]	@ (8000898 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000888:	4804      	ldr	r0, [pc, #16]	@ (800089c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800088a:	f7ff ff5d 	bl	8000748 <_ZN10UARTDriverC1EP13USART_TypeDef>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40004c00 	.word	0x40004c00
 800089c:	240000bc 	.word	0x240000bc

080008a0 <_GLOBAL__sub_I__ZN6Driver5uart4E>:
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80008a8:	2001      	movs	r0, #1
 80008aa:	f7ff ffdf 	bl	800086c <_Z41__static_initialization_and_destruction_0ii>
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4a07      	ldr	r2, [pc, #28]	@ (80008dc <vApplicationGetIdleTaskMemory+0x2c>)
 80008c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	4a06      	ldr	r2, [pc, #24]	@ (80008e0 <vApplicationGetIdleTaskMemory+0x30>)
 80008c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	22c0      	movs	r2, #192	@ 0xc0
 80008cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80008ce:	bf00      	nop
 80008d0:	3714      	adds	r7, #20
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	240000c8 	.word	0x240000c8
 80008e0:	24000168 	.word	0x24000168

080008e4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	4a07      	ldr	r2, [pc, #28]	@ (8000910 <vApplicationGetTimerTaskMemory+0x2c>)
 80008f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	4a06      	ldr	r2, [pc, #24]	@ (8000914 <vApplicationGetTimerTaskMemory+0x30>)
 80008fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000902:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000904:	bf00      	nop
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	24000468 	.word	0x24000468
 8000914:	24000508 	.word	0x24000508

08000918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800091c:	4b04      	ldr	r3, [pc, #16]	@ (8000930 <__NVIC_GetPriorityGrouping+0x18>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	f003 0307 	and.w	r3, r3, #7
}
 8000926:	4618      	mov	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800093e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000942:	2b00      	cmp	r3, #0
 8000944:	db0b      	blt.n	800095e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	f003 021f 	and.w	r2, r3, #31
 800094c:	4907      	ldr	r1, [pc, #28]	@ (800096c <__NVIC_EnableIRQ+0x38>)
 800094e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000952:	095b      	lsrs	r3, r3, #5
 8000954:	2001      	movs	r0, #1
 8000956:	fa00 f202 	lsl.w	r2, r0, r2
 800095a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000e100 	.word	0xe000e100

08000970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	6039      	str	r1, [r7, #0]
 800097a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800097c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000980:	2b00      	cmp	r3, #0
 8000982:	db0a      	blt.n	800099a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	b2da      	uxtb	r2, r3
 8000988:	490c      	ldr	r1, [pc, #48]	@ (80009bc <__NVIC_SetPriority+0x4c>)
 800098a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800098e:	0112      	lsls	r2, r2, #4
 8000990:	b2d2      	uxtb	r2, r2
 8000992:	440b      	add	r3, r1
 8000994:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000998:	e00a      	b.n	80009b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4908      	ldr	r1, [pc, #32]	@ (80009c0 <__NVIC_SetPriority+0x50>)
 80009a0:	88fb      	ldrh	r3, [r7, #6]
 80009a2:	f003 030f 	and.w	r3, r3, #15
 80009a6:	3b04      	subs	r3, #4
 80009a8:	0112      	lsls	r2, r2, #4
 80009aa:	b2d2      	uxtb	r2, r2
 80009ac:	440b      	add	r3, r1
 80009ae:	761a      	strb	r2, [r3, #24]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000e100 	.word	0xe000e100
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b089      	sub	sp, #36	@ 0x24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	f1c3 0307 	rsb	r3, r3, #7
 80009de:	2b04      	cmp	r3, #4
 80009e0:	bf28      	it	cs
 80009e2:	2304      	movcs	r3, #4
 80009e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3304      	adds	r3, #4
 80009ea:	2b06      	cmp	r3, #6
 80009ec:	d902      	bls.n	80009f4 <NVIC_EncodePriority+0x30>
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3b03      	subs	r3, #3
 80009f2:	e000      	b.n	80009f6 <NVIC_EncodePriority+0x32>
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f8:	f04f 32ff 	mov.w	r2, #4294967295
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	43da      	mvns	r2, r3
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	401a      	ands	r2, r3
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa01 f303 	lsl.w	r3, r1, r3
 8000a16:	43d9      	mvns	r1, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	4313      	orrs	r3, r2
         );
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3724      	adds	r7, #36	@ 0x24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f043 0201 	orr.w	r2, r3, #1
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	601a      	str	r2, [r3, #0]
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	601a      	str	r2, [r3, #0]
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b089      	sub	sp, #36	@ 0x24
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
 8000a72:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3308      	adds	r3, #8
 8000a78:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	e853 3f00 	ldrex	r3, [r3]
 8000a80:	60bb      	str	r3, [r7, #8]
   return(result);
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	075b      	lsls	r3, r3, #29
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	61fb      	str	r3, [r7, #28]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3308      	adds	r3, #8
 8000a94:	69fa      	ldr	r2, [r7, #28]
 8000a96:	61ba      	str	r2, [r7, #24]
 8000a98:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000a9a:	6979      	ldr	r1, [r7, #20]
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	e841 2300 	strex	r3, r2, [r1]
 8000aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d1e4      	bne.n	8000a74 <LL_USART_SetTXFIFOThreshold+0xa>
}
 8000aaa:	bf00      	nop
 8000aac:	bf00      	nop
 8000aae:	3724      	adds	r7, #36	@ 0x24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b089      	sub	sp, #36	@ 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3308      	adds	r3, #8
 8000ac6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	e853 3f00 	ldrex	r3, [r3]
 8000ace:	60bb      	str	r3, [r7, #8]
   return(result);
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	065b      	lsls	r3, r3, #25
 8000ada:	4313      	orrs	r3, r2
 8000adc:	61fb      	str	r3, [r7, #28]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3308      	adds	r3, #8
 8000ae2:	69fa      	ldr	r2, [r7, #28]
 8000ae4:	61ba      	str	r2, [r7, #24]
 8000ae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000ae8:	6979      	ldr	r1, [r7, #20]
 8000aea:	69ba      	ldr	r2, [r7, #24]
 8000aec:	e841 2300 	strex	r3, r2, [r1]
 8000af0:	613b      	str	r3, [r7, #16]
   return(result);
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d1e4      	bne.n	8000ac2 <LL_USART_SetRXFIFOThreshold+0xa>
}
 8000af8:	bf00      	nop
 8000afa:	bf00      	nop
 8000afc:	3724      	adds	r7, #36	@ 0x24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	609a      	str	r2, [r3, #8]
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000b46:	d101      	bne.n	8000b4c <LL_USART_IsActiveFlag_TEACK+0x1a>
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e000      	b.n	8000b4e <LL_USART_IsActiveFlag_TEACK+0x1c>
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000b6e:	d101      	bne.n	8000b74 <LL_USART_IsActiveFlag_REACK+0x1a>
 8000b70:	2301      	movs	r3, #1
 8000b72:	e000      	b.n	8000b76 <LL_USART_IsActiveFlag_REACK+0x1c>
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <LL_AHB4_GRP1_EnableClock+0x34>)
 8000b8e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b92:	4909      	ldr	r1, [pc, #36]	@ (8000bb8 <LL_AHB4_GRP1_EnableClock+0x34>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <LL_AHB4_GRP1_EnableClock+0x34>)
 8000b9e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	58024400 	.word	0x58024400

08000bbc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <LL_APB1_GRP1_EnableClock+0x34>)
 8000bc6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000bca:	4909      	ldr	r1, [pc, #36]	@ (8000bf0 <LL_APB1_GRP1_EnableClock+0x34>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <LL_APB1_GRP1_EnableClock+0x34>)
 8000bd6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000be0:	68fb      	ldr	r3, [r7, #12]
}
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	58024400 	.word	0x58024400

08000bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000bf8:	f000 f956 	bl	8000ea8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bfc:	f000 fb56 	bl	80012ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c00:	f000 f80c 	bl	8000c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c04:	f000 f936 	bl	8000e74 <MX_GPIO_Init>
  MX_CRC_Init();
 8000c08:	f000 f872 	bl	8000cf0 <MX_CRC_Init>
  MX_UART4_Init();
 8000c0c:	f000 f892 	bl	8000d34 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  run_interface();
 8000c10:	f7ff fd94 	bl	800073c <run_interface>
 8000c14:	2300      	movs	r3, #0

    /* USER CODE BEGIN 3 */
  }
  #endif
  /* USER CODE END 3 */
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b09c      	sub	sp, #112	@ 0x70
 8000c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c26:	224c      	movs	r2, #76	@ 0x4c
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f008 fbfa 	bl	8009424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2220      	movs	r2, #32
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f008 fbf4 	bl	8009424 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	f000 fe03 	bl	8001848 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	4b28      	ldr	r3, [pc, #160]	@ (8000ce8 <SystemClock_Config+0xcc>)
 8000c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c4a:	4a27      	ldr	r2, [pc, #156]	@ (8000ce8 <SystemClock_Config+0xcc>)
 8000c4c:	f023 0301 	bic.w	r3, r3, #1
 8000c50:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c52:	4b25      	ldr	r3, [pc, #148]	@ (8000ce8 <SystemClock_Config+0xcc>)
 8000c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	4b23      	ldr	r3, [pc, #140]	@ (8000cec <SystemClock_Config+0xd0>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c64:	4a21      	ldr	r2, [pc, #132]	@ (8000cec <SystemClock_Config+0xd0>)
 8000c66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cec <SystemClock_Config+0xd0>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c78:	bf00      	nop
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cec <SystemClock_Config+0xd0>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c86:	d1f8      	bne.n	8000c7a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c90:	2340      	movs	r3, #64	@ 0x40
 8000c92:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 fe0d 	bl	80018bc <HAL_RCC_OscConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000ca8:	f000 f939 	bl	8000f1e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cac:	233f      	movs	r3, #63	@ 0x3f
 8000cae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cc0:	2340      	movs	r3, #64	@ 0x40
 8000cc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2101      	movs	r1, #1
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f001 fa4d 	bl	8002170 <HAL_RCC_ClockConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000cdc:	f000 f91f 	bl	8000f1e <Error_Handler>
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	3770      	adds	r7, #112	@ 0x70
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	58000400 	.word	0x58000400
 8000cec:	58024800 	.word	0x58024800

08000cf0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000cf4:	4b0d      	ldr	r3, [pc, #52]	@ (8000d2c <MX_CRC_Init+0x3c>)
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	@ (8000d30 <MX_CRC_Init+0x40>)
 8000cf8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <MX_CRC_Init+0x3c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d00:	4b0a      	ldr	r3, [pc, #40]	@ (8000d2c <MX_CRC_Init+0x3c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d06:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <MX_CRC_Init+0x3c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d0c:	4b07      	ldr	r3, [pc, #28]	@ (8000d2c <MX_CRC_Init+0x3c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d12:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <MX_CRC_Init+0x3c>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d18:	4804      	ldr	r0, [pc, #16]	@ (8000d2c <MX_CRC_Init+0x3c>)
 8000d1a:	f000 fca3 	bl	8001664 <HAL_CRC_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d24:	f000 f8fb 	bl	8000f1e <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	24000b08 	.word	0x24000b08
 8000d30:	58024c00 	.word	0x58024c00

08000d34 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b0be      	sub	sp, #248	@ 0xf8
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef UART_InitStruct = {0};
 8000d3a:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8000d3e:	2220      	movs	r2, #32
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f008 fb6e 	bl	8009424 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
 8000d58:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	22c0      	movs	r2, #192	@ 0xc0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f008 fb5f 	bl	8009424 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000d66:	f04f 0202 	mov.w	r2, #2
 8000d6a:	f04f 0300 	mov.w	r3, #0
 8000d6e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d76:	463b      	mov	r3, r7
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f001 fdb1 	bl	80028e0 <HAL_RCCEx_PeriphCLKConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_UART4_Init+0x54>
  {
    Error_Handler();
 8000d84:	f000 f8cb 	bl	8000f1e <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8000d88:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000d8c:	f7ff ff16 	bl	8000bbc <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8000d90:	2001      	movs	r0, #1
 8000d92:	f7ff fef7 	bl	8000b84 <LL_AHB4_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PA0   ------> UART4_TX
  PA1   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8000d96:	2303      	movs	r3, #3
 8000d98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dae:	2300      	movs	r3, #0
 8000db0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8000db4:	2308      	movs	r3, #8
 8000db6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	482a      	ldr	r0, [pc, #168]	@ (8000e6c <MX_UART4_Init+0x138>)
 8000dc2:	f003 fca3 	bl	800470c <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000dc6:	f7ff fda7 	bl	8000918 <__NVIC_GetPriorityGrouping>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2105      	movs	r1, #5
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fdf7 	bl	80009c4 <NVIC_EncodePriority>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4619      	mov	r1, r3
 8000dda:	2034      	movs	r0, #52	@ 0x34
 8000ddc:	f7ff fdc8 	bl	8000970 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8000de0:	2034      	movs	r0, #52	@ 0x34
 8000de2:	f7ff fda7 	bl	8000934 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  UART_InitStruct.BaudRate = 115200;
 8000dec:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000df0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  UART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000e06:	230c      	movs	r3, #12
 8000e08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_USART_Init(UART4, &UART_InitStruct);
 8000e18:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4814      	ldr	r0, [pc, #80]	@ (8000e70 <MX_UART4_Init+0x13c>)
 8000e20:	f004 fc22 	bl	8005668 <LL_USART_Init>
  LL_USART_DisableFIFO(UART4);
 8000e24:	4812      	ldr	r0, [pc, #72]	@ (8000e70 <MX_UART4_Init+0x13c>)
 8000e26:	f7ff fe10 	bl	8000a4a <LL_USART_DisableFIFO>
  LL_USART_SetTXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4810      	ldr	r0, [pc, #64]	@ (8000e70 <MX_UART4_Init+0x13c>)
 8000e2e:	f7ff fe1c 	bl	8000a6a <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 8000e32:	2100      	movs	r1, #0
 8000e34:	480e      	ldr	r0, [pc, #56]	@ (8000e70 <MX_UART4_Init+0x13c>)
 8000e36:	f7ff fe3f 	bl	8000ab8 <LL_USART_SetRXFIFOThreshold>
  LL_USART_ConfigAsyncMode(UART4);
 8000e3a:	480d      	ldr	r0, [pc, #52]	@ (8000e70 <MX_UART4_Init+0x13c>)
 8000e3c:	f7ff fe63 	bl	8000b06 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType UART4 */

  /* USER CODE END WKUPType UART4 */

  LL_USART_Enable(UART4);
 8000e40:	480b      	ldr	r0, [pc, #44]	@ (8000e70 <MX_UART4_Init+0x13c>)
 8000e42:	f7ff fdf2 	bl	8000a2a <LL_USART_Enable>

  /* Polling UART4 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(UART4))) || (!(LL_USART_IsActiveFlag_REACK(UART4))))
 8000e46:	bf00      	nop
 8000e48:	4809      	ldr	r0, [pc, #36]	@ (8000e70 <MX_UART4_Init+0x13c>)
 8000e4a:	f7ff fe72 	bl	8000b32 <LL_USART_IsActiveFlag_TEACK>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d0f9      	beq.n	8000e48 <MX_UART4_Init+0x114>
 8000e54:	4806      	ldr	r0, [pc, #24]	@ (8000e70 <MX_UART4_Init+0x13c>)
 8000e56:	f7ff fe80 	bl	8000b5a <LL_USART_IsActiveFlag_REACK>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0f3      	beq.n	8000e48 <MX_UART4_Init+0x114>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	37f8      	adds	r7, #248	@ 0xf8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	58020000 	.word	0x58020000
 8000e70:	40004c00 	.word	0x40004c00

08000e74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <MX_GPIO_Init+0x30>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e80:	4a08      	ldr	r2, [pc, #32]	@ (8000ea4 <MX_GPIO_Init+0x30>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <MX_GPIO_Init+0x30>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	58024400 	.word	0x58024400

08000ea8 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000eba:	f000 fb5b 	bl	8001574 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000eca:	231f      	movs	r3, #31
 8000ecc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ece:	2387      	movs	r3, #135	@ 0x87
 8000ed0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000eda:	2301      	movs	r3, #1
 8000edc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eea:	463b      	mov	r3, r7
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 fb79 	bl	80015e4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ef2:	2004      	movs	r0, #4
 8000ef4:	f000 fb56 	bl	80015a4 <HAL_MPU_Enable>

}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f10:	d101      	bne.n	8000f16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f12:	f000 fa07 	bl	8001324 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f22:	b672      	cpsid	i
}
 8000f24:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f26:	bf00      	nop
 8000f28:	e7fd      	b.n	8000f26 <Error_Handler+0x8>
	...

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <HAL_MspInit+0x38>)
 8000f34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f38:	4a0a      	ldr	r2, [pc, #40]	@ (8000f64 <HAL_MspInit+0x38>)
 8000f3a:	f043 0302 	orr.w	r3, r3, #2
 8000f3e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f42:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <HAL_MspInit+0x38>)
 8000f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	210f      	movs	r1, #15
 8000f54:	f06f 0001 	mvn.w	r0, #1
 8000f58:	f000 fadf 	bl	800151a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	58024400 	.word	0x58024400

08000f68 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa4 <HAL_CRC_MspInit+0x3c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d10e      	bne.n	8000f98 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <HAL_CRC_MspInit+0x40>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f80:	4a09      	ldr	r2, [pc, #36]	@ (8000fa8 <HAL_CRC_MspInit+0x40>)
 8000f82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f8a:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <HAL_CRC_MspInit+0x40>)
 8000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	58024c00 	.word	0x58024c00
 8000fa8:	58024400 	.word	0x58024400

08000fac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b090      	sub	sp, #64	@ 0x40
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b0f      	cmp	r3, #15
 8000fb8:	d827      	bhi.n	800100a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	201c      	movs	r0, #28
 8000fc0:	f000 faab 	bl	800151a <HAL_NVIC_SetPriority>

     /* Enable the TIM2 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fc4:	201c      	movs	r0, #28
 8000fc6:	f000 fac2 	bl	800154e <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000fca:	4a29      	ldr	r2, [pc, #164]	@ (8001070 <HAL_InitTick+0xc4>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000fd0:	4b28      	ldr	r3, [pc, #160]	@ (8001074 <HAL_InitTick+0xc8>)
 8000fd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fd6:	4a27      	ldr	r2, [pc, #156]	@ (8001074 <HAL_InitTick+0xc8>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fe0:	4b24      	ldr	r3, [pc, #144]	@ (8001074 <HAL_InitTick+0xc8>)
 8000fe2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fee:	f107 0210 	add.w	r2, r7, #16
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f001 fc2f 	bl	800285c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001000:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001004:	2b00      	cmp	r3, #0
 8001006:	d106      	bne.n	8001016 <HAL_InitTick+0x6a>
 8001008:	e001      	b.n	800100e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e02c      	b.n	8001068 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800100e:	f001 fc0f 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8001012:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001014:	e004      	b.n	8001020 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001016:	f001 fc0b 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 800101a:	4603      	mov	r3, r0
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001022:	4a15      	ldr	r2, [pc, #84]	@ (8001078 <HAL_InitTick+0xcc>)
 8001024:	fba2 2303 	umull	r2, r3, r2, r3
 8001028:	0c9b      	lsrs	r3, r3, #18
 800102a:	3b01      	subs	r3, #1
 800102c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800102e:	4b13      	ldr	r3, [pc, #76]	@ (800107c <HAL_InitTick+0xd0>)
 8001030:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001034:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001036:	4b11      	ldr	r3, [pc, #68]	@ (800107c <HAL_InitTick+0xd0>)
 8001038:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800103c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800103e:	4a0f      	ldr	r2, [pc, #60]	@ (800107c <HAL_InitTick+0xd0>)
 8001040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001042:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001044:	4b0d      	ldr	r3, [pc, #52]	@ (800107c <HAL_InitTick+0xd0>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104a:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <HAL_InitTick+0xd0>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001050:	480a      	ldr	r0, [pc, #40]	@ (800107c <HAL_InitTick+0xd0>)
 8001052:	f002 ffb3 	bl	8003fbc <HAL_TIM_Base_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d104      	bne.n	8001066 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800105c:	4807      	ldr	r0, [pc, #28]	@ (800107c <HAL_InitTick+0xd0>)
 800105e:	f003 f80f 	bl	8004080 <HAL_TIM_Base_Start_IT>
 8001062:	4603      	mov	r3, r0
 8001064:	e000      	b.n	8001068 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	3740      	adds	r7, #64	@ 0x40
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	24000008 	.word	0x24000008
 8001074:	58024400 	.word	0x58024400
 8001078:	431bde83 	.word	0x431bde83
 800107c:	24000b2c 	.word	0x24000b2c

08001080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <NMI_Handler+0x4>

08001088 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <HardFault_Handler+0x4>

08001090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <MemManage_Handler+0x4>

08001098 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <BusFault_Handler+0x4>

080010a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <UsageFault_Handler+0x4>

080010a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010bc:	4802      	ldr	r0, [pc, #8]	@ (80010c8 <TIM2_IRQHandler+0x10>)
 80010be:	f003 f857 	bl	8004170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	24000b2c 	.word	0x24000b2c

080010cc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e4:	4a14      	ldr	r2, [pc, #80]	@ (8001138 <_sbrk+0x5c>)
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <_sbrk+0x60>)
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f0:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f8:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <_sbrk+0x64>)
 80010fa:	4a12      	ldr	r2, [pc, #72]	@ (8001144 <_sbrk+0x68>)
 80010fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fe:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	429a      	cmp	r2, r3
 800110a:	d207      	bcs.n	800111c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800110c:	f008 f9e8 	bl	80094e0 <__errno>
 8001110:	4603      	mov	r3, r0
 8001112:	220c      	movs	r2, #12
 8001114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	e009      	b.n	8001130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800111c:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001122:	4b07      	ldr	r3, [pc, #28]	@ (8001140 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	4a05      	ldr	r2, [pc, #20]	@ (8001140 <_sbrk+0x64>)
 800112c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	24080000 	.word	0x24080000
 800113c:	00000400 	.word	0x00000400
 8001140:	24000b78 	.word	0x24000b78
 8001144:	24010960 	.word	0x24010960

08001148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800114c:	4b37      	ldr	r3, [pc, #220]	@ (800122c <SystemInit+0xe4>)
 800114e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001152:	4a36      	ldr	r2, [pc, #216]	@ (800122c <SystemInit+0xe4>)
 8001154:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001158:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800115c:	4b34      	ldr	r3, [pc, #208]	@ (8001230 <SystemInit+0xe8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 030f 	and.w	r3, r3, #15
 8001164:	2b06      	cmp	r3, #6
 8001166:	d807      	bhi.n	8001178 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001168:	4b31      	ldr	r3, [pc, #196]	@ (8001230 <SystemInit+0xe8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f023 030f 	bic.w	r3, r3, #15
 8001170:	4a2f      	ldr	r2, [pc, #188]	@ (8001230 <SystemInit+0xe8>)
 8001172:	f043 0307 	orr.w	r3, r3, #7
 8001176:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001178:	4b2e      	ldr	r3, [pc, #184]	@ (8001234 <SystemInit+0xec>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a2d      	ldr	r2, [pc, #180]	@ (8001234 <SystemInit+0xec>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001184:	4b2b      	ldr	r3, [pc, #172]	@ (8001234 <SystemInit+0xec>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800118a:	4b2a      	ldr	r3, [pc, #168]	@ (8001234 <SystemInit+0xec>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4929      	ldr	r1, [pc, #164]	@ (8001234 <SystemInit+0xec>)
 8001190:	4b29      	ldr	r3, [pc, #164]	@ (8001238 <SystemInit+0xf0>)
 8001192:	4013      	ands	r3, r2
 8001194:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001196:	4b26      	ldr	r3, [pc, #152]	@ (8001230 <SystemInit+0xe8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d007      	beq.n	80011b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011a2:	4b23      	ldr	r3, [pc, #140]	@ (8001230 <SystemInit+0xe8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f023 030f 	bic.w	r3, r3, #15
 80011aa:	4a21      	ldr	r2, [pc, #132]	@ (8001230 <SystemInit+0xe8>)
 80011ac:	f043 0307 	orr.w	r3, r3, #7
 80011b0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011b2:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <SystemInit+0xec>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001234 <SystemInit+0xec>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011be:	4b1d      	ldr	r3, [pc, #116]	@ (8001234 <SystemInit+0xec>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <SystemInit+0xec>)
 80011c6:	4a1d      	ldr	r2, [pc, #116]	@ (800123c <SystemInit+0xf4>)
 80011c8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001234 <SystemInit+0xec>)
 80011cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001240 <SystemInit+0xf8>)
 80011ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011d0:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <SystemInit+0xec>)
 80011d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001244 <SystemInit+0xfc>)
 80011d4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011d6:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <SystemInit+0xec>)
 80011d8:	2200      	movs	r2, #0
 80011da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011dc:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <SystemInit+0xec>)
 80011de:	4a19      	ldr	r2, [pc, #100]	@ (8001244 <SystemInit+0xfc>)
 80011e0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011e2:	4b14      	ldr	r3, [pc, #80]	@ (8001234 <SystemInit+0xec>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011e8:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <SystemInit+0xec>)
 80011ea:	4a16      	ldr	r2, [pc, #88]	@ (8001244 <SystemInit+0xfc>)
 80011ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011ee:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <SystemInit+0xec>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <SystemInit+0xec>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001234 <SystemInit+0xec>)
 80011fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001200:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <SystemInit+0xec>)
 8001202:	2200      	movs	r2, #0
 8001204:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001206:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <SystemInit+0x100>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4b10      	ldr	r3, [pc, #64]	@ (800124c <SystemInit+0x104>)
 800120c:	4013      	ands	r3, r2
 800120e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001212:	d202      	bcs.n	800121a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001214:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <SystemInit+0x108>)
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800121a:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <SystemInit+0x10c>)
 800121c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001220:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00
 8001230:	52002000 	.word	0x52002000
 8001234:	58024400 	.word	0x58024400
 8001238:	eaf6ed7f 	.word	0xeaf6ed7f
 800123c:	02020200 	.word	0x02020200
 8001240:	01ff0000 	.word	0x01ff0000
 8001244:	01010280 	.word	0x01010280
 8001248:	5c001000 	.word	0x5c001000
 800124c:	ffff0000 	.word	0xffff0000
 8001250:	51008108 	.word	0x51008108
 8001254:	52004000 	.word	0x52004000

08001258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001258:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001290 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800125c:	f7ff ff74 	bl	8001148 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001260:	480c      	ldr	r0, [pc, #48]	@ (8001294 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001262:	490d      	ldr	r1, [pc, #52]	@ (8001298 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001264:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001268:	e002      	b.n	8001270 <LoopCopyDataInit>

0800126a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800126c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126e:	3304      	adds	r3, #4

08001270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001274:	d3f9      	bcc.n	800126a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001276:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001278:	4c0a      	ldr	r4, [pc, #40]	@ (80012a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800127c:	e001      	b.n	8001282 <LoopFillZerobss>

0800127e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001280:	3204      	adds	r2, #4

08001282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001284:	d3fb      	bcc.n	800127e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001286:	f008 f931 	bl	80094ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128a:	f7ff fcb3 	bl	8000bf4 <main>
  bx  lr
 800128e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001290:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001294:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001298:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 800129c:	0800a3e4 	.word	0x0800a3e4
  ldr r2, =_sbss
 80012a0:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 80012a4:	24010960 	.word	0x24010960

080012a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a8:	e7fe      	b.n	80012a8 <ADC3_IRQHandler>
	...

080012ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b2:	2003      	movs	r0, #3
 80012b4:	f000 f926 	bl	8001504 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012b8:	f001 f910 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 80012bc:	4602      	mov	r2, r0
 80012be:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <HAL_Init+0x68>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	0a1b      	lsrs	r3, r3, #8
 80012c4:	f003 030f 	and.w	r3, r3, #15
 80012c8:	4913      	ldr	r1, [pc, #76]	@ (8001318 <HAL_Init+0x6c>)
 80012ca:	5ccb      	ldrb	r3, [r1, r3]
 80012cc:	f003 031f 	and.w	r3, r3, #31
 80012d0:	fa22 f303 	lsr.w	r3, r2, r3
 80012d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001314 <HAL_Init+0x68>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	4a0e      	ldr	r2, [pc, #56]	@ (8001318 <HAL_Init+0x6c>)
 80012e0:	5cd3      	ldrb	r3, [r2, r3]
 80012e2:	f003 031f 	and.w	r3, r3, #31
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ec:	4a0b      	ldr	r2, [pc, #44]	@ (800131c <HAL_Init+0x70>)
 80012ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001320 <HAL_Init+0x74>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012f6:	200f      	movs	r0, #15
 80012f8:	f7ff fe58 	bl	8000fac <HAL_InitTick>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e002      	b.n	800130c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001306:	f7ff fe11 	bl	8000f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	58024400 	.word	0x58024400
 8001318:	0800a32c 	.word	0x0800a32c
 800131c:	24000004 	.word	0x24000004
 8001320:	24000000 	.word	0x24000000

08001324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <HAL_IncTick+0x20>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <HAL_IncTick+0x24>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4413      	add	r3, r2
 8001334:	4a04      	ldr	r2, [pc, #16]	@ (8001348 <HAL_IncTick+0x24>)
 8001336:	6013      	str	r3, [r2, #0]
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	2400000c 	.word	0x2400000c
 8001348:	24000b7c 	.word	0x24000b7c

0800134c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return uwTick;
 8001350:	4b03      	ldr	r3, [pc, #12]	@ (8001360 <HAL_GetTick+0x14>)
 8001352:	681b      	ldr	r3, [r3, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	24000b7c 	.word	0x24000b7c

08001364 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001368:	4b03      	ldr	r3, [pc, #12]	@ (8001378 <HAL_GetREVID+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	0c1b      	lsrs	r3, r3, #16
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	5c001000 	.word	0x5c001000

0800137c <__NVIC_SetPriorityGrouping>:
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800138c:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <__NVIC_SetPriorityGrouping+0x40>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001398:	4013      	ands	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013aa:	4a04      	ldr	r2, [pc, #16]	@ (80013bc <__NVIC_SetPriorityGrouping+0x40>)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	60d3      	str	r3, [r2, #12]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000ed00 	.word	0xe000ed00
 80013c0:	05fa0000 	.word	0x05fa0000

080013c4 <__NVIC_GetPriorityGrouping>:
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c8:	4b04      	ldr	r3, [pc, #16]	@ (80013dc <__NVIC_GetPriorityGrouping+0x18>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	f003 0307 	and.w	r3, r3, #7
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_EnableIRQ>:
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	db0b      	blt.n	800140a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	f003 021f 	and.w	r2, r3, #31
 80013f8:	4907      	ldr	r1, [pc, #28]	@ (8001418 <__NVIC_EnableIRQ+0x38>)
 80013fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013fe:	095b      	lsrs	r3, r3, #5
 8001400:	2001      	movs	r0, #1
 8001402:	fa00 f202 	lsl.w	r2, r0, r2
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000e100 	.word	0xe000e100

0800141c <__NVIC_SetPriority>:
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142c:	2b00      	cmp	r3, #0
 800142e:	db0a      	blt.n	8001446 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	490c      	ldr	r1, [pc, #48]	@ (8001468 <__NVIC_SetPriority+0x4c>)
 8001436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800143a:	0112      	lsls	r2, r2, #4
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	440b      	add	r3, r1
 8001440:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001444:	e00a      	b.n	800145c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4908      	ldr	r1, [pc, #32]	@ (800146c <__NVIC_SetPriority+0x50>)
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	3b04      	subs	r3, #4
 8001454:	0112      	lsls	r2, r2, #4
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	440b      	add	r3, r1
 800145a:	761a      	strb	r2, [r3, #24]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000e100 	.word	0xe000e100
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <NVIC_EncodePriority>:
{
 8001470:	b480      	push	{r7}
 8001472:	b089      	sub	sp, #36	@ 0x24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f1c3 0307 	rsb	r3, r3, #7
 800148a:	2b04      	cmp	r3, #4
 800148c:	bf28      	it	cs
 800148e:	2304      	movcs	r3, #4
 8001490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3304      	adds	r3, #4
 8001496:	2b06      	cmp	r3, #6
 8001498:	d902      	bls.n	80014a0 <NVIC_EncodePriority+0x30>
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3b03      	subs	r3, #3
 800149e:	e000      	b.n	80014a2 <NVIC_EncodePriority+0x32>
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	f04f 32ff 	mov.w	r2, #4294967295
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43da      	mvns	r2, r3
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	401a      	ands	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b8:	f04f 31ff 	mov.w	r1, #4294967295
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	43d9      	mvns	r1, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	4313      	orrs	r3, r2
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3724      	adds	r7, #36	@ 0x24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80014dc:	f3bf 8f4f 	dsb	sy
}
 80014e0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80014e2:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <__NVIC_SystemReset+0x24>)
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80014ea:	4904      	ldr	r1, [pc, #16]	@ (80014fc <__NVIC_SystemReset+0x24>)
 80014ec:	4b04      	ldr	r3, [pc, #16]	@ (8001500 <__NVIC_SystemReset+0x28>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80014f2:	f3bf 8f4f 	dsb	sy
}
 80014f6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <__NVIC_SystemReset+0x20>
 80014fc:	e000ed00 	.word	0xe000ed00
 8001500:	05fa0004 	.word	0x05fa0004

08001504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ff35 	bl	800137c <__NVIC_SetPriorityGrouping>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001528:	f7ff ff4c 	bl	80013c4 <__NVIC_GetPriorityGrouping>
 800152c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	6978      	ldr	r0, [r7, #20]
 8001534:	f7ff ff9c 	bl	8001470 <NVIC_EncodePriority>
 8001538:	4602      	mov	r2, r0
 800153a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff6b 	bl	800141c <__NVIC_SetPriority>
}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001558:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff3f 	bl	80013e0 <__NVIC_EnableIRQ>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800156e:	f7ff ffb3 	bl	80014d8 <__NVIC_SystemReset>
	...

08001574 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8001578:	f3bf 8f5f 	dmb	sy
}
 800157c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800157e:	4b07      	ldr	r3, [pc, #28]	@ (800159c <HAL_MPU_Disable+0x28>)
 8001580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001582:	4a06      	ldr	r2, [pc, #24]	@ (800159c <HAL_MPU_Disable+0x28>)
 8001584:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001588:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800158a:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <HAL_MPU_Disable+0x2c>)
 800158c:	2200      	movs	r2, #0
 800158e:	605a      	str	r2, [r3, #4]
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00
 80015a0:	e000ed90 	.word	0xe000ed90

080015a4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80015ac:	4a0b      	ldr	r2, [pc, #44]	@ (80015dc <HAL_MPU_Enable+0x38>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80015b6:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <HAL_MPU_Enable+0x3c>)
 80015b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ba:	4a09      	ldr	r2, [pc, #36]	@ (80015e0 <HAL_MPU_Enable+0x3c>)
 80015bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015c0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80015c2:	f3bf 8f4f 	dsb	sy
}
 80015c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015c8:	f3bf 8f6f 	isb	sy
}
 80015cc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed90 	.word	0xe000ed90
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	785a      	ldrb	r2, [r3, #1]
 80015f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001660 <HAL_MPU_ConfigRegion+0x7c>)
 80015f2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80015f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <HAL_MPU_ConfigRegion+0x7c>)
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	4a19      	ldr	r2, [pc, #100]	@ (8001660 <HAL_MPU_ConfigRegion+0x7c>)
 80015fa:	f023 0301 	bic.w	r3, r3, #1
 80015fe:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001600:	4a17      	ldr	r2, [pc, #92]	@ (8001660 <HAL_MPU_ConfigRegion+0x7c>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	7b1b      	ldrb	r3, [r3, #12]
 800160c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7adb      	ldrb	r3, [r3, #11]
 8001612:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001614:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	7a9b      	ldrb	r3, [r3, #10]
 800161a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800161c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	7b5b      	ldrb	r3, [r3, #13]
 8001622:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001624:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	7b9b      	ldrb	r3, [r3, #14]
 800162a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800162c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	7bdb      	ldrb	r3, [r3, #15]
 8001632:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001634:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	7a5b      	ldrb	r3, [r3, #9]
 800163a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800163c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	7a1b      	ldrb	r3, [r3, #8]
 8001642:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001644:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	7812      	ldrb	r2, [r2, #0]
 800164a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800164c:	4a04      	ldr	r2, [pc, #16]	@ (8001660 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800164e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001650:	6113      	str	r3, [r2, #16]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed90 	.word	0xe000ed90

08001664 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e054      	b.n	8001720 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	7f5b      	ldrb	r3, [r3, #29]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d105      	bne.n	800168c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fc6e 	bl	8000f68 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2202      	movs	r2, #2
 8001690:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	791b      	ldrb	r3, [r3, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10c      	bne.n	80016b4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a22      	ldr	r2, [pc, #136]	@ (8001728 <HAL_CRC_Init+0xc4>)
 80016a0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 0218 	bic.w	r2, r2, #24
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	e00c      	b.n	80016ce <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6899      	ldr	r1, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	461a      	mov	r2, r3
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 f834 	bl	800172c <HAL_CRCEx_Polynomial_Set>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e028      	b.n	8001720 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	795b      	ldrb	r3, [r3, #5]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d105      	bne.n	80016e2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f04f 32ff 	mov.w	r2, #4294967295
 80016de:	611a      	str	r2, [r3, #16]
 80016e0:	e004      	b.n	80016ec <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6912      	ldr	r2, [r2, #16]
 80016ea:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	699a      	ldr	r2, [r3, #24]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	04c11db7 	.word	0x04c11db7

0800172c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800172c:	b480      	push	{r7}
 800172e:	b087      	sub	sp, #28
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800173c:	231f      	movs	r3, #31
 800173e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d102      	bne.n	8001750 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	75fb      	strb	r3, [r7, #23]
 800174e:	e063      	b.n	8001818 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001750:	bf00      	nop
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1e5a      	subs	r2, r3, #1
 8001756:	613a      	str	r2, [r7, #16]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d009      	beq.n	8001770 <HAL_CRCEx_Polynomial_Set+0x44>
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	f003 031f 	and.w	r3, r3, #31
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	fa22 f303 	lsr.w	r3, r2, r3
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b18      	cmp	r3, #24
 8001774:	d846      	bhi.n	8001804 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001776:	a201      	add	r2, pc, #4	@ (adr r2, 800177c <HAL_CRCEx_Polynomial_Set+0x50>)
 8001778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177c:	0800180b 	.word	0x0800180b
 8001780:	08001805 	.word	0x08001805
 8001784:	08001805 	.word	0x08001805
 8001788:	08001805 	.word	0x08001805
 800178c:	08001805 	.word	0x08001805
 8001790:	08001805 	.word	0x08001805
 8001794:	08001805 	.word	0x08001805
 8001798:	08001805 	.word	0x08001805
 800179c:	080017f9 	.word	0x080017f9
 80017a0:	08001805 	.word	0x08001805
 80017a4:	08001805 	.word	0x08001805
 80017a8:	08001805 	.word	0x08001805
 80017ac:	08001805 	.word	0x08001805
 80017b0:	08001805 	.word	0x08001805
 80017b4:	08001805 	.word	0x08001805
 80017b8:	08001805 	.word	0x08001805
 80017bc:	080017ed 	.word	0x080017ed
 80017c0:	08001805 	.word	0x08001805
 80017c4:	08001805 	.word	0x08001805
 80017c8:	08001805 	.word	0x08001805
 80017cc:	08001805 	.word	0x08001805
 80017d0:	08001805 	.word	0x08001805
 80017d4:	08001805 	.word	0x08001805
 80017d8:	08001805 	.word	0x08001805
 80017dc:	080017e1 	.word	0x080017e1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	2b06      	cmp	r3, #6
 80017e4:	d913      	bls.n	800180e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80017ea:	e010      	b.n	800180e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	2b07      	cmp	r3, #7
 80017f0:	d90f      	bls.n	8001812 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80017f6:	e00c      	b.n	8001812 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	2b0f      	cmp	r3, #15
 80017fc:	d90b      	bls.n	8001816 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001802:	e008      	b.n	8001816 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	75fb      	strb	r3, [r7, #23]
        break;
 8001808:	e006      	b.n	8001818 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800180a:	bf00      	nop
 800180c:	e004      	b.n	8001818 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800180e:	bf00      	nop
 8001810:	e002      	b.n	8001818 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001812:	bf00      	nop
 8001814:	e000      	b.n	8001818 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001816:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001818:	7dfb      	ldrb	r3, [r7, #23]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10d      	bne.n	800183a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f023 0118 	bic.w	r1, r3, #24
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	430a      	orrs	r2, r1
 8001838:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800183a:	7dfb      	ldrb	r3, [r7, #23]
}
 800183c:	4618      	mov	r0, r3
 800183e:	371c      	adds	r7, #28
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001850:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <HAL_PWREx_ConfigSupply+0x70>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b04      	cmp	r3, #4
 800185a:	d00a      	beq.n	8001872 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800185c:	4b16      	ldr	r3, [pc, #88]	@ (80018b8 <HAL_PWREx_ConfigSupply+0x70>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	429a      	cmp	r2, r3
 8001868:	d001      	beq.n	800186e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e01f      	b.n	80018ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	e01d      	b.n	80018ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001872:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <HAL_PWREx_ConfigSupply+0x70>)
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	f023 0207 	bic.w	r2, r3, #7
 800187a:	490f      	ldr	r1, [pc, #60]	@ (80018b8 <HAL_PWREx_ConfigSupply+0x70>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4313      	orrs	r3, r2
 8001880:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001882:	f7ff fd63 	bl	800134c <HAL_GetTick>
 8001886:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001888:	e009      	b.n	800189e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800188a:	f7ff fd5f 	bl	800134c <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001898:	d901      	bls.n	800189e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e007      	b.n	80018ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800189e:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <HAL_PWREx_ConfigSupply+0x70>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018aa:	d1ee      	bne.n	800188a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	58024800 	.word	0x58024800

080018bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08c      	sub	sp, #48	@ 0x30
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d102      	bne.n	80018d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	f000 bc48 	b.w	8002160 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 8088 	beq.w	80019ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018de:	4b99      	ldr	r3, [pc, #612]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018e8:	4b96      	ldr	r3, [pc, #600]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 80018ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80018ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f0:	2b10      	cmp	r3, #16
 80018f2:	d007      	beq.n	8001904 <HAL_RCC_OscConfig+0x48>
 80018f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f6:	2b18      	cmp	r3, #24
 80018f8:	d111      	bne.n	800191e <HAL_RCC_OscConfig+0x62>
 80018fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d10c      	bne.n	800191e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001904:	4b8f      	ldr	r3, [pc, #572]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d06d      	beq.n	80019ec <HAL_RCC_OscConfig+0x130>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d169      	bne.n	80019ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	f000 bc21 	b.w	8002160 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001926:	d106      	bne.n	8001936 <HAL_RCC_OscConfig+0x7a>
 8001928:	4b86      	ldr	r3, [pc, #536]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a85      	ldr	r2, [pc, #532]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 800192e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	e02e      	b.n	8001994 <HAL_RCC_OscConfig+0xd8>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0x9c>
 800193e:	4b81      	ldr	r3, [pc, #516]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a80      	ldr	r2, [pc, #512]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001944:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b7e      	ldr	r3, [pc, #504]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a7d      	ldr	r2, [pc, #500]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001950:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e01d      	b.n	8001994 <HAL_RCC_OscConfig+0xd8>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001960:	d10c      	bne.n	800197c <HAL_RCC_OscConfig+0xc0>
 8001962:	4b78      	ldr	r3, [pc, #480]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a77      	ldr	r2, [pc, #476]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001968:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	4b75      	ldr	r3, [pc, #468]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a74      	ldr	r2, [pc, #464]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e00b      	b.n	8001994 <HAL_RCC_OscConfig+0xd8>
 800197c:	4b71      	ldr	r3, [pc, #452]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a70      	ldr	r2, [pc, #448]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001982:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b6e      	ldr	r3, [pc, #440]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a6d      	ldr	r2, [pc, #436]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 800198e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d013      	beq.n	80019c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff fcd6 	bl	800134c <HAL_GetTick>
 80019a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff fcd2 	bl	800134c <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	@ 0x64
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e3d4      	b.n	8002160 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019b6:	4b63      	ldr	r3, [pc, #396]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0xe8>
 80019c2:	e014      	b.n	80019ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff fcc2 	bl	800134c <HAL_GetTick>
 80019c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019cc:	f7ff fcbe 	bl	800134c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b64      	cmp	r3, #100	@ 0x64
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e3c0      	b.n	8002160 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019de:	4b59      	ldr	r3, [pc, #356]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x110>
 80019ea:	e000      	b.n	80019ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 80ca 	beq.w	8001b90 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019fc:	4b51      	ldr	r3, [pc, #324]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a04:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a06:	4b4f      	ldr	r3, [pc, #316]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d007      	beq.n	8001a22 <HAL_RCC_OscConfig+0x166>
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	2b18      	cmp	r3, #24
 8001a16:	d156      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x20a>
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d151      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a22:	4b48      	ldr	r3, [pc, #288]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d005      	beq.n	8001a3a <HAL_RCC_OscConfig+0x17e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e392      	b.n	8002160 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a3a:	4b42      	ldr	r3, [pc, #264]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 0219 	bic.w	r2, r3, #25
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	493f      	ldr	r1, [pc, #252]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fc7e 	bl	800134c <HAL_GetTick>
 8001a50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a54:	f7ff fc7a 	bl	800134c <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e37c      	b.n	8002160 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a66:	4b37      	ldr	r3, [pc, #220]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a72:	f7ff fc77 	bl	8001364 <HAL_GetREVID>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d817      	bhi.n	8001ab0 <HAL_RCC_OscConfig+0x1f4>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	2b40      	cmp	r3, #64	@ 0x40
 8001a86:	d108      	bne.n	8001a9a <HAL_RCC_OscConfig+0x1de>
 8001a88:	4b2e      	ldr	r3, [pc, #184]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001a90:	4a2c      	ldr	r2, [pc, #176]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001a92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a96:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a98:	e07a      	b.n	8001b90 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	031b      	lsls	r3, r3, #12
 8001aa8:	4926      	ldr	r1, [pc, #152]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aae:	e06f      	b.n	8001b90 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab0:	4b24      	ldr	r3, [pc, #144]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	061b      	lsls	r3, r3, #24
 8001abe:	4921      	ldr	r1, [pc, #132]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ac4:	e064      	b.n	8001b90 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d047      	beq.n	8001b5e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ace:	4b1d      	ldr	r3, [pc, #116]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 0219 	bic.w	r2, r3, #25
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	491a      	ldr	r1, [pc, #104]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fc34 	bl	800134c <HAL_GetTick>
 8001ae4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae8:	f7ff fc30 	bl	800134c <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e332      	b.n	8002160 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001afa:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b06:	f7ff fc2d 	bl	8001364 <HAL_GetREVID>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d819      	bhi.n	8001b48 <HAL_RCC_OscConfig+0x28c>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	2b40      	cmp	r3, #64	@ 0x40
 8001b1a:	d108      	bne.n	8001b2e <HAL_RCC_OscConfig+0x272>
 8001b1c:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001b24:	4a07      	ldr	r2, [pc, #28]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001b26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b2a:	6053      	str	r3, [r2, #4]
 8001b2c:	e030      	b.n	8001b90 <HAL_RCC_OscConfig+0x2d4>
 8001b2e:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	031b      	lsls	r3, r3, #12
 8001b3c:	4901      	ldr	r1, [pc, #4]	@ (8001b44 <HAL_RCC_OscConfig+0x288>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	604b      	str	r3, [r1, #4]
 8001b42:	e025      	b.n	8001b90 <HAL_RCC_OscConfig+0x2d4>
 8001b44:	58024400 	.word	0x58024400
 8001b48:	4b9a      	ldr	r3, [pc, #616]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	061b      	lsls	r3, r3, #24
 8001b56:	4997      	ldr	r1, [pc, #604]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
 8001b5c:	e018      	b.n	8001b90 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5e:	4b95      	ldr	r3, [pc, #596]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a94      	ldr	r2, [pc, #592]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6a:	f7ff fbef 	bl	800134c <HAL_GetTick>
 8001b6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b72:	f7ff fbeb 	bl	800134c <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e2ed      	b.n	8002160 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b84:	4b8b      	ldr	r3, [pc, #556]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f0      	bne.n	8001b72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0310 	and.w	r3, r3, #16
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80a9 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b9e:	4b85      	ldr	r3, [pc, #532]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ba6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ba8:	4b82      	ldr	r3, [pc, #520]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d007      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x308>
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2b18      	cmp	r3, #24
 8001bb8:	d13a      	bne.n	8001c30 <HAL_RCC_OscConfig+0x374>
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d135      	bne.n	8001c30 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bc4:	4b7b      	ldr	r3, [pc, #492]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_OscConfig+0x320>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	2b80      	cmp	r3, #128	@ 0x80
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e2c1      	b.n	8002160 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bdc:	f7ff fbc2 	bl	8001364 <HAL_GetREVID>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d817      	bhi.n	8001c1a <HAL_RCC_OscConfig+0x35e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	2b20      	cmp	r3, #32
 8001bf0:	d108      	bne.n	8001c04 <HAL_RCC_OscConfig+0x348>
 8001bf2:	4b70      	ldr	r3, [pc, #448]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001bfa:	4a6e      	ldr	r2, [pc, #440]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001bfc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c00:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c02:	e075      	b.n	8001cf0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c04:	4b6b      	ldr	r3, [pc, #428]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	069b      	lsls	r3, r3, #26
 8001c12:	4968      	ldr	r1, [pc, #416]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c18:	e06a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c1a:	4b66      	ldr	r3, [pc, #408]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	061b      	lsls	r3, r3, #24
 8001c28:	4962      	ldr	r1, [pc, #392]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c2e:	e05f      	b.n	8001cf0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d042      	beq.n	8001cbe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c38:	4b5e      	ldr	r3, [pc, #376]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a5d      	ldr	r2, [pc, #372]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c44:	f7ff fb82 	bl	800134c <HAL_GetTick>
 8001c48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001c4c:	f7ff fb7e 	bl	800134c <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e280      	b.n	8002160 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c5e:	4b55      	ldr	r3, [pc, #340]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c6a:	f7ff fb7b 	bl	8001364 <HAL_GetREVID>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d817      	bhi.n	8001ca8 <HAL_RCC_OscConfig+0x3ec>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	2b20      	cmp	r3, #32
 8001c7e:	d108      	bne.n	8001c92 <HAL_RCC_OscConfig+0x3d6>
 8001c80:	4b4c      	ldr	r3, [pc, #304]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001c88:	4a4a      	ldr	r2, [pc, #296]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001c8a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c8e:	6053      	str	r3, [r2, #4]
 8001c90:	e02e      	b.n	8001cf0 <HAL_RCC_OscConfig+0x434>
 8001c92:	4b48      	ldr	r3, [pc, #288]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	069b      	lsls	r3, r3, #26
 8001ca0:	4944      	ldr	r1, [pc, #272]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	604b      	str	r3, [r1, #4]
 8001ca6:	e023      	b.n	8001cf0 <HAL_RCC_OscConfig+0x434>
 8001ca8:	4b42      	ldr	r3, [pc, #264]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	061b      	lsls	r3, r3, #24
 8001cb6:	493f      	ldr	r1, [pc, #252]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	60cb      	str	r3, [r1, #12]
 8001cbc:	e018      	b.n	8001cf0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a3c      	ldr	r2, [pc, #240]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001cc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cca:	f7ff fb3f 	bl	800134c <HAL_GetTick>
 8001cce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001cd2:	f7ff fb3b 	bl	800134c <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e23d      	b.n	8002160 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ce4:	4b33      	ldr	r3, [pc, #204]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f0      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d036      	beq.n	8001d6a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d019      	beq.n	8001d38 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d04:	4b2b      	ldr	r3, [pc, #172]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001d06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d08:	4a2a      	ldr	r2, [pc, #168]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d10:	f7ff fb1c 	bl	800134c <HAL_GetTick>
 8001d14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d18:	f7ff fb18 	bl	800134c <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e21a      	b.n	8002160 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d2a:	4b22      	ldr	r3, [pc, #136]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x45c>
 8001d36:	e018      	b.n	8001d6a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d38:	4b1e      	ldr	r3, [pc, #120]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001d3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001d3e:	f023 0301 	bic.w	r3, r3, #1
 8001d42:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d44:	f7ff fb02 	bl	800134c <HAL_GetTick>
 8001d48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d4c:	f7ff fafe 	bl	800134c <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e200      	b.n	8002160 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d5e:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d039      	beq.n	8001dea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d01c      	beq.n	8001db8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a0c      	ldr	r2, [pc, #48]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001d84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d8a:	f7ff fadf 	bl	800134c <HAL_GetTick>
 8001d8e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d92:	f7ff fadb 	bl	800134c <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e1dd      	b.n	8002160 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001da4:	4b03      	ldr	r3, [pc, #12]	@ (8001db4 <HAL_RCC_OscConfig+0x4f8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f0      	beq.n	8001d92 <HAL_RCC_OscConfig+0x4d6>
 8001db0:	e01b      	b.n	8001dea <HAL_RCC_OscConfig+0x52e>
 8001db2:	bf00      	nop
 8001db4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001db8:	4b9b      	ldr	r3, [pc, #620]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a9a      	ldr	r2, [pc, #616]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001dbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001dc2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001dc4:	f7ff fac2 	bl	800134c <HAL_GetTick>
 8001dc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dcc:	f7ff fabe 	bl	800134c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e1c0      	b.n	8002160 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001dde:	4b92      	ldr	r3, [pc, #584]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 8081 	beq.w	8001efa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001df8:	4b8c      	ldr	r3, [pc, #560]	@ (800202c <HAL_RCC_OscConfig+0x770>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a8b      	ldr	r2, [pc, #556]	@ (800202c <HAL_RCC_OscConfig+0x770>)
 8001dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e04:	f7ff faa2 	bl	800134c <HAL_GetTick>
 8001e08:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e0c:	f7ff fa9e 	bl	800134c <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	@ 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e1a0      	b.n	8002160 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e1e:	4b83      	ldr	r3, [pc, #524]	@ (800202c <HAL_RCC_OscConfig+0x770>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d106      	bne.n	8001e40 <HAL_RCC_OscConfig+0x584>
 8001e32:	4b7d      	ldr	r3, [pc, #500]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e36:	4a7c      	ldr	r2, [pc, #496]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e3e:	e02d      	b.n	8001e9c <HAL_RCC_OscConfig+0x5e0>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10c      	bne.n	8001e62 <HAL_RCC_OscConfig+0x5a6>
 8001e48:	4b77      	ldr	r3, [pc, #476]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e4c:	4a76      	ldr	r2, [pc, #472]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001e4e:	f023 0301 	bic.w	r3, r3, #1
 8001e52:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e54:	4b74      	ldr	r3, [pc, #464]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e58:	4a73      	ldr	r2, [pc, #460]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001e5a:	f023 0304 	bic.w	r3, r3, #4
 8001e5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e60:	e01c      	b.n	8001e9c <HAL_RCC_OscConfig+0x5e0>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b05      	cmp	r3, #5
 8001e68:	d10c      	bne.n	8001e84 <HAL_RCC_OscConfig+0x5c8>
 8001e6a:	4b6f      	ldr	r3, [pc, #444]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6e:	4a6e      	ldr	r2, [pc, #440]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001e70:	f043 0304 	orr.w	r3, r3, #4
 8001e74:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e76:	4b6c      	ldr	r3, [pc, #432]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7a:	4a6b      	ldr	r2, [pc, #428]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e82:	e00b      	b.n	8001e9c <HAL_RCC_OscConfig+0x5e0>
 8001e84:	4b68      	ldr	r3, [pc, #416]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e88:	4a67      	ldr	r2, [pc, #412]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001e8a:	f023 0301 	bic.w	r3, r3, #1
 8001e8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e90:	4b65      	ldr	r3, [pc, #404]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e94:	4a64      	ldr	r2, [pc, #400]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001e96:	f023 0304 	bic.w	r3, r3, #4
 8001e9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d015      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea4:	f7ff fa52 	bl	800134c <HAL_GetTick>
 8001ea8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001eaa:	e00a      	b.n	8001ec2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eac:	f7ff fa4e 	bl	800134c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e14e      	b.n	8002160 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ec2:	4b59      	ldr	r3, [pc, #356]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0ee      	beq.n	8001eac <HAL_RCC_OscConfig+0x5f0>
 8001ece:	e014      	b.n	8001efa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed0:	f7ff fa3c 	bl	800134c <HAL_GetTick>
 8001ed4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ed6:	e00a      	b.n	8001eee <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed8:	f7ff fa38 	bl	800134c <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e138      	b.n	8002160 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001eee:	4b4e      	ldr	r3, [pc, #312]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1ee      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 812d 	beq.w	800215e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001f04:	4b48      	ldr	r3, [pc, #288]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f0c:	2b18      	cmp	r3, #24
 8001f0e:	f000 80bd 	beq.w	800208c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	f040 809e 	bne.w	8002058 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1c:	4b42      	ldr	r3, [pc, #264]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a41      	ldr	r2, [pc, #260]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001f22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7ff fa10 	bl	800134c <HAL_GetTick>
 8001f2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f30:	f7ff fa0c 	bl	800134c <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e10e      	b.n	8002160 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f42:	4b39      	ldr	r3, [pc, #228]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f4e:	4b36      	ldr	r3, [pc, #216]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001f50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f52:	4b37      	ldr	r3, [pc, #220]	@ (8002030 <HAL_RCC_OscConfig+0x774>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	430a      	orrs	r2, r1
 8001f62:	4931      	ldr	r1, [pc, #196]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	628b      	str	r3, [r1, #40]	@ 0x28
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f76:	3b01      	subs	r3, #1
 8001f78:	025b      	lsls	r3, r3, #9
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f82:	3b01      	subs	r3, #1
 8001f84:	041b      	lsls	r3, r3, #16
 8001f86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f90:	3b01      	subs	r3, #1
 8001f92:	061b      	lsls	r3, r3, #24
 8001f94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001f98:	4923      	ldr	r1, [pc, #140]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001f9e:	4b22      	ldr	r3, [pc, #136]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa2:	4a21      	ldr	r2, [pc, #132]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001faa:	4b1f      	ldr	r3, [pc, #124]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001fac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fae:	4b21      	ldr	r3, [pc, #132]	@ (8002034 <HAL_RCC_OscConfig+0x778>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fb6:	00d2      	lsls	r2, r2, #3
 8001fb8:	491b      	ldr	r1, [pc, #108]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc2:	f023 020c 	bic.w	r2, r3, #12
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fca:	4917      	ldr	r1, [pc, #92]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001fd0:	4b15      	ldr	r3, [pc, #84]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd4:	f023 0202 	bic.w	r2, r3, #2
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fdc:	4912      	ldr	r1, [pc, #72]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001fe2:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe6:	4a10      	ldr	r2, [pc, #64]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001fee:	4b0e      	ldr	r3, [pc, #56]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff2:	4a0d      	ldr	r2, [pc, #52]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001ff4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ff8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8001ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8002000:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002004:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002006:	4b08      	ldr	r3, [pc, #32]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8002008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200a:	4a07      	ldr	r2, [pc, #28]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002012:	4b05      	ldr	r3, [pc, #20]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a04      	ldr	r2, [pc, #16]	@ (8002028 <HAL_RCC_OscConfig+0x76c>)
 8002018:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800201c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7ff f995 	bl	800134c <HAL_GetTick>
 8002022:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002024:	e011      	b.n	800204a <HAL_RCC_OscConfig+0x78e>
 8002026:	bf00      	nop
 8002028:	58024400 	.word	0x58024400
 800202c:	58024800 	.word	0x58024800
 8002030:	fffffc0c 	.word	0xfffffc0c
 8002034:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002038:	f7ff f988 	bl	800134c <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e08a      	b.n	8002160 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800204a:	4b47      	ldr	r3, [pc, #284]	@ (8002168 <HAL_RCC_OscConfig+0x8ac>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x77c>
 8002056:	e082      	b.n	800215e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002058:	4b43      	ldr	r3, [pc, #268]	@ (8002168 <HAL_RCC_OscConfig+0x8ac>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a42      	ldr	r2, [pc, #264]	@ (8002168 <HAL_RCC_OscConfig+0x8ac>)
 800205e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7ff f972 	bl	800134c <HAL_GetTick>
 8002068:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206c:	f7ff f96e 	bl	800134c <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e070      	b.n	8002160 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800207e:	4b3a      	ldr	r3, [pc, #232]	@ (8002168 <HAL_RCC_OscConfig+0x8ac>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x7b0>
 800208a:	e068      	b.n	800215e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800208c:	4b36      	ldr	r3, [pc, #216]	@ (8002168 <HAL_RCC_OscConfig+0x8ac>)
 800208e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002090:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002092:	4b35      	ldr	r3, [pc, #212]	@ (8002168 <HAL_RCC_OscConfig+0x8ac>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209c:	2b01      	cmp	r3, #1
 800209e:	d031      	beq.n	8002104 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	f003 0203 	and.w	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d12a      	bne.n	8002104 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d122      	bne.n	8002104 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d11a      	bne.n	8002104 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	0a5b      	lsrs	r3, r3, #9
 80020d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d111      	bne.n	8002104 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	0c1b      	lsrs	r3, r3, #16
 80020e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d108      	bne.n	8002104 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	0e1b      	lsrs	r3, r3, #24
 80020f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002100:	429a      	cmp	r2, r3
 8002102:	d001      	beq.n	8002108 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e02b      	b.n	8002160 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002108:	4b17      	ldr	r3, [pc, #92]	@ (8002168 <HAL_RCC_OscConfig+0x8ac>)
 800210a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800210c:	08db      	lsrs	r3, r3, #3
 800210e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002112:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	429a      	cmp	r2, r3
 800211c:	d01f      	beq.n	800215e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800211e:	4b12      	ldr	r3, [pc, #72]	@ (8002168 <HAL_RCC_OscConfig+0x8ac>)
 8002120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002122:	4a11      	ldr	r2, [pc, #68]	@ (8002168 <HAL_RCC_OscConfig+0x8ac>)
 8002124:	f023 0301 	bic.w	r3, r3, #1
 8002128:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800212a:	f7ff f90f 	bl	800134c <HAL_GetTick>
 800212e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002130:	bf00      	nop
 8002132:	f7ff f90b 	bl	800134c <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213a:	4293      	cmp	r3, r2
 800213c:	d0f9      	beq.n	8002132 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800213e:	4b0a      	ldr	r3, [pc, #40]	@ (8002168 <HAL_RCC_OscConfig+0x8ac>)
 8002140:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002142:	4b0a      	ldr	r3, [pc, #40]	@ (800216c <HAL_RCC_OscConfig+0x8b0>)
 8002144:	4013      	ands	r3, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800214a:	00d2      	lsls	r2, r2, #3
 800214c:	4906      	ldr	r1, [pc, #24]	@ (8002168 <HAL_RCC_OscConfig+0x8ac>)
 800214e:	4313      	orrs	r3, r2
 8002150:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002152:	4b05      	ldr	r3, [pc, #20]	@ (8002168 <HAL_RCC_OscConfig+0x8ac>)
 8002154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002156:	4a04      	ldr	r2, [pc, #16]	@ (8002168 <HAL_RCC_OscConfig+0x8ac>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3730      	adds	r7, #48	@ 0x30
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	58024400 	.word	0x58024400
 800216c:	ffff0007 	.word	0xffff0007

08002170 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e19c      	b.n	80024be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002184:	4b8a      	ldr	r3, [pc, #552]	@ (80023b0 <HAL_RCC_ClockConfig+0x240>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d910      	bls.n	80021b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4b87      	ldr	r3, [pc, #540]	@ (80023b0 <HAL_RCC_ClockConfig+0x240>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 020f 	bic.w	r2, r3, #15
 800219a:	4985      	ldr	r1, [pc, #532]	@ (80023b0 <HAL_RCC_ClockConfig+0x240>)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b83      	ldr	r3, [pc, #524]	@ (80023b0 <HAL_RCC_ClockConfig+0x240>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e184      	b.n	80024be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d010      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	4b7b      	ldr	r3, [pc, #492]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d908      	bls.n	80021e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021d0:	4b78      	ldr	r3, [pc, #480]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	4975      	ldr	r1, [pc, #468]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d010      	beq.n	8002210 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695a      	ldr	r2, [r3, #20]
 80021f2:	4b70      	ldr	r3, [pc, #448]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d908      	bls.n	8002210 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021fe:	4b6d      	ldr	r3, [pc, #436]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	496a      	ldr	r1, [pc, #424]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 800220c:	4313      	orrs	r3, r2
 800220e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0310 	and.w	r3, r3, #16
 8002218:	2b00      	cmp	r3, #0
 800221a:	d010      	beq.n	800223e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699a      	ldr	r2, [r3, #24]
 8002220:	4b64      	ldr	r3, [pc, #400]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002228:	429a      	cmp	r2, r3
 800222a:	d908      	bls.n	800223e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800222c:	4b61      	ldr	r3, [pc, #388]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	495e      	ldr	r1, [pc, #376]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 800223a:	4313      	orrs	r3, r2
 800223c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0320 	and.w	r3, r3, #32
 8002246:	2b00      	cmp	r3, #0
 8002248:	d010      	beq.n	800226c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69da      	ldr	r2, [r3, #28]
 800224e:	4b59      	ldr	r3, [pc, #356]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002256:	429a      	cmp	r2, r3
 8002258:	d908      	bls.n	800226c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800225a:	4b56      	ldr	r3, [pc, #344]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	4953      	ldr	r1, [pc, #332]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 8002268:	4313      	orrs	r3, r2
 800226a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d010      	beq.n	800229a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	4b4d      	ldr	r3, [pc, #308]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f003 030f 	and.w	r3, r3, #15
 8002284:	429a      	cmp	r2, r3
 8002286:	d908      	bls.n	800229a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002288:	4b4a      	ldr	r3, [pc, #296]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f023 020f 	bic.w	r2, r3, #15
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4947      	ldr	r1, [pc, #284]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 8002296:	4313      	orrs	r3, r2
 8002298:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d055      	beq.n	8002352 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80022a6:	4b43      	ldr	r3, [pc, #268]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	4940      	ldr	r1, [pc, #256]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d107      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022c0:	4b3c      	ldr	r3, [pc, #240]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d121      	bne.n	8002310 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0f6      	b.n	80024be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d107      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022d8:	4b36      	ldr	r3, [pc, #216]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d115      	bne.n	8002310 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0ea      	b.n	80024be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d107      	bne.n	8002300 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022f0:	4b30      	ldr	r3, [pc, #192]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0de      	b.n	80024be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002300:	4b2c      	ldr	r3, [pc, #176]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0d6      	b.n	80024be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002310:	4b28      	ldr	r3, [pc, #160]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	f023 0207 	bic.w	r2, r3, #7
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	4925      	ldr	r1, [pc, #148]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 800231e:	4313      	orrs	r3, r2
 8002320:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002322:	f7ff f813 	bl	800134c <HAL_GetTick>
 8002326:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002328:	e00a      	b.n	8002340 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800232a:	f7ff f80f 	bl	800134c <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002338:	4293      	cmp	r3, r2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e0be      	b.n	80024be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002340:	4b1c      	ldr	r3, [pc, #112]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	429a      	cmp	r2, r3
 8002350:	d1eb      	bne.n	800232a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d010      	beq.n	8002380 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	4b14      	ldr	r3, [pc, #80]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	429a      	cmp	r2, r3
 800236c:	d208      	bcs.n	8002380 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800236e:	4b11      	ldr	r3, [pc, #68]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	f023 020f 	bic.w	r2, r3, #15
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	490e      	ldr	r1, [pc, #56]	@ (80023b4 <HAL_RCC_ClockConfig+0x244>)
 800237c:	4313      	orrs	r3, r2
 800237e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002380:	4b0b      	ldr	r3, [pc, #44]	@ (80023b0 <HAL_RCC_ClockConfig+0x240>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d214      	bcs.n	80023b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238e:	4b08      	ldr	r3, [pc, #32]	@ (80023b0 <HAL_RCC_ClockConfig+0x240>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 020f 	bic.w	r2, r3, #15
 8002396:	4906      	ldr	r1, [pc, #24]	@ (80023b0 <HAL_RCC_ClockConfig+0x240>)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239e:	4b04      	ldr	r3, [pc, #16]	@ (80023b0 <HAL_RCC_ClockConfig+0x240>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e086      	b.n	80024be <HAL_RCC_ClockConfig+0x34e>
 80023b0:	52002000 	.word	0x52002000
 80023b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d010      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	4b3f      	ldr	r3, [pc, #252]	@ (80024c8 <HAL_RCC_ClockConfig+0x358>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d208      	bcs.n	80023e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023d4:	4b3c      	ldr	r3, [pc, #240]	@ (80024c8 <HAL_RCC_ClockConfig+0x358>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	4939      	ldr	r1, [pc, #228]	@ (80024c8 <HAL_RCC_ClockConfig+0x358>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d010      	beq.n	8002414 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695a      	ldr	r2, [r3, #20]
 80023f6:	4b34      	ldr	r3, [pc, #208]	@ (80024c8 <HAL_RCC_ClockConfig+0x358>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023fe:	429a      	cmp	r2, r3
 8002400:	d208      	bcs.n	8002414 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002402:	4b31      	ldr	r3, [pc, #196]	@ (80024c8 <HAL_RCC_ClockConfig+0x358>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	492e      	ldr	r1, [pc, #184]	@ (80024c8 <HAL_RCC_ClockConfig+0x358>)
 8002410:	4313      	orrs	r3, r2
 8002412:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b00      	cmp	r3, #0
 800241e:	d010      	beq.n	8002442 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699a      	ldr	r2, [r3, #24]
 8002424:	4b28      	ldr	r3, [pc, #160]	@ (80024c8 <HAL_RCC_ClockConfig+0x358>)
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800242c:	429a      	cmp	r2, r3
 800242e:	d208      	bcs.n	8002442 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002430:	4b25      	ldr	r3, [pc, #148]	@ (80024c8 <HAL_RCC_ClockConfig+0x358>)
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	4922      	ldr	r1, [pc, #136]	@ (80024c8 <HAL_RCC_ClockConfig+0x358>)
 800243e:	4313      	orrs	r3, r2
 8002440:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0320 	and.w	r3, r3, #32
 800244a:	2b00      	cmp	r3, #0
 800244c:	d010      	beq.n	8002470 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69da      	ldr	r2, [r3, #28]
 8002452:	4b1d      	ldr	r3, [pc, #116]	@ (80024c8 <HAL_RCC_ClockConfig+0x358>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800245a:	429a      	cmp	r2, r3
 800245c:	d208      	bcs.n	8002470 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800245e:	4b1a      	ldr	r3, [pc, #104]	@ (80024c8 <HAL_RCC_ClockConfig+0x358>)
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	4917      	ldr	r1, [pc, #92]	@ (80024c8 <HAL_RCC_ClockConfig+0x358>)
 800246c:	4313      	orrs	r3, r2
 800246e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002470:	f000 f834 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 8002474:	4602      	mov	r2, r0
 8002476:	4b14      	ldr	r3, [pc, #80]	@ (80024c8 <HAL_RCC_ClockConfig+0x358>)
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	0a1b      	lsrs	r3, r3, #8
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	4912      	ldr	r1, [pc, #72]	@ (80024cc <HAL_RCC_ClockConfig+0x35c>)
 8002482:	5ccb      	ldrb	r3, [r1, r3]
 8002484:	f003 031f 	and.w	r3, r3, #31
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
 800248c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800248e:	4b0e      	ldr	r3, [pc, #56]	@ (80024c8 <HAL_RCC_ClockConfig+0x358>)
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	4a0d      	ldr	r2, [pc, #52]	@ (80024cc <HAL_RCC_ClockConfig+0x35c>)
 8002498:	5cd3      	ldrb	r3, [r2, r3]
 800249a:	f003 031f 	and.w	r3, r3, #31
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	fa22 f303 	lsr.w	r3, r2, r3
 80024a4:	4a0a      	ldr	r2, [pc, #40]	@ (80024d0 <HAL_RCC_ClockConfig+0x360>)
 80024a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024a8:	4a0a      	ldr	r2, [pc, #40]	@ (80024d4 <HAL_RCC_ClockConfig+0x364>)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80024ae:	4b0a      	ldr	r3, [pc, #40]	@ (80024d8 <HAL_RCC_ClockConfig+0x368>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe fd7a 	bl	8000fac <HAL_InitTick>
 80024b8:	4603      	mov	r3, r0
 80024ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	58024400 	.word	0x58024400
 80024cc:	0800a32c 	.word	0x0800a32c
 80024d0:	24000004 	.word	0x24000004
 80024d4:	24000000 	.word	0x24000000
 80024d8:	24000008 	.word	0x24000008

080024dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	@ 0x24
 80024e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024e2:	4bb3      	ldr	r3, [pc, #716]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024ea:	2b18      	cmp	r3, #24
 80024ec:	f200 8155 	bhi.w	800279a <HAL_RCC_GetSysClockFreq+0x2be>
 80024f0:	a201      	add	r2, pc, #4	@ (adr r2, 80024f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80024f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f6:	bf00      	nop
 80024f8:	0800255d 	.word	0x0800255d
 80024fc:	0800279b 	.word	0x0800279b
 8002500:	0800279b 	.word	0x0800279b
 8002504:	0800279b 	.word	0x0800279b
 8002508:	0800279b 	.word	0x0800279b
 800250c:	0800279b 	.word	0x0800279b
 8002510:	0800279b 	.word	0x0800279b
 8002514:	0800279b 	.word	0x0800279b
 8002518:	08002583 	.word	0x08002583
 800251c:	0800279b 	.word	0x0800279b
 8002520:	0800279b 	.word	0x0800279b
 8002524:	0800279b 	.word	0x0800279b
 8002528:	0800279b 	.word	0x0800279b
 800252c:	0800279b 	.word	0x0800279b
 8002530:	0800279b 	.word	0x0800279b
 8002534:	0800279b 	.word	0x0800279b
 8002538:	08002589 	.word	0x08002589
 800253c:	0800279b 	.word	0x0800279b
 8002540:	0800279b 	.word	0x0800279b
 8002544:	0800279b 	.word	0x0800279b
 8002548:	0800279b 	.word	0x0800279b
 800254c:	0800279b 	.word	0x0800279b
 8002550:	0800279b 	.word	0x0800279b
 8002554:	0800279b 	.word	0x0800279b
 8002558:	0800258f 	.word	0x0800258f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800255c:	4b94      	ldr	r3, [pc, #592]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b00      	cmp	r3, #0
 8002566:	d009      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002568:	4b91      	ldr	r3, [pc, #580]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	08db      	lsrs	r3, r3, #3
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	4a90      	ldr	r2, [pc, #576]	@ (80027b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
 8002578:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800257a:	e111      	b.n	80027a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800257c:	4b8d      	ldr	r3, [pc, #564]	@ (80027b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800257e:	61bb      	str	r3, [r7, #24]
      break;
 8002580:	e10e      	b.n	80027a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002582:	4b8d      	ldr	r3, [pc, #564]	@ (80027b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002584:	61bb      	str	r3, [r7, #24]
      break;
 8002586:	e10b      	b.n	80027a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002588:	4b8c      	ldr	r3, [pc, #560]	@ (80027bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800258a:	61bb      	str	r3, [r7, #24]
      break;
 800258c:	e108      	b.n	80027a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800258e:	4b88      	ldr	r3, [pc, #544]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002598:	4b85      	ldr	r3, [pc, #532]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800259a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80025a4:	4b82      	ldr	r3, [pc, #520]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80025ae:	4b80      	ldr	r3, [pc, #512]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b2:	08db      	lsrs	r3, r3, #3
 80025b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	fb02 f303 	mul.w	r3, r2, r3
 80025be:	ee07 3a90 	vmov	s15, r3
 80025c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80e1 	beq.w	8002794 <HAL_RCC_GetSysClockFreq+0x2b8>
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	f000 8083 	beq.w	80026e0 <HAL_RCC_GetSysClockFreq+0x204>
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	f200 80a1 	bhi.w	8002724 <HAL_RCC_GetSysClockFreq+0x248>
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x114>
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d056      	beq.n	800269c <HAL_RCC_GetSysClockFreq+0x1c0>
 80025ee:	e099      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025f0:	4b6f      	ldr	r3, [pc, #444]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d02d      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80025fc:	4b6c      	ldr	r3, [pc, #432]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	08db      	lsrs	r3, r3, #3
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	4a6b      	ldr	r2, [pc, #428]	@ (80027b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
 800260c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	ee07 3a90 	vmov	s15, r3
 8002614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	ee07 3a90 	vmov	s15, r3
 800261e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002626:	4b62      	ldr	r3, [pc, #392]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800262e:	ee07 3a90 	vmov	s15, r3
 8002632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002636:	ed97 6a02 	vldr	s12, [r7, #8]
 800263a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80027c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800263e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002646:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800264a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800264e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002652:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002656:	e087      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	ee07 3a90 	vmov	s15, r3
 800265e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002662:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80027c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800266a:	4b51      	ldr	r3, [pc, #324]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002672:	ee07 3a90 	vmov	s15, r3
 8002676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800267a:	ed97 6a02 	vldr	s12, [r7, #8]
 800267e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80027c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800268a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800268e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002696:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800269a:	e065      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	ee07 3a90 	vmov	s15, r3
 80026a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026a6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80027c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80026aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026ae:	4b40      	ldr	r3, [pc, #256]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b6:	ee07 3a90 	vmov	s15, r3
 80026ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026be:	ed97 6a02 	vldr	s12, [r7, #8]
 80026c2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80027c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026de:	e043      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	ee07 3a90 	vmov	s15, r3
 80026e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80027cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80026ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026f2:	4b2f      	ldr	r3, [pc, #188]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026fa:	ee07 3a90 	vmov	s15, r3
 80026fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002702:	ed97 6a02 	vldr	s12, [r7, #8]
 8002706:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80027c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800270a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800270e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800271a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002722:	e021      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	ee07 3a90 	vmov	s15, r3
 800272a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800272e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80027c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002736:	4b1e      	ldr	r3, [pc, #120]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800273e:	ee07 3a90 	vmov	s15, r3
 8002742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002746:	ed97 6a02 	vldr	s12, [r7, #8]
 800274a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80027c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800274e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800275a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800275e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002762:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002766:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002768:	4b11      	ldr	r3, [pc, #68]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800276a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276c:	0a5b      	lsrs	r3, r3, #9
 800276e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002772:	3301      	adds	r3, #1
 8002774:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	ee07 3a90 	vmov	s15, r3
 800277c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002780:	edd7 6a07 	vldr	s13, [r7, #28]
 8002784:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800278c:	ee17 3a90 	vmov	r3, s15
 8002790:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002792:	e005      	b.n	80027a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	61bb      	str	r3, [r7, #24]
      break;
 8002798:	e002      	b.n	80027a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800279a:	4b07      	ldr	r3, [pc, #28]	@ (80027b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800279c:	61bb      	str	r3, [r7, #24]
      break;
 800279e:	bf00      	nop
  }

  return sysclockfreq;
 80027a0:	69bb      	ldr	r3, [r7, #24]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3724      	adds	r7, #36	@ 0x24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	58024400 	.word	0x58024400
 80027b4:	03d09000 	.word	0x03d09000
 80027b8:	003d0900 	.word	0x003d0900
 80027bc:	017d7840 	.word	0x017d7840
 80027c0:	46000000 	.word	0x46000000
 80027c4:	4c742400 	.word	0x4c742400
 80027c8:	4a742400 	.word	0x4a742400
 80027cc:	4bbebc20 	.word	0x4bbebc20

080027d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80027d6:	f7ff fe81 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 80027da:	4602      	mov	r2, r0
 80027dc:	4b10      	ldr	r3, [pc, #64]	@ (8002820 <HAL_RCC_GetHCLKFreq+0x50>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	490f      	ldr	r1, [pc, #60]	@ (8002824 <HAL_RCC_GetHCLKFreq+0x54>)
 80027e8:	5ccb      	ldrb	r3, [r1, r3]
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	fa22 f303 	lsr.w	r3, r2, r3
 80027f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002820 <HAL_RCC_GetHCLKFreq+0x50>)
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	4a09      	ldr	r2, [pc, #36]	@ (8002824 <HAL_RCC_GetHCLKFreq+0x54>)
 80027fe:	5cd3      	ldrb	r3, [r2, r3]
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	fa22 f303 	lsr.w	r3, r2, r3
 800280a:	4a07      	ldr	r2, [pc, #28]	@ (8002828 <HAL_RCC_GetHCLKFreq+0x58>)
 800280c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800280e:	4a07      	ldr	r2, [pc, #28]	@ (800282c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002814:	4b04      	ldr	r3, [pc, #16]	@ (8002828 <HAL_RCC_GetHCLKFreq+0x58>)
 8002816:	681b      	ldr	r3, [r3, #0]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	58024400 	.word	0x58024400
 8002824:	0800a32c 	.word	0x0800a32c
 8002828:	24000004 	.word	0x24000004
 800282c:	24000000 	.word	0x24000000

08002830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002834:	f7ff ffcc 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 8002838:	4602      	mov	r2, r0
 800283a:	4b06      	ldr	r3, [pc, #24]	@ (8002854 <HAL_RCC_GetPCLK1Freq+0x24>)
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	091b      	lsrs	r3, r3, #4
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	4904      	ldr	r1, [pc, #16]	@ (8002858 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002846:	5ccb      	ldrb	r3, [r1, r3]
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	58024400 	.word	0x58024400
 8002858:	0800a32c 	.word	0x0800a32c

0800285c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	223f      	movs	r2, #63	@ 0x3f
 800286a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800286c:	4b1a      	ldr	r3, [pc, #104]	@ (80028d8 <HAL_RCC_GetClockConfig+0x7c>)
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	f003 0207 	and.w	r2, r3, #7
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002878:	4b17      	ldr	r3, [pc, #92]	@ (80028d8 <HAL_RCC_GetClockConfig+0x7c>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002884:	4b14      	ldr	r3, [pc, #80]	@ (80028d8 <HAL_RCC_GetClockConfig+0x7c>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f003 020f 	and.w	r2, r3, #15
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002890:	4b11      	ldr	r3, [pc, #68]	@ (80028d8 <HAL_RCC_GetClockConfig+0x7c>)
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800289c:	4b0e      	ldr	r3, [pc, #56]	@ (80028d8 <HAL_RCC_GetClockConfig+0x7c>)
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80028a8:	4b0b      	ldr	r3, [pc, #44]	@ (80028d8 <HAL_RCC_GetClockConfig+0x7c>)
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80028b4:	4b08      	ldr	r3, [pc, #32]	@ (80028d8 <HAL_RCC_GetClockConfig+0x7c>)
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028c0:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <HAL_RCC_GetClockConfig+0x80>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 020f 	and.w	r2, r3, #15
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	601a      	str	r2, [r3, #0]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	58024400 	.word	0x58024400
 80028dc:	52002000 	.word	0x52002000

080028e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028e4:	b0ca      	sub	sp, #296	@ 0x128
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028ec:	2300      	movs	r3, #0
 80028ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028f2:	2300      	movs	r3, #0
 80028f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002900:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002904:	2500      	movs	r5, #0
 8002906:	ea54 0305 	orrs.w	r3, r4, r5
 800290a:	d049      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800290c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002910:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002912:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002916:	d02f      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002918:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800291c:	d828      	bhi.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800291e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002922:	d01a      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002924:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002928:	d822      	bhi.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800292e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002932:	d007      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002934:	e01c      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002936:	4bb8      	ldr	r3, [pc, #736]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293a:	4ab7      	ldr	r2, [pc, #732]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800293c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002940:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002942:	e01a      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002948:	3308      	adds	r3, #8
 800294a:	2102      	movs	r1, #2
 800294c:	4618      	mov	r0, r3
 800294e:	f001 f9d1 	bl	8003cf4 <RCCEx_PLL2_Config>
 8002952:	4603      	mov	r3, r0
 8002954:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002958:	e00f      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800295a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800295e:	3328      	adds	r3, #40	@ 0x28
 8002960:	2102      	movs	r1, #2
 8002962:	4618      	mov	r0, r3
 8002964:	f001 fa78 	bl	8003e58 <RCCEx_PLL3_Config>
 8002968:	4603      	mov	r3, r0
 800296a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800296e:	e004      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002976:	e000      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002978:	bf00      	nop
    }

    if (ret == HAL_OK)
 800297a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10a      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002982:	4ba5      	ldr	r3, [pc, #660]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002984:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002986:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800298a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800298e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002990:	4aa1      	ldr	r2, [pc, #644]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002992:	430b      	orrs	r3, r1
 8002994:	6513      	str	r3, [r2, #80]	@ 0x50
 8002996:	e003      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002998:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800299c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80029ac:	f04f 0900 	mov.w	r9, #0
 80029b0:	ea58 0309 	orrs.w	r3, r8, r9
 80029b4:	d047      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80029b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d82a      	bhi.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80029c0:	a201      	add	r2, pc, #4	@ (adr r2, 80029c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80029c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c6:	bf00      	nop
 80029c8:	080029dd 	.word	0x080029dd
 80029cc:	080029eb 	.word	0x080029eb
 80029d0:	08002a01 	.word	0x08002a01
 80029d4:	08002a1f 	.word	0x08002a1f
 80029d8:	08002a1f 	.word	0x08002a1f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029dc:	4b8e      	ldr	r3, [pc, #568]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e0:	4a8d      	ldr	r2, [pc, #564]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029e8:	e01a      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029ee:	3308      	adds	r3, #8
 80029f0:	2100      	movs	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f001 f97e 	bl	8003cf4 <RCCEx_PLL2_Config>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029fe:	e00f      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a04:	3328      	adds	r3, #40	@ 0x28
 8002a06:	2100      	movs	r1, #0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f001 fa25 	bl	8003e58 <RCCEx_PLL3_Config>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a14:	e004      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a1c:	e000      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002a1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10a      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a28:	4b7b      	ldr	r3, [pc, #492]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a2c:	f023 0107 	bic.w	r1, r3, #7
 8002a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a36:	4a78      	ldr	r2, [pc, #480]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a3c:	e003      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002a52:	f04f 0b00 	mov.w	fp, #0
 8002a56:	ea5a 030b 	orrs.w	r3, sl, fp
 8002a5a:	d04c      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a66:	d030      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002a68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a6c:	d829      	bhi.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002a6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a70:	d02d      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002a72:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a74:	d825      	bhi.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002a76:	2b80      	cmp	r3, #128	@ 0x80
 8002a78:	d018      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002a7a:	2b80      	cmp	r3, #128	@ 0x80
 8002a7c:	d821      	bhi.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002a82:	2b40      	cmp	r3, #64	@ 0x40
 8002a84:	d007      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002a86:	e01c      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a88:	4b63      	ldr	r3, [pc, #396]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8c:	4a62      	ldr	r2, [pc, #392]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a94:	e01c      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a9a:	3308      	adds	r3, #8
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f001 f928 	bl	8003cf4 <RCCEx_PLL2_Config>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002aaa:	e011      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ab0:	3328      	adds	r3, #40	@ 0x28
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f001 f9cf 	bl	8003e58 <RCCEx_PLL3_Config>
 8002aba:	4603      	mov	r3, r0
 8002abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002ac0:	e006      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ac8:	e002      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002aca:	bf00      	nop
 8002acc:	e000      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002ace:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002ad8:	4b4f      	ldr	r3, [pc, #316]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002adc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae6:	4a4c      	ldr	r2, [pc, #304]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ae8:	430b      	orrs	r3, r1
 8002aea:	6513      	str	r3, [r2, #80]	@ 0x50
 8002aec:	e003      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002af2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afe:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002b02:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002b06:	2300      	movs	r3, #0
 8002b08:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002b0c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002b10:	460b      	mov	r3, r1
 8002b12:	4313      	orrs	r3, r2
 8002b14:	d053      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002b1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b22:	d035      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002b24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b28:	d82e      	bhi.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002b2a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002b2e:	d031      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002b30:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002b34:	d828      	bhi.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002b36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b3a:	d01a      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002b3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b40:	d822      	bhi.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002b46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b4a:	d007      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002b4c:	e01c      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b4e:	4b32      	ldr	r3, [pc, #200]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b52:	4a31      	ldr	r2, [pc, #196]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b5a:	e01c      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b60:	3308      	adds	r3, #8
 8002b62:	2100      	movs	r1, #0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f001 f8c5 	bl	8003cf4 <RCCEx_PLL2_Config>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002b70:	e011      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b76:	3328      	adds	r3, #40	@ 0x28
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f001 f96c 	bl	8003e58 <RCCEx_PLL3_Config>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b86:	e006      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b8e:	e002      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002b90:	bf00      	nop
 8002b92:	e000      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002b94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10b      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002baa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002bae:	4a1a      	ldr	r2, [pc, #104]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bb4:	e003      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002bca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002bd4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	d056      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002be2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002be6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bea:	d038      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002bec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bf0:	d831      	bhi.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002bf2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002bf6:	d034      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002bf8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002bfc:	d82b      	bhi.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002bfe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c02:	d01d      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002c04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c08:	d825      	bhi.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d006      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002c0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c12:	d00a      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002c14:	e01f      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c16:	bf00      	nop
 8002c18:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c1c:	4ba2      	ldr	r3, [pc, #648]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c20:	4aa1      	ldr	r2, [pc, #644]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c28:	e01c      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c2e:	3308      	adds	r3, #8
 8002c30:	2100      	movs	r1, #0
 8002c32:	4618      	mov	r0, r3
 8002c34:	f001 f85e 	bl	8003cf4 <RCCEx_PLL2_Config>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002c3e:	e011      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c44:	3328      	adds	r3, #40	@ 0x28
 8002c46:	2100      	movs	r1, #0
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f001 f905 	bl	8003e58 <RCCEx_PLL3_Config>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c54:	e006      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c5c:	e002      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002c5e:	bf00      	nop
 8002c60:	e000      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10b      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002c6c:	4b8e      	ldr	r3, [pc, #568]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c70:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002c7c:	4a8a      	ldr	r2, [pc, #552]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c7e:	430b      	orrs	r3, r1
 8002c80:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c82:	e003      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c94:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002c98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002ca2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	d03a      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cb2:	2b30      	cmp	r3, #48	@ 0x30
 8002cb4:	d01f      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002cb6:	2b30      	cmp	r3, #48	@ 0x30
 8002cb8:	d819      	bhi.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002cba:	2b20      	cmp	r3, #32
 8002cbc:	d00c      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	d815      	bhi.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d019      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d111      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cca:	4b77      	ldr	r3, [pc, #476]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cce:	4a76      	ldr	r2, [pc, #472]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002cd6:	e011      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cdc:	3308      	adds	r3, #8
 8002cde:	2102      	movs	r1, #2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f001 f807 	bl	8003cf4 <RCCEx_PLL2_Config>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002cec:	e006      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cf4:	e002      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002cf6:	bf00      	nop
 8002cf8:	e000      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002cfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10a      	bne.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002d04:	4b68      	ldr	r3, [pc, #416]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d08:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d12:	4a65      	ldr	r2, [pc, #404]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d14:	430b      	orrs	r3, r1
 8002d16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d18:	e003      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002d2e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002d32:	2300      	movs	r3, #0
 8002d34:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002d38:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	d051      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d4c:	d035      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002d4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d52:	d82e      	bhi.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002d54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d58:	d031      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002d5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d5e:	d828      	bhi.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002d60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d64:	d01a      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d6a:	d822      	bhi.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002d70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d74:	d007      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002d76:	e01c      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d78:	4b4b      	ldr	r3, [pc, #300]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7c:	4a4a      	ldr	r2, [pc, #296]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d84:	e01c      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d8a:	3308      	adds	r3, #8
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 ffb0 	bl	8003cf4 <RCCEx_PLL2_Config>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d9a:	e011      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002da0:	3328      	adds	r3, #40	@ 0x28
 8002da2:	2100      	movs	r1, #0
 8002da4:	4618      	mov	r0, r3
 8002da6:	f001 f857 	bl	8003e58 <RCCEx_PLL3_Config>
 8002daa:	4603      	mov	r3, r0
 8002dac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002db0:	e006      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002db8:	e002      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002dba:	bf00      	nop
 8002dbc:	e000      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10a      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002dc8:	4b37      	ldr	r3, [pc, #220]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dcc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dd6:	4a34      	ldr	r2, [pc, #208]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ddc:	e003      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002de2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002df2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002df6:	2300      	movs	r3, #0
 8002df8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002dfc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002e00:	460b      	mov	r3, r1
 8002e02:	4313      	orrs	r3, r2
 8002e04:	d056      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e10:	d033      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002e12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e16:	d82c      	bhi.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e1c:	d02f      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002e1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e22:	d826      	bhi.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e28:	d02b      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002e2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e2e:	d820      	bhi.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e34:	d012      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002e36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e3a:	d81a      	bhi.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d022      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e44:	d115      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e4a:	3308      	adds	r3, #8
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 ff50 	bl	8003cf4 <RCCEx_PLL2_Config>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002e5a:	e015      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e60:	3328      	adds	r3, #40	@ 0x28
 8002e62:	2101      	movs	r1, #1
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fff7 	bl	8003e58 <RCCEx_PLL3_Config>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002e70:	e00a      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e78:	e006      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002e7a:	bf00      	nop
 8002e7c:	e004      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002e7e:	bf00      	nop
 8002e80:	e002      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002e82:	bf00      	nop
 8002e84:	e000      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002e86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10d      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002e90:	4b05      	ldr	r3, [pc, #20]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e94:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e9e:	4a02      	ldr	r2, [pc, #8]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ea4:	e006      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002ea6:	bf00      	nop
 8002ea8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002eca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	d055      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ed8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ee0:	d033      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002ee2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ee6:	d82c      	bhi.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eec:	d02f      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ef2:	d826      	bhi.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ef4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002ef8:	d02b      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002efa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002efe:	d820      	bhi.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f04:	d012      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002f06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f0a:	d81a      	bhi.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d022      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002f10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f14:	d115      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f1a:	3308      	adds	r3, #8
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fee8 	bl	8003cf4 <RCCEx_PLL2_Config>
 8002f24:	4603      	mov	r3, r0
 8002f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002f2a:	e015      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f30:	3328      	adds	r3, #40	@ 0x28
 8002f32:	2101      	movs	r1, #1
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 ff8f 	bl	8003e58 <RCCEx_PLL3_Config>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002f40:	e00a      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f48:	e006      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002f4a:	bf00      	nop
 8002f4c:	e004      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002f4e:	bf00      	nop
 8002f50:	e002      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002f52:	bf00      	nop
 8002f54:	e000      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002f56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10b      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002f60:	4ba3      	ldr	r3, [pc, #652]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f64:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002f70:	4a9f      	ldr	r2, [pc, #636]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f72:	430b      	orrs	r3, r1
 8002f74:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f76:	e003      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f88:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002f8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f90:	2300      	movs	r3, #0
 8002f92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002f96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	d037      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002faa:	d00e      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002fac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fb0:	d816      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d018      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002fb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fba:	d111      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fbc:	4b8c      	ldr	r3, [pc, #560]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc0:	4a8b      	ldr	r2, [pc, #556]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002fc8:	e00f      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fce:	3308      	adds	r3, #8
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fe8e 	bl	8003cf4 <RCCEx_PLL2_Config>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002fde:	e004      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fe6:	e000      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10a      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ff2:	4b7f      	ldr	r3, [pc, #508]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ff6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003000:	4a7b      	ldr	r2, [pc, #492]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003002:	430b      	orrs	r3, r1
 8003004:	6513      	str	r3, [r2, #80]	@ 0x50
 8003006:	e003      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003008:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800300c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003018:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800301c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003020:	2300      	movs	r3, #0
 8003022:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003026:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800302a:	460b      	mov	r3, r1
 800302c:	4313      	orrs	r3, r2
 800302e:	d039      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003036:	2b03      	cmp	r3, #3
 8003038:	d81c      	bhi.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800303a:	a201      	add	r2, pc, #4	@ (adr r2, 8003040 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800303c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003040:	0800307d 	.word	0x0800307d
 8003044:	08003051 	.word	0x08003051
 8003048:	0800305f 	.word	0x0800305f
 800304c:	0800307d 	.word	0x0800307d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003050:	4b67      	ldr	r3, [pc, #412]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003054:	4a66      	ldr	r2, [pc, #408]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003056:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800305a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800305c:	e00f      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800305e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003062:	3308      	adds	r3, #8
 8003064:	2102      	movs	r1, #2
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fe44 	bl	8003cf4 <RCCEx_PLL2_Config>
 800306c:	4603      	mov	r3, r0
 800306e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003072:	e004      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800307a:	e000      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800307c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800307e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10a      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003086:	4b5a      	ldr	r3, [pc, #360]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800308a:	f023 0103 	bic.w	r1, r3, #3
 800308e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003094:	4a56      	ldr	r2, [pc, #344]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003096:	430b      	orrs	r3, r1
 8003098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800309a:	e003      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800309c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80030b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030b4:	2300      	movs	r3, #0
 80030b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80030ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80030be:	460b      	mov	r3, r1
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f000 809f 	beq.w	8003204 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030c6:	4b4b      	ldr	r3, [pc, #300]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a4a      	ldr	r2, [pc, #296]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80030cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030d2:	f7fe f93b 	bl	800134c <HAL_GetTick>
 80030d6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030da:	e00b      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030dc:	f7fe f936 	bl	800134c <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b64      	cmp	r3, #100	@ 0x64
 80030ea:	d903      	bls.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030f2:	e005      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030f4:	4b3f      	ldr	r3, [pc, #252]	@ (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0ed      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003100:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003104:	2b00      	cmp	r3, #0
 8003106:	d179      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003108:	4b39      	ldr	r3, [pc, #228]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800310a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800310c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003110:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003114:	4053      	eors	r3, r2
 8003116:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800311a:	2b00      	cmp	r3, #0
 800311c:	d015      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800311e:	4b34      	ldr	r3, [pc, #208]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003126:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800312a:	4b31      	ldr	r3, [pc, #196]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312e:	4a30      	ldr	r2, [pc, #192]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003134:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003136:	4b2e      	ldr	r3, [pc, #184]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800313a:	4a2d      	ldr	r2, [pc, #180]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800313c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003140:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003142:	4a2b      	ldr	r2, [pc, #172]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003144:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003148:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800314a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800314e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003152:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003156:	d118      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fe f8f8 	bl	800134c <HAL_GetTick>
 800315c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003160:	e00d      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003162:	f7fe f8f3 	bl	800134c <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800316c:	1ad2      	subs	r2, r2, r3
 800316e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003172:	429a      	cmp	r2, r3
 8003174:	d903      	bls.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800317c:	e005      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800317e:	4b1c      	ldr	r3, [pc, #112]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0eb      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800318a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800318e:	2b00      	cmp	r3, #0
 8003190:	d129      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003196:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800319a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800319e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031a2:	d10e      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80031a4:	4b12      	ldr	r3, [pc, #72]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80031ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80031b4:	091a      	lsrs	r2, r3, #4
 80031b6:	4b10      	ldr	r3, [pc, #64]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	4a0d      	ldr	r2, [pc, #52]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031bc:	430b      	orrs	r3, r1
 80031be:	6113      	str	r3, [r2, #16]
 80031c0:	e005      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80031c2:	4b0b      	ldr	r3, [pc, #44]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	4a0a      	ldr	r2, [pc, #40]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80031cc:	6113      	str	r3, [r2, #16]
 80031ce:	4b08      	ldr	r3, [pc, #32]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031d0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80031d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80031da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031de:	4a04      	ldr	r2, [pc, #16]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031e0:	430b      	orrs	r3, r1
 80031e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e4:	e00e      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80031ee:	e009      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80031f0:	58024400 	.word	0x58024400
 80031f4:	58024800 	.word	0x58024800
 80031f8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003200:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320c:	f002 0301 	and.w	r3, r2, #1
 8003210:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003214:	2300      	movs	r3, #0
 8003216:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800321a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800321e:	460b      	mov	r3, r1
 8003220:	4313      	orrs	r3, r2
 8003222:	f000 8089 	beq.w	8003338 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800322a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800322c:	2b28      	cmp	r3, #40	@ 0x28
 800322e:	d86b      	bhi.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003230:	a201      	add	r2, pc, #4	@ (adr r2, 8003238 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003236:	bf00      	nop
 8003238:	08003311 	.word	0x08003311
 800323c:	08003309 	.word	0x08003309
 8003240:	08003309 	.word	0x08003309
 8003244:	08003309 	.word	0x08003309
 8003248:	08003309 	.word	0x08003309
 800324c:	08003309 	.word	0x08003309
 8003250:	08003309 	.word	0x08003309
 8003254:	08003309 	.word	0x08003309
 8003258:	080032dd 	.word	0x080032dd
 800325c:	08003309 	.word	0x08003309
 8003260:	08003309 	.word	0x08003309
 8003264:	08003309 	.word	0x08003309
 8003268:	08003309 	.word	0x08003309
 800326c:	08003309 	.word	0x08003309
 8003270:	08003309 	.word	0x08003309
 8003274:	08003309 	.word	0x08003309
 8003278:	080032f3 	.word	0x080032f3
 800327c:	08003309 	.word	0x08003309
 8003280:	08003309 	.word	0x08003309
 8003284:	08003309 	.word	0x08003309
 8003288:	08003309 	.word	0x08003309
 800328c:	08003309 	.word	0x08003309
 8003290:	08003309 	.word	0x08003309
 8003294:	08003309 	.word	0x08003309
 8003298:	08003311 	.word	0x08003311
 800329c:	08003309 	.word	0x08003309
 80032a0:	08003309 	.word	0x08003309
 80032a4:	08003309 	.word	0x08003309
 80032a8:	08003309 	.word	0x08003309
 80032ac:	08003309 	.word	0x08003309
 80032b0:	08003309 	.word	0x08003309
 80032b4:	08003309 	.word	0x08003309
 80032b8:	08003311 	.word	0x08003311
 80032bc:	08003309 	.word	0x08003309
 80032c0:	08003309 	.word	0x08003309
 80032c4:	08003309 	.word	0x08003309
 80032c8:	08003309 	.word	0x08003309
 80032cc:	08003309 	.word	0x08003309
 80032d0:	08003309 	.word	0x08003309
 80032d4:	08003309 	.word	0x08003309
 80032d8:	08003311 	.word	0x08003311
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e0:	3308      	adds	r3, #8
 80032e2:	2101      	movs	r1, #1
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fd05 	bl	8003cf4 <RCCEx_PLL2_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80032f0:	e00f      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f6:	3328      	adds	r3, #40	@ 0x28
 80032f8:	2101      	movs	r1, #1
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fdac 	bl	8003e58 <RCCEx_PLL3_Config>
 8003300:	4603      	mov	r3, r0
 8003302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003306:	e004      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800330e:	e000      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10a      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800331a:	4bbf      	ldr	r3, [pc, #764]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800331c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003326:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003328:	4abb      	ldr	r2, [pc, #748]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800332a:	430b      	orrs	r3, r1
 800332c:	6553      	str	r3, [r2, #84]	@ 0x54
 800332e:	e003      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003334:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003340:	f002 0302 	and.w	r3, r2, #2
 8003344:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003348:	2300      	movs	r3, #0
 800334a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800334e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003352:	460b      	mov	r3, r1
 8003354:	4313      	orrs	r3, r2
 8003356:	d041      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800335c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800335e:	2b05      	cmp	r3, #5
 8003360:	d824      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003362:	a201      	add	r2, pc, #4	@ (adr r2, 8003368 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003368:	080033b5 	.word	0x080033b5
 800336c:	08003381 	.word	0x08003381
 8003370:	08003397 	.word	0x08003397
 8003374:	080033b5 	.word	0x080033b5
 8003378:	080033b5 	.word	0x080033b5
 800337c:	080033b5 	.word	0x080033b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003384:	3308      	adds	r3, #8
 8003386:	2101      	movs	r1, #1
 8003388:	4618      	mov	r0, r3
 800338a:	f000 fcb3 	bl	8003cf4 <RCCEx_PLL2_Config>
 800338e:	4603      	mov	r3, r0
 8003390:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003394:	e00f      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339a:	3328      	adds	r3, #40	@ 0x28
 800339c:	2101      	movs	r1, #1
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fd5a 	bl	8003e58 <RCCEx_PLL3_Config>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80033aa:	e004      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033b2:	e000      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80033b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10a      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80033be:	4b96      	ldr	r3, [pc, #600]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c2:	f023 0107 	bic.w	r1, r3, #7
 80033c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033cc:	4a92      	ldr	r2, [pc, #584]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033ce:	430b      	orrs	r3, r1
 80033d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80033d2:	e003      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e4:	f002 0304 	and.w	r3, r2, #4
 80033e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033ec:	2300      	movs	r3, #0
 80033ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033f2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4313      	orrs	r3, r2
 80033fa:	d044      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80033fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003400:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003404:	2b05      	cmp	r3, #5
 8003406:	d825      	bhi.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003408:	a201      	add	r2, pc, #4	@ (adr r2, 8003410 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800340a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340e:	bf00      	nop
 8003410:	0800345d 	.word	0x0800345d
 8003414:	08003429 	.word	0x08003429
 8003418:	0800343f 	.word	0x0800343f
 800341c:	0800345d 	.word	0x0800345d
 8003420:	0800345d 	.word	0x0800345d
 8003424:	0800345d 	.word	0x0800345d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800342c:	3308      	adds	r3, #8
 800342e:	2101      	movs	r1, #1
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fc5f 	bl	8003cf4 <RCCEx_PLL2_Config>
 8003436:	4603      	mov	r3, r0
 8003438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800343c:	e00f      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800343e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003442:	3328      	adds	r3, #40	@ 0x28
 8003444:	2101      	movs	r1, #1
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fd06 	bl	8003e58 <RCCEx_PLL3_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003452:	e004      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800345a:	e000      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800345c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800345e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10b      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003466:	4b6c      	ldr	r3, [pc, #432]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346a:	f023 0107 	bic.w	r1, r3, #7
 800346e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003472:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003476:	4a68      	ldr	r2, [pc, #416]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003478:	430b      	orrs	r3, r1
 800347a:	6593      	str	r3, [r2, #88]	@ 0x58
 800347c:	e003      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800347e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003482:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800348a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348e:	f002 0320 	and.w	r3, r2, #32
 8003492:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003496:	2300      	movs	r3, #0
 8003498:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800349c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80034a0:	460b      	mov	r3, r1
 80034a2:	4313      	orrs	r3, r2
 80034a4:	d055      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80034a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034b2:	d033      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80034b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034b8:	d82c      	bhi.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80034ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034be:	d02f      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80034c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c4:	d826      	bhi.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80034c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80034ca:	d02b      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80034cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80034d0:	d820      	bhi.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80034d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034d6:	d012      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80034d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034dc:	d81a      	bhi.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d022      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80034e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034e6:	d115      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ec:	3308      	adds	r3, #8
 80034ee:	2100      	movs	r1, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fbff 	bl	8003cf4 <RCCEx_PLL2_Config>
 80034f6:	4603      	mov	r3, r0
 80034f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80034fc:	e015      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003502:	3328      	adds	r3, #40	@ 0x28
 8003504:	2102      	movs	r1, #2
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fca6 	bl	8003e58 <RCCEx_PLL3_Config>
 800350c:	4603      	mov	r3, r0
 800350e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003512:	e00a      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800351a:	e006      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800351c:	bf00      	nop
 800351e:	e004      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003520:	bf00      	nop
 8003522:	e002      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003524:	bf00      	nop
 8003526:	e000      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800352a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10b      	bne.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003532:	4b39      	ldr	r3, [pc, #228]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003536:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800353a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003542:	4a35      	ldr	r2, [pc, #212]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003544:	430b      	orrs	r3, r1
 8003546:	6553      	str	r3, [r2, #84]	@ 0x54
 8003548:	e003      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800354a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800354e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800355e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003562:	2300      	movs	r3, #0
 8003564:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003568:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800356c:	460b      	mov	r3, r1
 800356e:	4313      	orrs	r3, r2
 8003570:	d058      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003576:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800357a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800357e:	d033      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003580:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003584:	d82c      	bhi.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800358a:	d02f      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800358c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003590:	d826      	bhi.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003592:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003596:	d02b      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003598:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800359c:	d820      	bhi.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800359e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035a2:	d012      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80035a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035a8:	d81a      	bhi.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d022      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80035ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035b2:	d115      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b8:	3308      	adds	r3, #8
 80035ba:	2100      	movs	r1, #0
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fb99 	bl	8003cf4 <RCCEx_PLL2_Config>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80035c8:	e015      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ce:	3328      	adds	r3, #40	@ 0x28
 80035d0:	2102      	movs	r1, #2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 fc40 	bl	8003e58 <RCCEx_PLL3_Config>
 80035d8:	4603      	mov	r3, r0
 80035da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80035de:	e00a      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035e6:	e006      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80035e8:	bf00      	nop
 80035ea:	e004      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80035ec:	bf00      	nop
 80035ee:	e002      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80035f0:	bf00      	nop
 80035f2:	e000      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80035f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10e      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035fe:	4b06      	ldr	r3, [pc, #24]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003602:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800360a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800360e:	4a02      	ldr	r2, [pc, #8]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003610:	430b      	orrs	r3, r1
 8003612:	6593      	str	r3, [r2, #88]	@ 0x58
 8003614:	e006      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003616:	bf00      	nop
 8003618:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800361c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003620:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003630:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003634:	2300      	movs	r3, #0
 8003636:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800363a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800363e:	460b      	mov	r3, r1
 8003640:	4313      	orrs	r3, r2
 8003642:	d055      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003648:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800364c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003650:	d033      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003652:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003656:	d82c      	bhi.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003658:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800365c:	d02f      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800365e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003662:	d826      	bhi.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003664:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003668:	d02b      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800366a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800366e:	d820      	bhi.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003670:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003674:	d012      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003676:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800367a:	d81a      	bhi.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800367c:	2b00      	cmp	r3, #0
 800367e:	d022      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003680:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003684:	d115      	bne.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800368a:	3308      	adds	r3, #8
 800368c:	2100      	movs	r1, #0
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fb30 	bl	8003cf4 <RCCEx_PLL2_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800369a:	e015      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800369c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a0:	3328      	adds	r3, #40	@ 0x28
 80036a2:	2102      	movs	r1, #2
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fbd7 	bl	8003e58 <RCCEx_PLL3_Config>
 80036aa:	4603      	mov	r3, r0
 80036ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80036b0:	e00a      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036b8:	e006      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80036ba:	bf00      	nop
 80036bc:	e004      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80036be:	bf00      	nop
 80036c0:	e002      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80036c2:	bf00      	nop
 80036c4:	e000      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80036c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10b      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80036d0:	4ba1      	ldr	r3, [pc, #644]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80036d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80036e0:	4a9d      	ldr	r2, [pc, #628]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036e2:	430b      	orrs	r3, r1
 80036e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80036e6:	e003      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80036f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f8:	f002 0308 	and.w	r3, r2, #8
 80036fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003700:	2300      	movs	r3, #0
 8003702:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003706:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800370a:	460b      	mov	r3, r1
 800370c:	4313      	orrs	r3, r2
 800370e:	d01e      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003714:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800371c:	d10c      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800371e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003722:	3328      	adds	r3, #40	@ 0x28
 8003724:	2102      	movs	r1, #2
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fb96 	bl	8003e58 <RCCEx_PLL3_Config>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003738:	4b87      	ldr	r3, [pc, #540]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800373a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800373c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003748:	4a83      	ldr	r2, [pc, #524]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800374a:	430b      	orrs	r3, r1
 800374c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800374e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003756:	f002 0310 	and.w	r3, r2, #16
 800375a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800375e:	2300      	movs	r3, #0
 8003760:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003764:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003768:	460b      	mov	r3, r1
 800376a:	4313      	orrs	r3, r2
 800376c:	d01e      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800376e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003772:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800377a:	d10c      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800377c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003780:	3328      	adds	r3, #40	@ 0x28
 8003782:	2102      	movs	r1, #2
 8003784:	4618      	mov	r0, r3
 8003786:	f000 fb67 	bl	8003e58 <RCCEx_PLL3_Config>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003796:	4b70      	ldr	r3, [pc, #448]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800379e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037a6:	4a6c      	ldr	r2, [pc, #432]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037a8:	430b      	orrs	r3, r1
 80037aa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80037b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037bc:	2300      	movs	r3, #0
 80037be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037c2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80037c6:	460b      	mov	r3, r1
 80037c8:	4313      	orrs	r3, r2
 80037ca:	d03e      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80037cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80037d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037d8:	d022      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80037da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037de:	d81b      	bhi.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80037e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037e8:	d00b      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80037ea:	e015      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f0:	3308      	adds	r3, #8
 80037f2:	2100      	movs	r1, #0
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 fa7d 	bl	8003cf4 <RCCEx_PLL2_Config>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003800:	e00f      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003806:	3328      	adds	r3, #40	@ 0x28
 8003808:	2102      	movs	r1, #2
 800380a:	4618      	mov	r0, r3
 800380c:	f000 fb24 	bl	8003e58 <RCCEx_PLL3_Config>
 8003810:	4603      	mov	r3, r0
 8003812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003816:	e004      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800381e:	e000      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003820:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10b      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800382a:	4b4b      	ldr	r3, [pc, #300]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800382c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003836:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800383a:	4a47      	ldr	r2, [pc, #284]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800383c:	430b      	orrs	r3, r1
 800383e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003840:	e003      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003846:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800384a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003852:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003856:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003858:	2300      	movs	r3, #0
 800385a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800385c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003860:	460b      	mov	r3, r1
 8003862:	4313      	orrs	r3, r2
 8003864:	d03b      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003872:	d01f      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003874:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003878:	d818      	bhi.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800387a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800387e:	d003      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003880:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003884:	d007      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003886:	e011      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003888:	4b33      	ldr	r3, [pc, #204]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800388a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388c:	4a32      	ldr	r2, [pc, #200]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800388e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003892:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003894:	e00f      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389a:	3328      	adds	r3, #40	@ 0x28
 800389c:	2101      	movs	r1, #1
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 fada 	bl	8003e58 <RCCEx_PLL3_Config>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80038aa:	e004      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038b2:	e000      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80038b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10b      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038be:	4b26      	ldr	r3, [pc, #152]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80038c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ce:	4a22      	ldr	r2, [pc, #136]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038d0:	430b      	orrs	r3, r1
 80038d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80038d4:	e003      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80038de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80038ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80038ec:	2300      	movs	r3, #0
 80038ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80038f0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80038f4:	460b      	mov	r3, r1
 80038f6:	4313      	orrs	r3, r2
 80038f8:	d034      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80038fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003908:	d007      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800390a:	e011      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800390c:	4b12      	ldr	r3, [pc, #72]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800390e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003910:	4a11      	ldr	r2, [pc, #68]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003912:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003916:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003918:	e00e      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800391a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391e:	3308      	adds	r3, #8
 8003920:	2102      	movs	r1, #2
 8003922:	4618      	mov	r0, r3
 8003924:	f000 f9e6 	bl	8003cf4 <RCCEx_PLL2_Config>
 8003928:	4603      	mov	r3, r0
 800392a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800392e:	e003      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003938:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10d      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003940:	4b05      	ldr	r3, [pc, #20]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003944:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800394e:	4a02      	ldr	r2, [pc, #8]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003950:	430b      	orrs	r3, r1
 8003952:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003954:	e006      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003956:	bf00      	nop
 8003958:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003960:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003970:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003972:	2300      	movs	r3, #0
 8003974:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003976:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800397a:	460b      	mov	r3, r1
 800397c:	4313      	orrs	r3, r2
 800397e:	d00c      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003984:	3328      	adds	r3, #40	@ 0x28
 8003986:	2102      	movs	r1, #2
 8003988:	4618      	mov	r0, r3
 800398a:	f000 fa65 	bl	8003e58 <RCCEx_PLL3_Config>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800399a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80039a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80039a8:	2300      	movs	r3, #0
 80039aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80039ac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80039b0:	460b      	mov	r3, r1
 80039b2:	4313      	orrs	r3, r2
 80039b4:	d038      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80039b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039c2:	d018      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80039c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039c8:	d811      	bhi.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80039ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039ce:	d014      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80039d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039d4:	d80b      	bhi.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d011      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80039da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039de:	d106      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039e0:	4bc3      	ldr	r3, [pc, #780]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e4:	4ac2      	ldr	r2, [pc, #776]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80039ec:	e008      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039f4:	e004      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80039f6:	bf00      	nop
 80039f8:	e002      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80039fa:	bf00      	nop
 80039fc:	e000      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80039fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10b      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a08:	4bb9      	ldr	r3, [pc, #740]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a18:	4ab5      	ldr	r2, [pc, #724]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a1e:	e003      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a30:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003a34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a36:	2300      	movs	r3, #0
 8003a38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a3a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4313      	orrs	r3, r2
 8003a42:	d009      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a44:	4baa      	ldr	r3, [pc, #680]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a48:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a52:	4aa7      	ldr	r2, [pc, #668]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a54:	430b      	orrs	r3, r1
 8003a56:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a60:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003a64:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a66:	2300      	movs	r3, #0
 8003a68:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a6a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4313      	orrs	r3, r2
 8003a72:	d00a      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003a74:	4b9e      	ldr	r3, [pc, #632]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a80:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003a84:	4a9a      	ldr	r2, [pc, #616]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a86:	430b      	orrs	r3, r1
 8003a88:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a92:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003a96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a98:	2300      	movs	r3, #0
 8003a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a9c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	d009      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003aa6:	4b92      	ldr	r3, [pc, #584]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aaa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ab4:	4a8e      	ldr	r2, [pc, #568]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ab6:	430b      	orrs	r3, r1
 8003ab8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003ac6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ac8:	2300      	movs	r3, #0
 8003aca:	647b      	str	r3, [r7, #68]	@ 0x44
 8003acc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	d00e      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ad6:	4b86      	ldr	r3, [pc, #536]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	4a85      	ldr	r2, [pc, #532]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003adc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003ae0:	6113      	str	r3, [r2, #16]
 8003ae2:	4b83      	ldr	r3, [pc, #524]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ae4:	6919      	ldr	r1, [r3, #16]
 8003ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003aee:	4a80      	ldr	r2, [pc, #512]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003af0:	430b      	orrs	r3, r1
 8003af2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003b00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b02:	2300      	movs	r3, #0
 8003b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b06:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	d009      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003b10:	4b77      	ldr	r3, [pc, #476]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b14:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1e:	4a74      	ldr	r2, [pc, #464]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b20:	430b      	orrs	r3, r1
 8003b22:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003b30:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b32:	2300      	movs	r3, #0
 8003b34:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b36:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	d00a      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b40:	4b6b      	ldr	r3, [pc, #428]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b44:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b50:	4a67      	ldr	r2, [pc, #412]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b52:	430b      	orrs	r3, r1
 8003b54:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5e:	2100      	movs	r1, #0
 8003b60:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b68:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	d011      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b76:	3308      	adds	r3, #8
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 f8ba 	bl	8003cf4 <RCCEx_PLL2_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	6239      	str	r1, [r7, #32]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ba8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003bac:	460b      	mov	r3, r1
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	d011      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb6:	3308      	adds	r3, #8
 8003bb8:	2101      	movs	r1, #1
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 f89a 	bl	8003cf4 <RCCEx_PLL2_Config>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	2100      	movs	r1, #0
 8003be0:	61b9      	str	r1, [r7, #24]
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	61fb      	str	r3, [r7, #28]
 8003be8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003bec:	460b      	mov	r3, r1
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	d011      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	2102      	movs	r1, #2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 f87a 	bl	8003cf4 <RCCEx_PLL2_Config>
 8003c00:	4603      	mov	r3, r0
 8003c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1e:	2100      	movs	r1, #0
 8003c20:	6139      	str	r1, [r7, #16]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	d011      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c36:	3328      	adds	r3, #40	@ 0x28
 8003c38:	2100      	movs	r1, #0
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 f90c 	bl	8003e58 <RCCEx_PLL3_Config>
 8003c40:	4603      	mov	r3, r0
 8003c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5e:	2100      	movs	r1, #0
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	d011      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c76:	3328      	adds	r3, #40	@ 0x28
 8003c78:	2101      	movs	r1, #1
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 f8ec 	bl	8003e58 <RCCEx_PLL3_Config>
 8003c80:	4603      	mov	r3, r0
 8003c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	6039      	str	r1, [r7, #0]
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	607b      	str	r3, [r7, #4]
 8003ca8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003cac:	460b      	mov	r3, r1
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	d011      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb6:	3328      	adds	r3, #40	@ 0x28
 8003cb8:	2102      	movs	r1, #2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 f8cc 	bl	8003e58 <RCCEx_PLL3_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003cd6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	e000      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003cea:	46bd      	mov	sp, r7
 8003cec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cf0:	58024400 	.word	0x58024400

08003cf4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d02:	4b53      	ldr	r3, [pc, #332]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d101      	bne.n	8003d12 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e099      	b.n	8003e46 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003d12:	4b4f      	ldr	r3, [pc, #316]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a4e      	ldr	r2, [pc, #312]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003d18:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d1e:	f7fd fb15 	bl	800134c <HAL_GetTick>
 8003d22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d24:	e008      	b.n	8003d38 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d26:	f7fd fb11 	bl	800134c <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e086      	b.n	8003e46 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d38:	4b45      	ldr	r3, [pc, #276]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1f0      	bne.n	8003d26 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d44:	4b42      	ldr	r3, [pc, #264]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d48:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	031b      	lsls	r3, r3, #12
 8003d52:	493f      	ldr	r1, [pc, #252]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	628b      	str	r3, [r1, #40]	@ 0x28
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	025b      	lsls	r3, r3, #9
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	041b      	lsls	r3, r3, #16
 8003d76:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	061b      	lsls	r3, r3, #24
 8003d84:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003d88:	4931      	ldr	r1, [pc, #196]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d8e:	4b30      	ldr	r3, [pc, #192]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d92:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	492d      	ldr	r1, [pc, #180]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003da0:	4b2b      	ldr	r3, [pc, #172]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da4:	f023 0220 	bic.w	r2, r3, #32
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	4928      	ldr	r1, [pc, #160]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003db2:	4b27      	ldr	r3, [pc, #156]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db6:	4a26      	ldr	r2, [pc, #152]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003db8:	f023 0310 	bic.w	r3, r3, #16
 8003dbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003dbe:	4b24      	ldr	r3, [pc, #144]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003dc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dc2:	4b24      	ldr	r3, [pc, #144]	@ (8003e54 <RCCEx_PLL2_Config+0x160>)
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	69d2      	ldr	r2, [r2, #28]
 8003dca:	00d2      	lsls	r2, r2, #3
 8003dcc:	4920      	ldr	r1, [pc, #128]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003dd8:	f043 0310 	orr.w	r3, r3, #16
 8003ddc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d106      	bne.n	8003df2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003de4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de8:	4a19      	ldr	r2, [pc, #100]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003dea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003dee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003df0:	e00f      	b.n	8003e12 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d106      	bne.n	8003e06 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003df8:	4b15      	ldr	r3, [pc, #84]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfc:	4a14      	ldr	r2, [pc, #80]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003dfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003e04:	e005      	b.n	8003e12 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003e06:	4b12      	ldr	r3, [pc, #72]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0a:	4a11      	ldr	r2, [pc, #68]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003e0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e10:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003e12:	4b0f      	ldr	r3, [pc, #60]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a0e      	ldr	r2, [pc, #56]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003e18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e1e:	f7fd fa95 	bl	800134c <HAL_GetTick>
 8003e22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e24:	e008      	b.n	8003e38 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e26:	f7fd fa91 	bl	800134c <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e006      	b.n	8003e46 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e38:	4b05      	ldr	r3, [pc, #20]	@ (8003e50 <RCCEx_PLL2_Config+0x15c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	58024400 	.word	0x58024400
 8003e54:	ffff0007 	.word	0xffff0007

08003e58 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e66:	4b53      	ldr	r3, [pc, #332]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d101      	bne.n	8003e76 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e099      	b.n	8003faa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e76:	4b4f      	ldr	r3, [pc, #316]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a4e      	ldr	r2, [pc, #312]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003e7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e82:	f7fd fa63 	bl	800134c <HAL_GetTick>
 8003e86:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e88:	e008      	b.n	8003e9c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003e8a:	f7fd fa5f 	bl	800134c <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e086      	b.n	8003faa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e9c:	4b45      	ldr	r3, [pc, #276]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1f0      	bne.n	8003e8a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003ea8:	4b42      	ldr	r3, [pc, #264]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eac:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	051b      	lsls	r3, r3, #20
 8003eb6:	493f      	ldr	r1, [pc, #252]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	628b      	str	r3, [r1, #40]	@ 0x28
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	025b      	lsls	r3, r3, #9
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	041b      	lsls	r3, r3, #16
 8003eda:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	061b      	lsls	r3, r3, #24
 8003ee8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003eec:	4931      	ldr	r1, [pc, #196]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003ef2:	4b30      	ldr	r3, [pc, #192]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	492d      	ldr	r1, [pc, #180]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003f04:	4b2b      	ldr	r3, [pc, #172]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f08:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	4928      	ldr	r1, [pc, #160]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003f16:	4b27      	ldr	r3, [pc, #156]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1a:	4a26      	ldr	r2, [pc, #152]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003f1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f22:	4b24      	ldr	r3, [pc, #144]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003f24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f26:	4b24      	ldr	r3, [pc, #144]	@ (8003fb8 <RCCEx_PLL3_Config+0x160>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	69d2      	ldr	r2, [r2, #28]
 8003f2e:	00d2      	lsls	r2, r2, #3
 8003f30:	4920      	ldr	r1, [pc, #128]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f36:	4b1f      	ldr	r3, [pc, #124]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d106      	bne.n	8003f56 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f48:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4c:	4a19      	ldr	r2, [pc, #100]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003f4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003f54:	e00f      	b.n	8003f76 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d106      	bne.n	8003f6a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003f5c:	4b15      	ldr	r3, [pc, #84]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f60:	4a14      	ldr	r2, [pc, #80]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003f62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003f68:	e005      	b.n	8003f76 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f6a:	4b12      	ldr	r3, [pc, #72]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6e:	4a11      	ldr	r2, [pc, #68]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003f70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f74:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f76:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a0e      	ldr	r2, [pc, #56]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f82:	f7fd f9e3 	bl	800134c <HAL_GetTick>
 8003f86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f88:	e008      	b.n	8003f9c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f8a:	f7fd f9df 	bl	800134c <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e006      	b.n	8003faa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f9c:	4b05      	ldr	r3, [pc, #20]	@ (8003fb4 <RCCEx_PLL3_Config+0x15c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0f0      	beq.n	8003f8a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	58024400 	.word	0x58024400
 8003fb8:	ffff0007 	.word	0xffff0007

08003fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e049      	b.n	8004062 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d106      	bne.n	8003fe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f841 	bl	800406a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	f000 f9e8 	bl	80043d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
	...

08004080 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b01      	cmp	r3, #1
 8004092:	d001      	beq.n	8004098 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e054      	b.n	8004142 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0201 	orr.w	r2, r2, #1
 80040ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a26      	ldr	r2, [pc, #152]	@ (8004150 <HAL_TIM_Base_Start_IT+0xd0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d022      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0x80>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040c2:	d01d      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0x80>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a22      	ldr	r2, [pc, #136]	@ (8004154 <HAL_TIM_Base_Start_IT+0xd4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d018      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0x80>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a21      	ldr	r2, [pc, #132]	@ (8004158 <HAL_TIM_Base_Start_IT+0xd8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d013      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0x80>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a1f      	ldr	r2, [pc, #124]	@ (800415c <HAL_TIM_Base_Start_IT+0xdc>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00e      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0x80>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004160 <HAL_TIM_Base_Start_IT+0xe0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d009      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0x80>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004164 <HAL_TIM_Base_Start_IT+0xe4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d004      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0x80>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a1b      	ldr	r2, [pc, #108]	@ (8004168 <HAL_TIM_Base_Start_IT+0xe8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d115      	bne.n	800412c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	4b19      	ldr	r3, [pc, #100]	@ (800416c <HAL_TIM_Base_Start_IT+0xec>)
 8004108:	4013      	ands	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2b06      	cmp	r3, #6
 8004110:	d015      	beq.n	800413e <HAL_TIM_Base_Start_IT+0xbe>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004118:	d011      	beq.n	800413e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f042 0201 	orr.w	r2, r2, #1
 8004128:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800412a:	e008      	b.n	800413e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0201 	orr.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	e000      	b.n	8004140 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800413e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40010000 	.word	0x40010000
 8004154:	40000400 	.word	0x40000400
 8004158:	40000800 	.word	0x40000800
 800415c:	40000c00 	.word	0x40000c00
 8004160:	40010400 	.word	0x40010400
 8004164:	40001800 	.word	0x40001800
 8004168:	40014000 	.word	0x40014000
 800416c:	00010007 	.word	0x00010007

08004170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d020      	beq.n	80041d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01b      	beq.n	80041d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0202 	mvn.w	r2, #2
 80041a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f8e9 	bl	8004392 <HAL_TIM_IC_CaptureCallback>
 80041c0:	e005      	b.n	80041ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f8db 	bl	800437e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f8ec 	bl	80043a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d020      	beq.n	8004220 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01b      	beq.n	8004220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0204 	mvn.w	r2, #4
 80041f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2202      	movs	r2, #2
 80041f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f8c3 	bl	8004392 <HAL_TIM_IC_CaptureCallback>
 800420c:	e005      	b.n	800421a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f8b5 	bl	800437e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f8c6 	bl	80043a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d020      	beq.n	800426c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b00      	cmp	r3, #0
 8004232:	d01b      	beq.n	800426c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f06f 0208 	mvn.w	r2, #8
 800423c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2204      	movs	r2, #4
 8004242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f89d 	bl	8004392 <HAL_TIM_IC_CaptureCallback>
 8004258:	e005      	b.n	8004266 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f88f 	bl	800437e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f8a0 	bl	80043a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b00      	cmp	r3, #0
 8004274:	d020      	beq.n	80042b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f003 0310 	and.w	r3, r3, #16
 800427c:	2b00      	cmp	r3, #0
 800427e:	d01b      	beq.n	80042b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f06f 0210 	mvn.w	r2, #16
 8004288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2208      	movs	r2, #8
 800428e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f877 	bl	8004392 <HAL_TIM_IC_CaptureCallback>
 80042a4:	e005      	b.n	80042b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f869 	bl	800437e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f87a 	bl	80043a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00c      	beq.n	80042dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0201 	mvn.w	r2, #1
 80042d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7fc fe12 	bl	8000f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d104      	bne.n	80042f0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00c      	beq.n	800430a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d007      	beq.n	800430a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f913 	bl	8004530 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00c      	beq.n	800432e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800431a:	2b00      	cmp	r3, #0
 800431c:	d007      	beq.n	800432e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f90b 	bl	8004544 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00c      	beq.n	8004352 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800433e:	2b00      	cmp	r3, #0
 8004340:	d007      	beq.n	8004352 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800434a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f834 	bl	80043ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00c      	beq.n	8004376 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f003 0320 	and.w	r3, r3, #32
 8004362:	2b00      	cmp	r3, #0
 8004364:	d007      	beq.n	8004376 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f06f 0220 	mvn.w	r2, #32
 800436e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f8d3 	bl	800451c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004376:	bf00      	nop
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
	...

080043d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a46      	ldr	r2, [pc, #280]	@ (80044fc <TIM_Base_SetConfig+0x12c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d013      	beq.n	8004410 <TIM_Base_SetConfig+0x40>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ee:	d00f      	beq.n	8004410 <TIM_Base_SetConfig+0x40>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a43      	ldr	r2, [pc, #268]	@ (8004500 <TIM_Base_SetConfig+0x130>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00b      	beq.n	8004410 <TIM_Base_SetConfig+0x40>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a42      	ldr	r2, [pc, #264]	@ (8004504 <TIM_Base_SetConfig+0x134>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d007      	beq.n	8004410 <TIM_Base_SetConfig+0x40>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a41      	ldr	r2, [pc, #260]	@ (8004508 <TIM_Base_SetConfig+0x138>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d003      	beq.n	8004410 <TIM_Base_SetConfig+0x40>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a40      	ldr	r2, [pc, #256]	@ (800450c <TIM_Base_SetConfig+0x13c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d108      	bne.n	8004422 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	4313      	orrs	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a35      	ldr	r2, [pc, #212]	@ (80044fc <TIM_Base_SetConfig+0x12c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d01f      	beq.n	800446a <TIM_Base_SetConfig+0x9a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004430:	d01b      	beq.n	800446a <TIM_Base_SetConfig+0x9a>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a32      	ldr	r2, [pc, #200]	@ (8004500 <TIM_Base_SetConfig+0x130>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d017      	beq.n	800446a <TIM_Base_SetConfig+0x9a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a31      	ldr	r2, [pc, #196]	@ (8004504 <TIM_Base_SetConfig+0x134>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d013      	beq.n	800446a <TIM_Base_SetConfig+0x9a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a30      	ldr	r2, [pc, #192]	@ (8004508 <TIM_Base_SetConfig+0x138>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d00f      	beq.n	800446a <TIM_Base_SetConfig+0x9a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a2f      	ldr	r2, [pc, #188]	@ (800450c <TIM_Base_SetConfig+0x13c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00b      	beq.n	800446a <TIM_Base_SetConfig+0x9a>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a2e      	ldr	r2, [pc, #184]	@ (8004510 <TIM_Base_SetConfig+0x140>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d007      	beq.n	800446a <TIM_Base_SetConfig+0x9a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a2d      	ldr	r2, [pc, #180]	@ (8004514 <TIM_Base_SetConfig+0x144>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d003      	beq.n	800446a <TIM_Base_SetConfig+0x9a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a2c      	ldr	r2, [pc, #176]	@ (8004518 <TIM_Base_SetConfig+0x148>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d108      	bne.n	800447c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4313      	orrs	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a16      	ldr	r2, [pc, #88]	@ (80044fc <TIM_Base_SetConfig+0x12c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00f      	beq.n	80044c8 <TIM_Base_SetConfig+0xf8>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a18      	ldr	r2, [pc, #96]	@ (800450c <TIM_Base_SetConfig+0x13c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d00b      	beq.n	80044c8 <TIM_Base_SetConfig+0xf8>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a17      	ldr	r2, [pc, #92]	@ (8004510 <TIM_Base_SetConfig+0x140>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d007      	beq.n	80044c8 <TIM_Base_SetConfig+0xf8>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a16      	ldr	r2, [pc, #88]	@ (8004514 <TIM_Base_SetConfig+0x144>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d003      	beq.n	80044c8 <TIM_Base_SetConfig+0xf8>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a15      	ldr	r2, [pc, #84]	@ (8004518 <TIM_Base_SetConfig+0x148>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d103      	bne.n	80044d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d105      	bne.n	80044ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f023 0201 	bic.w	r2, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	611a      	str	r2, [r3, #16]
  }
}
 80044ee:	bf00      	nop
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40010000 	.word	0x40010000
 8004500:	40000400 	.word	0x40000400
 8004504:	40000800 	.word	0x40000800
 8004508:	40000c00 	.word	0x40000c00
 800450c:	40010400 	.word	0x40010400
 8004510:	40014000 	.word	0x40014000
 8004514:	40014400 	.word	0x40014400
 8004518:	40014800 	.word	0x40014800

0800451c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6819      	ldr	r1, [r3, #0]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	fb03 f203 	mul.w	r2, r3, r3
 800456e:	4613      	mov	r3, r2
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	4413      	add	r3, r2
 8004574:	43db      	mvns	r3, r3
 8004576:	ea01 0203 	and.w	r2, r1, r3
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	fb03 f303 	mul.w	r3, r3, r3
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	fb01 f303 	mul.w	r3, r1, r3
 8004586:	431a      	orrs	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	601a      	str	r2, [r3, #0]
}
 800458c:	bf00      	nop
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	43db      	mvns	r3, r3
 80045ac:	401a      	ands	r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	fb01 f303 	mul.w	r3, r1, r3
 80045b6:	431a      	orrs	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	605a      	str	r2, [r3, #4]
}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6899      	ldr	r1, [r3, #8]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	fb03 f203 	mul.w	r2, r3, r3
 80045de:	4613      	mov	r3, r2
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	4413      	add	r3, r2
 80045e4:	43db      	mvns	r3, r3
 80045e6:	ea01 0203 	and.w	r2, r1, r3
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	fb03 f303 	mul.w	r3, r3, r3
 80045f0:	6879      	ldr	r1, [r7, #4]
 80045f2:	fb01 f303 	mul.w	r3, r1, r3
 80045f6:	431a      	orrs	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	609a      	str	r2, [r3, #8]
}
 80045fc:	bf00      	nop
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	68d9      	ldr	r1, [r3, #12]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	fb03 f203 	mul.w	r2, r3, r3
 800461e:	4613      	mov	r3, r2
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	4413      	add	r3, r2
 8004624:	43db      	mvns	r3, r3
 8004626:	ea01 0203 	and.w	r2, r1, r3
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	fb03 f303 	mul.w	r3, r3, r3
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	fb01 f303 	mul.w	r3, r1, r3
 8004636:	431a      	orrs	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	60da      	str	r2, [r3, #12]
}
 800463c:	bf00      	nop
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a19      	ldr	r1, [r3, #32]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	fb03 f303 	mul.w	r3, r3, r3
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	fb02 f303 	mul.w	r3, r2, r3
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	fb03 f202 	mul.w	r2, r3, r2
 800466a:	4613      	mov	r3, r2
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	1a9b      	subs	r3, r3, r2
 8004670:	43db      	mvns	r3, r3
 8004672:	ea01 0203 	and.w	r2, r1, r3
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	fb03 f303 	mul.w	r3, r3, r3
 800467c:	68b9      	ldr	r1, [r7, #8]
 800467e:	fb01 f303 	mul.w	r3, r1, r3
 8004682:	68b9      	ldr	r1, [r7, #8]
 8004684:	fb01 f303 	mul.w	r3, r1, r3
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	fb01 f303 	mul.w	r3, r1, r3
 800468e:	431a      	orrs	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8004694:	bf00      	nop
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	0a1b      	lsrs	r3, r3, #8
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	0a12      	lsrs	r2, r2, #8
 80046b8:	fb02 f303 	mul.w	r3, r2, r3
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	0a12      	lsrs	r2, r2, #8
 80046c0:	fb02 f303 	mul.w	r3, r2, r3
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	0a12      	lsrs	r2, r2, #8
 80046c8:	fb03 f202 	mul.w	r2, r3, r2
 80046cc:	4613      	mov	r3, r2
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	43db      	mvns	r3, r3
 80046d4:	ea01 0203 	and.w	r2, r1, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	0a1b      	lsrs	r3, r3, #8
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	0a09      	lsrs	r1, r1, #8
 80046e0:	fb01 f303 	mul.w	r3, r1, r3
 80046e4:	68b9      	ldr	r1, [r7, #8]
 80046e6:	0a09      	lsrs	r1, r1, #8
 80046e8:	fb01 f303 	mul.w	r3, r1, r3
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	0a09      	lsrs	r1, r1, #8
 80046f0:	fb01 f303 	mul.w	r3, r1, r3
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	fb01 f303 	mul.w	r3, r1, r3
 80046fa:	431a      	orrs	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8004700:	bf00      	nop
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	fa93 f3a3 	rbit	r3, r3
 8004722:	60fb      	str	r3, [r7, #12]
  return result;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <LL_GPIO_Init+0x26>
    return 32U;
 800472e:	2320      	movs	r3, #32
 8004730:	e003      	b.n	800473a <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	fab3 f383 	clz	r3, r3
 8004738:	b2db      	uxtb	r3, r3
 800473a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800473c:	e048      	b.n	80047d0 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	2101      	movs	r1, #1
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	fa01 f303 	lsl.w	r3, r1, r3
 800474a:	4013      	ands	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d03a      	beq.n	80047ca <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d003      	beq.n	8004764 <LL_GPIO_Init+0x58>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2b02      	cmp	r3, #2
 8004762:	d10e      	bne.n	8004782 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	461a      	mov	r2, r3
 800476a:	69b9      	ldr	r1, [r7, #24]
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7ff ff2b 	bl	80045c8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	6819      	ldr	r1, [r3, #0]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	461a      	mov	r2, r3
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff ff0b 	bl	8004598 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	461a      	mov	r2, r3
 8004788:	69b9      	ldr	r1, [r7, #24]
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff ff3c 	bl	8004608 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b02      	cmp	r3, #2
 8004796:	d111      	bne.n	80047bc <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	2bff      	cmp	r3, #255	@ 0xff
 800479c:	d807      	bhi.n	80047ae <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	461a      	mov	r2, r3
 80047a4:	69b9      	ldr	r1, [r7, #24]
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7ff ff4e 	bl	8004648 <LL_GPIO_SetAFPin_0_7>
 80047ac:	e006      	b.n	80047bc <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	461a      	mov	r2, r3
 80047b4:	69b9      	ldr	r1, [r7, #24]
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff ff72 	bl	80046a0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	461a      	mov	r2, r3
 80047c2:	69b9      	ldr	r1, [r7, #24]
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7ff fec7 	bl	8004558 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	3301      	adds	r3, #1
 80047ce:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	fa22 f303 	lsr.w	r3, r2, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1af      	bne.n	800473e <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3720      	adds	r7, #32
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80047ec:	4b07      	ldr	r3, [pc, #28]	@ (800480c <LL_RCC_HSE_IsReady+0x24>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047f8:	d101      	bne.n	80047fe <LL_RCC_HSE_IsReady+0x16>
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <LL_RCC_HSE_IsReady+0x18>
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	58024400 	.word	0x58024400

08004810 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004814:	4b06      	ldr	r3, [pc, #24]	@ (8004830 <LL_RCC_HSI_IsReady+0x20>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b04      	cmp	r3, #4
 800481e:	d101      	bne.n	8004824 <LL_RCC_HSI_IsReady+0x14>
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <LL_RCC_HSI_IsReady+0x16>
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	58024400 	.word	0x58024400

08004834 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8004838:	4b04      	ldr	r3, [pc, #16]	@ (800484c <LL_RCC_HSI_GetDivider+0x18>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0318 	and.w	r3, r3, #24
}
 8004840:	4618      	mov	r0, r3
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	58024400 	.word	0x58024400

08004850 <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 8004854:	4b07      	ldr	r3, [pc, #28]	@ (8004874 <LL_RCC_CSI_IsReady+0x24>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800485c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004860:	d101      	bne.n	8004866 <LL_RCC_CSI_IsReady+0x16>
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <LL_RCC_CSI_IsReady+0x18>
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	58024400 	.word	0x58024400

08004878 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800487c:	4b06      	ldr	r3, [pc, #24]	@ (8004898 <LL_RCC_LSE_IsReady+0x20>)
 800487e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b02      	cmp	r3, #2
 8004886:	d101      	bne.n	800488c <LL_RCC_LSE_IsReady+0x14>
 8004888:	2301      	movs	r3, #1
 800488a:	e000      	b.n	800488e <LL_RCC_LSE_IsReady+0x16>
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	58024400 	.word	0x58024400

0800489c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80048a0:	4b04      	ldr	r3, [pc, #16]	@ (80048b4 <LL_RCC_GetSysClkSource+0x18>)
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	58024400 	.word	0x58024400

080048b8 <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 80048bc:	4b04      	ldr	r3, [pc, #16]	@ (80048d0 <LL_RCC_GetSysPrescaler+0x18>)
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	58024400 	.word	0x58024400

080048d4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 80048d8:	4b04      	ldr	r3, [pc, #16]	@ (80048ec <LL_RCC_GetAHBPrescaler+0x18>)
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	58024400 	.word	0x58024400

080048f0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 80048f4:	4b04      	ldr	r3, [pc, #16]	@ (8004908 <LL_RCC_GetAPB1Prescaler+0x18>)
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	58024400 	.word	0x58024400

0800490c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 8004910:	4b04      	ldr	r3, [pc, #16]	@ (8004924 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 8004918:	4618      	mov	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	58024400 	.word	0x58024400

08004928 <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	b2da      	uxtb	r2, r3
 8004934:	4b0e      	ldr	r3, [pc, #56]	@ (8004970 <LL_RCC_GetClockSource+0x48>)
 8004936:	4413      	add	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	0e19      	lsrs	r1, r3, #24
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	0a1b      	lsrs	r3, r3, #8
 8004946:	f003 031f 	and.w	r3, r3, #31
 800494a:	fa01 f303 	lsl.w	r3, r1, r3
 800494e:	401a      	ands	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	0a1b      	lsrs	r3, r3, #8
 8004954:	f003 031f 	and.w	r3, r3, #31
 8004958:	fa22 f303 	lsr.w	r3, r2, r3
 800495c:	041a      	lsls	r2, r3, #16
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4313      	orrs	r3, r2
}
 8004962:	4618      	mov	r0, r3
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	5802444c 	.word	0x5802444c

08004974 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff ffd3 	bl	8004928 <LL_RCC_GetClockSource>
 8004982:	4603      	mov	r3, r0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8004990:	4b04      	ldr	r3, [pc, #16]	@ (80049a4 <LL_RCC_PLL_GetSource+0x18>)
 8004992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004994:	f003 0303 	and.w	r3, r3, #3
}
 8004998:	4618      	mov	r0, r3
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	58024400 	.word	0x58024400

080049a8 <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 80049ac:	4b07      	ldr	r3, [pc, #28]	@ (80049cc <LL_RCC_PLL1P_IsEnabled+0x24>)
 80049ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049b8:	d101      	bne.n	80049be <LL_RCC_PLL1P_IsEnabled+0x16>
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <LL_RCC_PLL1P_IsEnabled+0x18>
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	58024400 	.word	0x58024400

080049d0 <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 80049d4:	4b07      	ldr	r3, [pc, #28]	@ (80049f4 <LL_RCC_PLL1Q_IsEnabled+0x24>)
 80049d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049e0:	d101      	bne.n	80049e6 <LL_RCC_PLL1Q_IsEnabled+0x16>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <LL_RCC_PLL1Q_IsEnabled+0x18>
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	58024400 	.word	0x58024400

080049f8 <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 80049fc:	4b07      	ldr	r3, [pc, #28]	@ (8004a1c <LL_RCC_PLL1R_IsEnabled+0x24>)
 80049fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a08:	d101      	bne.n	8004a0e <LL_RCC_PLL1R_IsEnabled+0x16>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <LL_RCC_PLL1R_IsEnabled+0x18>
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	58024400 	.word	0x58024400

08004a20 <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 8004a24:	4b06      	ldr	r3, [pc, #24]	@ (8004a40 <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 8004a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	58024400 	.word	0x58024400

08004a44 <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 8004a48:	4b04      	ldr	r3, [pc, #16]	@ (8004a5c <LL_RCC_PLL1_GetN+0x18>)
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a50:	3301      	adds	r3, #1
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	58024400 	.word	0x58024400

08004a60 <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 8004a64:	4b04      	ldr	r3, [pc, #16]	@ (8004a78 <LL_RCC_PLL1_GetM+0x18>)
 8004a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a68:	091b      	lsrs	r3, r3, #4
 8004a6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	58024400 	.word	0x58024400

08004a7c <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 8004a80:	4b05      	ldr	r3, [pc, #20]	@ (8004a98 <LL_RCC_PLL1_GetP+0x1c>)
 8004a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a84:	0a5b      	lsrs	r3, r3, #9
 8004a86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a8a:	3301      	adds	r3, #1
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	58024400 	.word	0x58024400

08004a9c <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 8004aa0:	4b05      	ldr	r3, [pc, #20]	@ (8004ab8 <LL_RCC_PLL1_GetQ+0x1c>)
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa4:	0c1b      	lsrs	r3, r3, #16
 8004aa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004aaa:	3301      	adds	r3, #1
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	58024400 	.word	0x58024400

08004abc <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 8004ac0:	4b05      	ldr	r3, [pc, #20]	@ (8004ad8 <LL_RCC_PLL1_GetR+0x1c>)
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac4:	0e1b      	lsrs	r3, r3, #24
 8004ac6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004aca:	3301      	adds	r3, #1
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	58024400 	.word	0x58024400

08004adc <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 8004ae0:	4b04      	ldr	r3, [pc, #16]	@ (8004af4 <LL_RCC_PLL1_GetFRACN+0x18>)
 8004ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae4:	08db      	lsrs	r3, r3, #3
 8004ae6:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	58024400 	.word	0x58024400

08004af8 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 8004afc:	4b07      	ldr	r3, [pc, #28]	@ (8004b1c <LL_RCC_PLL2_IsReady+0x24>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b08:	d101      	bne.n	8004b0e <LL_RCC_PLL2_IsReady+0x16>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <LL_RCC_PLL2_IsReady+0x18>
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	58024400 	.word	0x58024400

08004b20 <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 8004b24:	4b07      	ldr	r3, [pc, #28]	@ (8004b44 <LL_RCC_PLL2P_IsEnabled+0x24>)
 8004b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b2c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004b30:	d101      	bne.n	8004b36 <LL_RCC_PLL2P_IsEnabled+0x16>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <LL_RCC_PLL2P_IsEnabled+0x18>
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	58024400 	.word	0x58024400

08004b48 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 8004b4c:	4b07      	ldr	r3, [pc, #28]	@ (8004b6c <LL_RCC_PLL2Q_IsEnabled+0x24>)
 8004b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b58:	d101      	bne.n	8004b5e <LL_RCC_PLL2Q_IsEnabled+0x16>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e000      	b.n	8004b60 <LL_RCC_PLL2Q_IsEnabled+0x18>
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	58024400 	.word	0x58024400

08004b70 <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 8004b74:	4b07      	ldr	r3, [pc, #28]	@ (8004b94 <LL_RCC_PLL2R_IsEnabled+0x24>)
 8004b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b80:	d101      	bne.n	8004b86 <LL_RCC_PLL2R_IsEnabled+0x16>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e000      	b.n	8004b88 <LL_RCC_PLL2R_IsEnabled+0x18>
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	58024400 	.word	0x58024400

08004b98 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 8004b9c:	4b06      	ldr	r3, [pc, #24]	@ (8004bb8 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 8004b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	2b10      	cmp	r3, #16
 8004ba6:	d101      	bne.n	8004bac <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	58024400 	.word	0x58024400

08004bbc <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 8004bc0:	4b04      	ldr	r3, [pc, #16]	@ (8004bd4 <LL_RCC_PLL2_GetN+0x18>)
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc8:	3301      	adds	r3, #1
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	58024400 	.word	0x58024400

08004bd8 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 8004bdc:	4b04      	ldr	r3, [pc, #16]	@ (8004bf0 <LL_RCC_PLL2_GetM+0x18>)
 8004bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be0:	0b1b      	lsrs	r3, r3, #12
 8004be2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	58024400 	.word	0x58024400

08004bf4 <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 8004bf8:	4b05      	ldr	r3, [pc, #20]	@ (8004c10 <LL_RCC_PLL2_GetP+0x1c>)
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bfc:	0a5b      	lsrs	r3, r3, #9
 8004bfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c02:	3301      	adds	r3, #1
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	58024400 	.word	0x58024400

08004c14 <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 8004c18:	4b05      	ldr	r3, [pc, #20]	@ (8004c30 <LL_RCC_PLL2_GetQ+0x1c>)
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1c:	0c1b      	lsrs	r3, r3, #16
 8004c1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c22:	3301      	adds	r3, #1
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	58024400 	.word	0x58024400

08004c34 <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 8004c38:	4b05      	ldr	r3, [pc, #20]	@ (8004c50 <LL_RCC_PLL2_GetR+0x1c>)
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3c:	0e1b      	lsrs	r3, r3, #24
 8004c3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c42:	3301      	adds	r3, #1
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	58024400 	.word	0x58024400

08004c54 <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 8004c58:	4b04      	ldr	r3, [pc, #16]	@ (8004c6c <LL_RCC_PLL2_GetFRACN+0x18>)
 8004c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5c:	08db      	lsrs	r3, r3, #3
 8004c5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	58024400 	.word	0x58024400

08004c70 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 8004c74:	4b07      	ldr	r3, [pc, #28]	@ (8004c94 <LL_RCC_PLL3_IsReady+0x24>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c80:	d101      	bne.n	8004c86 <LL_RCC_PLL3_IsReady+0x16>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <LL_RCC_PLL3_IsReady+0x18>
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	58024400 	.word	0x58024400

08004c98 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 8004c9c:	4b07      	ldr	r3, [pc, #28]	@ (8004cbc <LL_RCC_PLL3P_IsEnabled+0x24>)
 8004c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ca4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ca8:	d101      	bne.n	8004cae <LL_RCC_PLL3P_IsEnabled+0x16>
 8004caa:	2301      	movs	r3, #1
 8004cac:	e000      	b.n	8004cb0 <LL_RCC_PLL3P_IsEnabled+0x18>
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	58024400 	.word	0x58024400

08004cc0 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 8004cc4:	4b07      	ldr	r3, [pc, #28]	@ (8004ce4 <LL_RCC_PLL3Q_IsEnabled+0x24>)
 8004cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ccc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004cd0:	d101      	bne.n	8004cd6 <LL_RCC_PLL3Q_IsEnabled+0x16>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <LL_RCC_PLL3Q_IsEnabled+0x18>
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	58024400 	.word	0x58024400

08004ce8 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 8004cec:	4b07      	ldr	r3, [pc, #28]	@ (8004d0c <LL_RCC_PLL3R_IsEnabled+0x24>)
 8004cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cf8:	d101      	bne.n	8004cfe <LL_RCC_PLL3R_IsEnabled+0x16>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <LL_RCC_PLL3R_IsEnabled+0x18>
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	58024400 	.word	0x58024400

08004d10 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 8004d14:	4b07      	ldr	r3, [pc, #28]	@ (8004d34 <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 8004d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d20:	d101      	bne.n	8004d26 <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 8004d22:	2301      	movs	r3, #1
 8004d24:	e000      	b.n	8004d28 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	58024400 	.word	0x58024400

08004d38 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8004d3c:	4b04      	ldr	r3, [pc, #16]	@ (8004d50 <LL_RCC_PLL3_GetN+0x18>)
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d44:	3301      	adds	r3, #1
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	58024400 	.word	0x58024400

08004d54 <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 8004d58:	4b04      	ldr	r3, [pc, #16]	@ (8004d6c <LL_RCC_PLL3_GetM+0x18>)
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5c:	0d1b      	lsrs	r3, r3, #20
 8004d5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	58024400 	.word	0x58024400

08004d70 <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 8004d74:	4b05      	ldr	r3, [pc, #20]	@ (8004d8c <LL_RCC_PLL3_GetP+0x1c>)
 8004d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d78:	0a5b      	lsrs	r3, r3, #9
 8004d7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d7e:	3301      	adds	r3, #1
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	58024400 	.word	0x58024400

08004d90 <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 8004d94:	4b05      	ldr	r3, [pc, #20]	@ (8004dac <LL_RCC_PLL3_GetQ+0x1c>)
 8004d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d98:	0c1b      	lsrs	r3, r3, #16
 8004d9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d9e:	3301      	adds	r3, #1
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	58024400 	.word	0x58024400

08004db0 <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 8004db4:	4b05      	ldr	r3, [pc, #20]	@ (8004dcc <LL_RCC_PLL3_GetR+0x1c>)
 8004db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db8:	0e1b      	lsrs	r3, r3, #24
 8004dba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dbe:	3301      	adds	r3, #1
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	58024400 	.word	0x58024400

08004dd0 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 8004dd4:	4b04      	ldr	r3, [pc, #16]	@ (8004de8 <LL_RCC_PLL3_GetFRACN+0x18>)
 8004dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd8:	08db      	lsrs	r3, r3, #3
 8004dda:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	58024400 	.word	0x58024400

08004dec <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08a      	sub	sp, #40	@ 0x28
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8004dfc:	f7ff fdc6 	bl	800498c <LL_RCC_PLL_GetSource>
 8004e00:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d01f      	beq.n	8004e48 <LL_RCC_GetPLL1ClockFreq+0x5c>
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d824      	bhi.n	8004e58 <LL_RCC_GetPLL1ClockFreq+0x6c>
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <LL_RCC_GetPLL1ClockFreq+0x30>
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d00e      	beq.n	8004e38 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8004e1a:	e01d      	b.n	8004e58 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8004e1c:	f7ff fcf8 	bl	8004810 <LL_RCC_HSI_IsReady>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d01a      	beq.n	8004e5c <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8004e26:	f7ff fd05 	bl	8004834 <LL_RCC_HSI_GetDivider>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	08db      	lsrs	r3, r3, #3
 8004e2e:	4a38      	ldr	r2, [pc, #224]	@ (8004f10 <LL_RCC_GetPLL1ClockFreq+0x124>)
 8004e30:	fa22 f303 	lsr.w	r3, r2, r3
 8004e34:	61fb      	str	r3, [r7, #28]
      break;
 8004e36:	e011      	b.n	8004e5c <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8004e38:	f7ff fd0a 	bl	8004850 <LL_RCC_CSI_IsReady>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00e      	beq.n	8004e60 <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8004e42:	4b34      	ldr	r3, [pc, #208]	@ (8004f14 <LL_RCC_GetPLL1ClockFreq+0x128>)
 8004e44:	61fb      	str	r3, [r7, #28]
      break;
 8004e46:	e00b      	b.n	8004e60 <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8004e48:	f7ff fcce 	bl	80047e8 <LL_RCC_HSE_IsReady>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d008      	beq.n	8004e64 <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8004e52:	4b31      	ldr	r3, [pc, #196]	@ (8004f18 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 8004e54:	61fb      	str	r3, [r7, #28]
      break;
 8004e56:	e005      	b.n	8004e64 <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 8004e58:	bf00      	nop
 8004e5a:	e004      	b.n	8004e66 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8004e5c:	bf00      	nop
 8004e5e:	e002      	b.n	8004e66 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8004e60:	bf00      	nop
 8004e62:	e000      	b.n	8004e66 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8004e64:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 8004e78:	f7ff fdf2 	bl	8004a60 <LL_RCC_PLL1_GetM>
 8004e7c:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 8004e7e:	f7ff fde1 	bl	8004a44 <LL_RCC_PLL1_GetN>
 8004e82:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 8004e84:	f7ff fdcc 	bl	8004a20 <LL_RCC_PLL1FRACN_IsEnabled>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 8004e8e:	f7ff fe25 	bl	8004adc <LL_RCC_PLL1_GetFRACN>
 8004e92:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d035      	beq.n	8004f06 <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 8004e9a:	f7ff fd85 	bl	80049a8 <LL_RCC_PLL1P_IsEnabled>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00c      	beq.n	8004ebe <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 8004ea4:	f7ff fdea 	bl	8004a7c <LL_RCC_PLL1_GetP>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	6939      	ldr	r1, [r7, #16]
 8004eb2:	69f8      	ldr	r0, [r7, #28]
 8004eb4:	f000 f964 	bl	8005180 <LL_RCC_CalcPLLClockFreq>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 8004ebe:	f7ff fd87 	bl	80049d0 <LL_RCC_PLL1Q_IsEnabled>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00c      	beq.n	8004ee2 <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 8004ec8:	f7ff fde8 	bl	8004a9c <LL_RCC_PLL1_GetQ>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	6939      	ldr	r1, [r7, #16]
 8004ed6:	69f8      	ldr	r0, [r7, #28]
 8004ed8:	f000 f952 	bl	8005180 <LL_RCC_CalcPLLClockFreq>
 8004edc:	4602      	mov	r2, r0
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 8004ee2:	f7ff fd89 	bl	80049f8 <LL_RCC_PLL1R_IsEnabled>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00c      	beq.n	8004f06 <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 8004eec:	f7ff fde6 	bl	8004abc <LL_RCC_PLL1_GetR>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	6939      	ldr	r1, [r7, #16]
 8004efa:	69f8      	ldr	r0, [r7, #28]
 8004efc:	f000 f940 	bl	8005180 <LL_RCC_CalcPLLClockFreq>
 8004f00:	4602      	mov	r2, r0
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	609a      	str	r2, [r3, #8]
    }
  }
}
 8004f06:	bf00      	nop
 8004f08:	3720      	adds	r7, #32
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	03d09000 	.word	0x03d09000
 8004f14:	003d0900 	.word	0x003d0900
 8004f18:	017d7840 	.word	0x017d7840

08004f1c <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08a      	sub	sp, #40	@ 0x28
 8004f20:	af02      	add	r7, sp, #8
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8004f24:	2300      	movs	r3, #0
 8004f26:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8004f2c:	f7ff fd2e 	bl	800498c <LL_RCC_PLL_GetSource>
 8004f30:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d01f      	beq.n	8004f78 <LL_RCC_GetPLL2ClockFreq+0x5c>
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d824      	bhi.n	8004f88 <LL_RCC_GetPLL2ClockFreq+0x6c>
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <LL_RCC_GetPLL2ClockFreq+0x30>
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d00e      	beq.n	8004f68 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8004f4a:	e01d      	b.n	8004f88 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8004f4c:	f7ff fc60 	bl	8004810 <LL_RCC_HSI_IsReady>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d01a      	beq.n	8004f8c <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8004f56:	f7ff fc6d 	bl	8004834 <LL_RCC_HSI_GetDivider>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	08db      	lsrs	r3, r3, #3
 8004f5e:	4a38      	ldr	r2, [pc, #224]	@ (8005040 <LL_RCC_GetPLL2ClockFreq+0x124>)
 8004f60:	fa22 f303 	lsr.w	r3, r2, r3
 8004f64:	61fb      	str	r3, [r7, #28]
      break;
 8004f66:	e011      	b.n	8004f8c <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8004f68:	f7ff fc72 	bl	8004850 <LL_RCC_CSI_IsReady>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00e      	beq.n	8004f90 <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8004f72:	4b34      	ldr	r3, [pc, #208]	@ (8005044 <LL_RCC_GetPLL2ClockFreq+0x128>)
 8004f74:	61fb      	str	r3, [r7, #28]
      break;
 8004f76:	e00b      	b.n	8004f90 <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8004f78:	f7ff fc36 	bl	80047e8 <LL_RCC_HSE_IsReady>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d008      	beq.n	8004f94 <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8004f82:	4b31      	ldr	r3, [pc, #196]	@ (8005048 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 8004f84:	61fb      	str	r3, [r7, #28]
      break;
 8004f86:	e005      	b.n	8004f94 <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 8004f88:	bf00      	nop
 8004f8a:	e004      	b.n	8004f96 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8004f8c:	bf00      	nop
 8004f8e:	e002      	b.n	8004f96 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8004f90:	bf00      	nop
 8004f92:	e000      	b.n	8004f96 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8004f94:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 8004fa8:	f7ff fe16 	bl	8004bd8 <LL_RCC_PLL2_GetM>
 8004fac:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 8004fae:	f7ff fe05 	bl	8004bbc <LL_RCC_PLL2_GetN>
 8004fb2:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 8004fb4:	f7ff fdf0 	bl	8004b98 <LL_RCC_PLL2FRACN_IsEnabled>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d002      	beq.n	8004fc4 <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 8004fbe:	f7ff fe49 	bl	8004c54 <LL_RCC_PLL2_GetFRACN>
 8004fc2:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d035      	beq.n	8005036 <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 8004fca:	f7ff fda9 	bl	8004b20 <LL_RCC_PLL2P_IsEnabled>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00c      	beq.n	8004fee <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 8004fd4:	f7ff fe0e 	bl	8004bf4 <LL_RCC_PLL2_GetP>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	6939      	ldr	r1, [r7, #16]
 8004fe2:	69f8      	ldr	r0, [r7, #28]
 8004fe4:	f000 f8cc 	bl	8005180 <LL_RCC_CalcPLLClockFreq>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8004fee:	f7ff fdab 	bl	8004b48 <LL_RCC_PLL2Q_IsEnabled>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00c      	beq.n	8005012 <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 8004ff8:	f7ff fe0c 	bl	8004c14 <LL_RCC_PLL2_GetQ>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	6939      	ldr	r1, [r7, #16]
 8005006:	69f8      	ldr	r0, [r7, #28]
 8005008:	f000 f8ba 	bl	8005180 <LL_RCC_CalcPLLClockFreq>
 800500c:	4602      	mov	r2, r0
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 8005012:	f7ff fdad 	bl	8004b70 <LL_RCC_PLL2R_IsEnabled>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00c      	beq.n	8005036 <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 800501c:	f7ff fe0a 	bl	8004c34 <LL_RCC_PLL2_GetR>
 8005020:	4603      	mov	r3, r0
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	6939      	ldr	r1, [r7, #16]
 800502a:	69f8      	ldr	r0, [r7, #28]
 800502c:	f000 f8a8 	bl	8005180 <LL_RCC_CalcPLLClockFreq>
 8005030:	4602      	mov	r2, r0
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	609a      	str	r2, [r3, #8]
    }
  }
}
 8005036:	bf00      	nop
 8005038:	3720      	adds	r7, #32
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	03d09000 	.word	0x03d09000
 8005044:	003d0900 	.word	0x003d0900
 8005048:	017d7840 	.word	0x017d7840

0800504c <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08a      	sub	sp, #40	@ 0x28
 8005050:	af02      	add	r7, sp, #8
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8005054:	2300      	movs	r3, #0
 8005056:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800505c:	f7ff fc96 	bl	800498c <LL_RCC_PLL_GetSource>
 8005060:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2b02      	cmp	r3, #2
 8005066:	d01f      	beq.n	80050a8 <LL_RCC_GetPLL3ClockFreq+0x5c>
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2b02      	cmp	r3, #2
 800506c:	d824      	bhi.n	80050b8 <LL_RCC_GetPLL3ClockFreq+0x6c>
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <LL_RCC_GetPLL3ClockFreq+0x30>
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d00e      	beq.n	8005098 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800507a:	e01d      	b.n	80050b8 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800507c:	f7ff fbc8 	bl	8004810 <LL_RCC_HSI_IsReady>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d01a      	beq.n	80050bc <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8005086:	f7ff fbd5 	bl	8004834 <LL_RCC_HSI_GetDivider>
 800508a:	4603      	mov	r3, r0
 800508c:	08db      	lsrs	r3, r3, #3
 800508e:	4a39      	ldr	r2, [pc, #228]	@ (8005174 <LL_RCC_GetPLL3ClockFreq+0x128>)
 8005090:	fa22 f303 	lsr.w	r3, r2, r3
 8005094:	61fb      	str	r3, [r7, #28]
      break;
 8005096:	e011      	b.n	80050bc <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8005098:	f7ff fbda 	bl	8004850 <LL_RCC_CSI_IsReady>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00e      	beq.n	80050c0 <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 80050a2:	4b35      	ldr	r3, [pc, #212]	@ (8005178 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 80050a4:	61fb      	str	r3, [r7, #28]
      break;
 80050a6:	e00b      	b.n	80050c0 <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 80050a8:	f7ff fb9e 	bl	80047e8 <LL_RCC_HSE_IsReady>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d008      	beq.n	80050c4 <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 80050b2:	4b32      	ldr	r3, [pc, #200]	@ (800517c <LL_RCC_GetPLL3ClockFreq+0x130>)
 80050b4:	61fb      	str	r3, [r7, #28]
      break;
 80050b6:	e005      	b.n	80050c4 <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 80050b8:	bf00      	nop
 80050ba:	e004      	b.n	80050c6 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 80050bc:	bf00      	nop
 80050be:	e002      	b.n	80050c6 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 80050c0:	bf00      	nop
 80050c2:	e000      	b.n	80050c6 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 80050c4:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 80050d8:	f7ff fe3c 	bl	8004d54 <LL_RCC_PLL3_GetM>
 80050dc:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 80050de:	f7ff fe2b 	bl	8004d38 <LL_RCC_PLL3_GetN>
 80050e2:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 80050e4:	f7ff fe14 	bl	8004d10 <LL_RCC_PLL3FRACN_IsEnabled>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 80050ee:	f7ff fe6f 	bl	8004dd0 <LL_RCC_PLL3_GetFRACN>
 80050f2:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d038      	beq.n	800516c <LL_RCC_GetPLL3ClockFreq+0x120>
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d035      	beq.n	800516c <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 8005100:	f7ff fdca 	bl	8004c98 <LL_RCC_PLL3P_IsEnabled>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00c      	beq.n	8005124 <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 800510a:	f7ff fe31 	bl	8004d70 <LL_RCC_PLL3_GetP>
 800510e:	4603      	mov	r3, r0
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	6939      	ldr	r1, [r7, #16]
 8005118:	69f8      	ldr	r0, [r7, #28]
 800511a:	f000 f831 	bl	8005180 <LL_RCC_CalcPLLClockFreq>
 800511e:	4602      	mov	r2, r0
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8005124:	f7ff fdcc 	bl	8004cc0 <LL_RCC_PLL3Q_IsEnabled>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00c      	beq.n	8005148 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 800512e:	f7ff fe2f 	bl	8004d90 <LL_RCC_PLL3_GetQ>
 8005132:	4603      	mov	r3, r0
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	6939      	ldr	r1, [r7, #16]
 800513c:	69f8      	ldr	r0, [r7, #28]
 800513e:	f000 f81f 	bl	8005180 <LL_RCC_CalcPLLClockFreq>
 8005142:	4602      	mov	r2, r0
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 8005148:	f7ff fdce 	bl	8004ce8 <LL_RCC_PLL3R_IsEnabled>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00c      	beq.n	800516c <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 8005152:	f7ff fe2d 	bl	8004db0 <LL_RCC_PLL3_GetR>
 8005156:	4603      	mov	r3, r0
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	6939      	ldr	r1, [r7, #16]
 8005160:	69f8      	ldr	r0, [r7, #28]
 8005162:	f000 f80d 	bl	8005180 <LL_RCC_CalcPLLClockFreq>
 8005166:	4602      	mov	r2, r0
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	609a      	str	r2, [r3, #8]
    }
  }
}
 800516c:	bf00      	nop
 800516e:	3720      	adds	r7, #32
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	03d09000 	.word	0x03d09000
 8005178:	003d0900 	.word	0x003d0900
 800517c:	017d7840 	.word	0x017d7840

08005180 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
 800518c:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	ee07 3a90 	vmov	s15, r3
 8005194:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	ee07 3a90 	vmov	s15, r3
 80051ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	ee07 3a90 	vmov	s15, r3
 80051b6:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80051ba:	eddf 5a10 	vldr	s11, [pc, #64]	@ 80051fc <LL_RCC_CalcPLLClockFreq+0x7c>
 80051be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ca:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	ee07 3a90 	vmov	s15, r3
 80051d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051d8:	edd7 6a05 	vldr	s13, [r7, #20]
 80051dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051e0:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 80051e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80051e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051ec:	ee17 3a90 	vmov	r3, s15
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	46000000 	.word	0x46000000

08005200 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8005200:	b590      	push	{r4, r7, lr}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005208:	2300      	movs	r3, #0
 800520a:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7ff fbb1 	bl	8004974 <LL_RCC_GetUSARTClockSource>
 8005212:	4603      	mov	r3, r0
 8005214:	4a62      	ldr	r2, [pc, #392]	@ (80053a0 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	f000 80a9 	beq.w	800536e <LL_RCC_GetUSARTClockFreq+0x16e>
 800521c:	4a60      	ldr	r2, [pc, #384]	@ (80053a0 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 800521e:	4293      	cmp	r3, r2
 8005220:	f200 80ae 	bhi.w	8005380 <LL_RCC_GetUSARTClockFreq+0x180>
 8005224:	4a5f      	ldr	r2, [pc, #380]	@ (80053a4 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 8005226:	4293      	cmp	r3, r2
 8005228:	f000 80a1 	beq.w	800536e <LL_RCC_GetUSARTClockFreq+0x16e>
 800522c:	4a5d      	ldr	r2, [pc, #372]	@ (80053a4 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 800522e:	4293      	cmp	r3, r2
 8005230:	f200 80a6 	bhi.w	8005380 <LL_RCC_GetUSARTClockFreq+0x180>
 8005234:	4a5c      	ldr	r2, [pc, #368]	@ (80053a8 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	f000 8091 	beq.w	800535e <LL_RCC_GetUSARTClockFreq+0x15e>
 800523c:	4a5a      	ldr	r2, [pc, #360]	@ (80053a8 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 800523e:	4293      	cmp	r3, r2
 8005240:	f200 809e 	bhi.w	8005380 <LL_RCC_GetUSARTClockFreq+0x180>
 8005244:	4a59      	ldr	r2, [pc, #356]	@ (80053ac <LL_RCC_GetUSARTClockFreq+0x1ac>)
 8005246:	4293      	cmp	r3, r2
 8005248:	f000 8089 	beq.w	800535e <LL_RCC_GetUSARTClockFreq+0x15e>
 800524c:	4a57      	ldr	r2, [pc, #348]	@ (80053ac <LL_RCC_GetUSARTClockFreq+0x1ac>)
 800524e:	4293      	cmp	r3, r2
 8005250:	f200 8096 	bhi.w	8005380 <LL_RCC_GetUSARTClockFreq+0x180>
 8005254:	4a56      	ldr	r2, [pc, #344]	@ (80053b0 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d073      	beq.n	8005342 <LL_RCC_GetUSARTClockFreq+0x142>
 800525a:	4a55      	ldr	r2, [pc, #340]	@ (80053b0 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	f200 808f 	bhi.w	8005380 <LL_RCC_GetUSARTClockFreq+0x180>
 8005262:	4a54      	ldr	r2, [pc, #336]	@ (80053b4 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d06c      	beq.n	8005342 <LL_RCC_GetUSARTClockFreq+0x142>
 8005268:	4a52      	ldr	r2, [pc, #328]	@ (80053b4 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800526a:	4293      	cmp	r3, r2
 800526c:	f200 8088 	bhi.w	8005380 <LL_RCC_GetUSARTClockFreq+0x180>
 8005270:	4a51      	ldr	r2, [pc, #324]	@ (80053b8 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d058      	beq.n	8005328 <LL_RCC_GetUSARTClockFreq+0x128>
 8005276:	4a50      	ldr	r2, [pc, #320]	@ (80053b8 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	f200 8081 	bhi.w	8005380 <LL_RCC_GetUSARTClockFreq+0x180>
 800527e:	4a4f      	ldr	r2, [pc, #316]	@ (80053bc <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d051      	beq.n	8005328 <LL_RCC_GetUSARTClockFreq+0x128>
 8005284:	4a4d      	ldr	r2, [pc, #308]	@ (80053bc <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d87a      	bhi.n	8005380 <LL_RCC_GetUSARTClockFreq+0x180>
 800528a:	4a4d      	ldr	r2, [pc, #308]	@ (80053c0 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d03e      	beq.n	800530e <LL_RCC_GetUSARTClockFreq+0x10e>
 8005290:	4a4b      	ldr	r2, [pc, #300]	@ (80053c0 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d874      	bhi.n	8005380 <LL_RCC_GetUSARTClockFreq+0x180>
 8005296:	4a4b      	ldr	r2, [pc, #300]	@ (80053c4 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d038      	beq.n	800530e <LL_RCC_GetUSARTClockFreq+0x10e>
 800529c:	4a49      	ldr	r2, [pc, #292]	@ (80053c4 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d86e      	bhi.n	8005380 <LL_RCC_GetUSARTClockFreq+0x180>
 80052a2:	4a49      	ldr	r2, [pc, #292]	@ (80053c8 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d01a      	beq.n	80052de <LL_RCC_GetUSARTClockFreq+0xde>
 80052a8:	4a48      	ldr	r2, [pc, #288]	@ (80053cc <LL_RCC_GetUSARTClockFreq+0x1cc>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d168      	bne.n	8005380 <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 80052ae:	f000 f895 	bl	80053dc <RCC_GetSystemClockFreq>
 80052b2:	4604      	mov	r4, r0
 80052b4:	f7ff fb00 	bl	80048b8 <LL_RCC_GetSysPrescaler>
 80052b8:	4603      	mov	r3, r0
 80052ba:	0a1b      	lsrs	r3, r3, #8
 80052bc:	f003 030f 	and.w	r3, r3, #15
 80052c0:	4a43      	ldr	r2, [pc, #268]	@ (80053d0 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 80052c2:	5cd3      	ldrb	r3, [r2, r3]
 80052c4:	f003 031f 	and.w	r3, r3, #31
 80052c8:	fa24 f303 	lsr.w	r3, r4, r3
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 f8e7 	bl	80054a0 <RCC_GetHCLKClockFreq>
 80052d2:	4603      	mov	r3, r0
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 f911 	bl	80054fc <RCC_GetPCLK2ClockFreq>
 80052da:	6178      	str	r0, [r7, #20]
      break;
 80052dc:	e05b      	b.n	8005396 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 80052de:	f000 f87d 	bl	80053dc <RCC_GetSystemClockFreq>
 80052e2:	4604      	mov	r4, r0
 80052e4:	f7ff fae8 	bl	80048b8 <LL_RCC_GetSysPrescaler>
 80052e8:	4603      	mov	r3, r0
 80052ea:	0a1b      	lsrs	r3, r3, #8
 80052ec:	f003 030f 	and.w	r3, r3, #15
 80052f0:	4a37      	ldr	r2, [pc, #220]	@ (80053d0 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 80052f2:	5cd3      	ldrb	r3, [r2, r3]
 80052f4:	f003 031f 	and.w	r3, r3, #31
 80052f8:	fa24 f303 	lsr.w	r3, r4, r3
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 f8cf 	bl	80054a0 <RCC_GetHCLKClockFreq>
 8005302:	4603      	mov	r3, r0
 8005304:	4618      	mov	r0, r3
 8005306:	f000 f8e1 	bl	80054cc <RCC_GetPCLK1ClockFreq>
 800530a:	6178      	str	r0, [r7, #20]
      break;
 800530c:	e043      	b.n	8005396 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 800530e:	f7ff fbf3 	bl	8004af8 <LL_RCC_PLL2_IsReady>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d035      	beq.n	8005384 <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8005318:	f107 0308 	add.w	r3, r7, #8
 800531c:	4618      	mov	r0, r3
 800531e:	f7ff fdfd 	bl	8004f1c <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	617b      	str	r3, [r7, #20]
      }
      break;
 8005326:	e02d      	b.n	8005384 <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 8005328:	f7ff fca2 	bl	8004c70 <LL_RCC_PLL3_IsReady>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d02a      	beq.n	8005388 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8005332:	f107 0308 	add.w	r3, r7, #8
 8005336:	4618      	mov	r0, r3
 8005338:	f7ff fe88 	bl	800504c <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	617b      	str	r3, [r7, #20]
      }
      break;
 8005340:	e022      	b.n	8005388 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 8005342:	f7ff fa65 	bl	8004810 <LL_RCC_HSI_IsReady>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d01f      	beq.n	800538c <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800534c:	f7ff fa72 	bl	8004834 <LL_RCC_HSI_GetDivider>
 8005350:	4603      	mov	r3, r0
 8005352:	08db      	lsrs	r3, r3, #3
 8005354:	4a1f      	ldr	r2, [pc, #124]	@ (80053d4 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 8005356:	fa22 f303 	lsr.w	r3, r2, r3
 800535a:	617b      	str	r3, [r7, #20]
      }
      break;
 800535c:	e016      	b.n	800538c <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 800535e:	f7ff fa77 	bl	8004850 <LL_RCC_CSI_IsReady>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d013      	beq.n	8005390 <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 8005368:	4b1b      	ldr	r3, [pc, #108]	@ (80053d8 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 800536a:	617b      	str	r3, [r7, #20]
      }
      break;
 800536c:	e010      	b.n	8005390 <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 800536e:	f7ff fa83 	bl	8004878 <LL_RCC_LSE_IsReady>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00d      	beq.n	8005394 <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 8005378:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800537c:	617b      	str	r3, [r7, #20]
      }
      break;
 800537e:	e009      	b.n	8005394 <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 8005380:	bf00      	nop
 8005382:	e008      	b.n	8005396 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8005384:	bf00      	nop
 8005386:	e006      	b.n	8005396 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8005388:	bf00      	nop
 800538a:	e004      	b.n	8005396 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800538c:	bf00      	nop
 800538e:	e002      	b.n	8005396 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8005390:	bf00      	nop
 8005392:	e000      	b.n	8005396 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8005394:	bf00      	nop
  }

  return usart_frequency;
 8005396:	697b      	ldr	r3, [r7, #20]
}
 8005398:	4618      	mov	r0, r3
 800539a:	371c      	adds	r7, #28
 800539c:	46bd      	mov	sp, r7
 800539e:	bd90      	pop	{r4, r7, pc}
 80053a0:	07050308 	.word	0x07050308
 80053a4:	07050008 	.word	0x07050008
 80053a8:	07040308 	.word	0x07040308
 80053ac:	07040008 	.word	0x07040008
 80053b0:	07030308 	.word	0x07030308
 80053b4:	07030008 	.word	0x07030008
 80053b8:	07020308 	.word	0x07020308
 80053bc:	07020008 	.word	0x07020008
 80053c0:	07010308 	.word	0x07010308
 80053c4:	07010008 	.word	0x07010008
 80053c8:	07000008 	.word	0x07000008
 80053cc:	07000308 	.word	0x07000308
 80053d0:	0800a33c 	.word	0x0800a33c
 80053d4:	03d09000 	.word	0x03d09000
 80053d8:	003d0900 	.word	0x003d0900

080053dc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80053e6:	f7ff fa59 	bl	800489c <LL_RCC_GetSysClkSource>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b18      	cmp	r3, #24
 80053ee:	d84b      	bhi.n	8005488 <RCC_GetSystemClockFreq+0xac>
 80053f0:	a201      	add	r2, pc, #4	@ (adr r2, 80053f8 <RCC_GetSystemClockFreq+0x1c>)
 80053f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f6:	bf00      	nop
 80053f8:	0800545d 	.word	0x0800545d
 80053fc:	08005489 	.word	0x08005489
 8005400:	08005489 	.word	0x08005489
 8005404:	08005489 	.word	0x08005489
 8005408:	08005489 	.word	0x08005489
 800540c:	08005489 	.word	0x08005489
 8005410:	08005489 	.word	0x08005489
 8005414:	08005489 	.word	0x08005489
 8005418:	0800546f 	.word	0x0800546f
 800541c:	08005489 	.word	0x08005489
 8005420:	08005489 	.word	0x08005489
 8005424:	08005489 	.word	0x08005489
 8005428:	08005489 	.word	0x08005489
 800542c:	08005489 	.word	0x08005489
 8005430:	08005489 	.word	0x08005489
 8005434:	08005489 	.word	0x08005489
 8005438:	08005475 	.word	0x08005475
 800543c:	08005489 	.word	0x08005489
 8005440:	08005489 	.word	0x08005489
 8005444:	08005489 	.word	0x08005489
 8005448:	08005489 	.word	0x08005489
 800544c:	08005489 	.word	0x08005489
 8005450:	08005489 	.word	0x08005489
 8005454:	08005489 	.word	0x08005489
 8005458:	0800547b 	.word	0x0800547b
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800545c:	f7ff f9ea 	bl	8004834 <LL_RCC_HSI_GetDivider>
 8005460:	4603      	mov	r3, r0
 8005462:	08db      	lsrs	r3, r3, #3
 8005464:	4a0b      	ldr	r2, [pc, #44]	@ (8005494 <RCC_GetSystemClockFreq+0xb8>)
 8005466:	fa22 f303 	lsr.w	r3, r2, r3
 800546a:	60fb      	str	r3, [r7, #12]
      break;
 800546c:	e00d      	b.n	800548a <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 800546e:	4b0a      	ldr	r3, [pc, #40]	@ (8005498 <RCC_GetSystemClockFreq+0xbc>)
 8005470:	60fb      	str	r3, [r7, #12]
      break;
 8005472:	e00a      	b.n	800548a <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 8005474:	4b09      	ldr	r3, [pc, #36]	@ (800549c <RCC_GetSystemClockFreq+0xc0>)
 8005476:	60fb      	str	r3, [r7, #12]
      break;
 8005478:	e007      	b.n	800548a <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 800547a:	463b      	mov	r3, r7
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff fcb5 	bl	8004dec <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	60fb      	str	r3, [r7, #12]
      break;
 8005486:	e000      	b.n	800548a <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 8005488:	bf00      	nop
  }

  return frequency;
 800548a:	68fb      	ldr	r3, [r7, #12]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	03d09000 	.word	0x03d09000
 8005498:	003d0900 	.word	0x003d0900
 800549c:	017d7840 	.word	0x017d7840

080054a0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80054a8:	f7ff fa14 	bl	80048d4 <LL_RCC_GetAHBPrescaler>
 80054ac:	4603      	mov	r3, r0
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	4a05      	ldr	r2, [pc, #20]	@ (80054c8 <RCC_GetHCLKClockFreq+0x28>)
 80054b4:	5cd3      	ldrb	r3, [r2, r3]
 80054b6:	f003 031f 	and.w	r3, r3, #31
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	0800a33c 	.word	0x0800a33c

080054cc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80054d4:	f7ff fa0c 	bl	80048f0 <LL_RCC_GetAPB1Prescaler>
 80054d8:	4603      	mov	r3, r0
 80054da:	091b      	lsrs	r3, r3, #4
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	4a05      	ldr	r2, [pc, #20]	@ (80054f8 <RCC_GetPCLK1ClockFreq+0x2c>)
 80054e2:	5cd3      	ldrb	r3, [r2, r3]
 80054e4:	f003 031f 	and.w	r3, r3, #31
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	0800a33c 	.word	0x0800a33c

080054fc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005504:	f7ff fa02 	bl	800490c <LL_RCC_GetAPB2Prescaler>
 8005508:	4603      	mov	r3, r0
 800550a:	0a1b      	lsrs	r3, r3, #8
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	4a05      	ldr	r2, [pc, #20]	@ (8005528 <RCC_GetPCLK2ClockFreq+0x2c>)
 8005512:	5cd3      	ldrb	r3, [r2, r3]
 8005514:	f003 031f 	and.w	r3, r3, #31
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	fa22 f303 	lsr.w	r3, r2, r3
}
 800551e:	4618      	mov	r0, r3
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	0800a33c 	.word	0x0800a33c

0800552c <LL_USART_IsEnabled>:
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b01      	cmp	r3, #1
 800553e:	d101      	bne.n	8005544 <LL_USART_IsEnabled+0x18>
 8005540:	2301      	movs	r3, #1
 8005542:	e000      	b.n	8005546 <LL_USART_IsEnabled+0x1a>
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <LL_USART_SetPrescaler>:
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
 800555a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005560:	f023 030f 	bic.w	r3, r3, #15
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	b292      	uxth	r2, r2
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800556e:	bf00      	nop
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <LL_USART_SetStopBitsLength>:
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	605a      	str	r2, [r3, #4]
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <LL_USART_SetHWFlowCtrl>:
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	431a      	orrs	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	609a      	str	r2, [r3, #8]
}
 80055ba:	bf00      	nop
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
	...

080055c8 <LL_USART_SetBaudRate>:
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b0b      	cmp	r3, #11
 80055da:	d83c      	bhi.n	8005656 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d039      	beq.n	8005656 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055e8:	d122      	bne.n	8005630 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	461a      	mov	r2, r3
 80055f0:	4b1c      	ldr	r3, [pc, #112]	@ (8005664 <LL_USART_SetBaudRate+0x9c>)
 80055f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fc:	005a      	lsls	r2, r3, #1
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	085b      	lsrs	r3, r3, #1
 8005602:	441a      	add	r2, r3
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	fbb2 f3f3 	udiv	r3, r2, r3
 800560a:	b29b      	uxth	r3, r3
 800560c:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8005614:	4013      	ands	r3, r2
 8005616:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	085b      	lsrs	r3, r3, #1
 800561c:	b29b      	uxth	r3, r3
 800561e:	f003 0307 	and.w	r3, r3, #7
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	60da      	str	r2, [r3, #12]
}
 800562e:	e012      	b.n	8005656 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	461a      	mov	r2, r3
 8005636:	4b0b      	ldr	r3, [pc, #44]	@ (8005664 <LL_USART_SetBaudRate+0x9c>)
 8005638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	085b      	lsrs	r3, r3, #1
 8005646:	441a      	add	r2, r3
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	fbb2 f3f3 	udiv	r3, r2, r3
 800564e:	b29b      	uxth	r3, r3
 8005650:	461a      	mov	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	60da      	str	r2, [r3, #12]
}
 8005656:	bf00      	nop
 8005658:	371c      	adds	r7, #28
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	0800a34c 	.word	0x0800a34c

08005668 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af02      	add	r7, sp, #8
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005676:	2300      	movs	r3, #0
 8005678:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7ff ff56 	bl	800552c <LL_USART_IsEnabled>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d17f      	bne.n	8005786 <LL_USART_Init+0x11e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	4b41      	ldr	r3, [pc, #260]	@ (8005790 <LL_USART_Init+0x128>)
 800568c:	4013      	ands	r3, r2
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	6891      	ldr	r1, [r2, #8]
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	6912      	ldr	r2, [r2, #16]
 8005696:	4311      	orrs	r1, r2
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	6952      	ldr	r2, [r2, #20]
 800569c:	4311      	orrs	r1, r2
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	69d2      	ldr	r2, [r2, #28]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	431a      	orrs	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	4619      	mov	r1, r3
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7ff ff62 	bl	800557a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	4619      	mov	r1, r3
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff ff6f 	bl	80055a0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a33      	ldr	r2, [pc, #204]	@ (8005794 <LL_USART_Init+0x12c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d104      	bne.n	80056d4 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 80056ca:	4833      	ldr	r0, [pc, #204]	@ (8005798 <LL_USART_Init+0x130>)
 80056cc:	f7ff fd98 	bl	8005200 <LL_RCC_GetUSARTClockFreq>
 80056d0:	60b8      	str	r0, [r7, #8]
 80056d2:	e03d      	b.n	8005750 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART2)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a31      	ldr	r2, [pc, #196]	@ (800579c <LL_USART_Init+0x134>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d104      	bne.n	80056e6 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 80056dc:	4830      	ldr	r0, [pc, #192]	@ (80057a0 <LL_USART_Init+0x138>)
 80056de:	f7ff fd8f 	bl	8005200 <LL_RCC_GetUSARTClockFreq>
 80056e2:	60b8      	str	r0, [r7, #8]
 80056e4:	e034      	b.n	8005750 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART3)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a2e      	ldr	r2, [pc, #184]	@ (80057a4 <LL_USART_Init+0x13c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d104      	bne.n	80056f8 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 80056ee:	482c      	ldr	r0, [pc, #176]	@ (80057a0 <LL_USART_Init+0x138>)
 80056f0:	f7ff fd86 	bl	8005200 <LL_RCC_GetUSARTClockFreq>
 80056f4:	60b8      	str	r0, [r7, #8]
 80056f6:	e02b      	b.n	8005750 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART4)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a2b      	ldr	r2, [pc, #172]	@ (80057a8 <LL_USART_Init+0x140>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d104      	bne.n	800570a <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8005700:	4827      	ldr	r0, [pc, #156]	@ (80057a0 <LL_USART_Init+0x138>)
 8005702:	f7ff fd7d 	bl	8005200 <LL_RCC_GetUSARTClockFreq>
 8005706:	60b8      	str	r0, [r7, #8]
 8005708:	e022      	b.n	8005750 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART5)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a27      	ldr	r2, [pc, #156]	@ (80057ac <LL_USART_Init+0x144>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d104      	bne.n	800571c <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8005712:	4823      	ldr	r0, [pc, #140]	@ (80057a0 <LL_USART_Init+0x138>)
 8005714:	f7ff fd74 	bl	8005200 <LL_RCC_GetUSARTClockFreq>
 8005718:	60b8      	str	r0, [r7, #8]
 800571a:	e019      	b.n	8005750 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART6)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a24      	ldr	r2, [pc, #144]	@ (80057b0 <LL_USART_Init+0x148>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d104      	bne.n	800572e <LL_USART_Init+0xc6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8005724:	481c      	ldr	r0, [pc, #112]	@ (8005798 <LL_USART_Init+0x130>)
 8005726:	f7ff fd6b 	bl	8005200 <LL_RCC_GetUSARTClockFreq>
 800572a:	60b8      	str	r0, [r7, #8]
 800572c:	e010      	b.n	8005750 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART7)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a20      	ldr	r2, [pc, #128]	@ (80057b4 <LL_USART_Init+0x14c>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d104      	bne.n	8005740 <LL_USART_Init+0xd8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8005736:	481a      	ldr	r0, [pc, #104]	@ (80057a0 <LL_USART_Init+0x138>)
 8005738:	f7ff fd62 	bl	8005200 <LL_RCC_GetUSARTClockFreq>
 800573c:	60b8      	str	r0, [r7, #8]
 800573e:	e007      	b.n	8005750 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART8)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a1d      	ldr	r2, [pc, #116]	@ (80057b8 <LL_USART_Init+0x150>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d103      	bne.n	8005750 <LL_USART_Init+0xe8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8005748:	4815      	ldr	r0, [pc, #84]	@ (80057a0 <LL_USART_Init+0x138>)
 800574a:	f7ff fd59 	bl	8005200 <LL_RCC_GetUSARTClockFreq>
 800574e:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d011      	beq.n	800577a <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00d      	beq.n	800577a <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 800575e:	2300      	movs	r3, #0
 8005760:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	460b      	mov	r3, r1
 8005772:	68b9      	ldr	r1, [r7, #8]
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff ff27 	bl	80055c8 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4619      	mov	r1, r3
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff fee6 	bl	8005552 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005786:	7bfb      	ldrb	r3, [r7, #15]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	efff69f3 	.word	0xefff69f3
 8005794:	40011000 	.word	0x40011000
 8005798:	07000308 	.word	0x07000308
 800579c:	40004400 	.word	0x40004400
 80057a0:	07000008 	.word	0x07000008
 80057a4:	40004800 	.word	0x40004800
 80057a8:	40004c00 	.word	0x40004c00
 80057ac:	40005000 	.word	0x40005000
 80057b0:	40011400 	.word	0x40011400
 80057b4:	40007800 	.word	0x40007800
 80057b8:	40007c00 	.word	0x40007c00

080057bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80057c0:	f001 f98c 	bl	8006adc <vTaskStartScheduler>
  
  return osOK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	bd80      	pop	{r7, pc}

080057ca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d001      	beq.n	80057e0 <osDelay+0x16>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	e000      	b.n	80057e2 <osDelay+0x18>
 80057e0:	2301      	movs	r3, #1
 80057e2:	4618      	mov	r0, r3
 80057e4:	f001 f944 	bl	8006a70 <vTaskDelay>
  
  return osOK;
 80057e8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f103 0208 	add.w	r2, r3, #8
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f04f 32ff 	mov.w	r2, #4294967295
 800580a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f103 0208 	add.w	r2, r3, #8
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f103 0208 	add.w	r2, r3, #8
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	689a      	ldr	r2, [r3, #8]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	601a      	str	r2, [r3, #0]
}
 8005888:	bf00      	nop
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058aa:	d103      	bne.n	80058b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	e00c      	b.n	80058ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3308      	adds	r3, #8
 80058b8:	60fb      	str	r3, [r7, #12]
 80058ba:	e002      	b.n	80058c2 <vListInsert+0x2e>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	60fb      	str	r3, [r7, #12]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d2f6      	bcs.n	80058bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	601a      	str	r2, [r3, #0]
}
 80058fa:	bf00      	nop
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005906:	b480      	push	{r7}
 8005908:	b085      	sub	sp, #20
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6892      	ldr	r2, [r2, #8]
 800591c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6852      	ldr	r2, [r2, #4]
 8005926:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	429a      	cmp	r2, r3
 8005930:	d103      	bne.n	800593a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689a      	ldr	r2, [r3, #8]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	1e5a      	subs	r2, r3, #1
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
	...

0800595c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10b      	bne.n	8005988 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005982:	bf00      	nop
 8005984:	bf00      	nop
 8005986:	e7fd      	b.n	8005984 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005988:	f002 fb9e 	bl	80080c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005994:	68f9      	ldr	r1, [r7, #12]
 8005996:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005998:	fb01 f303 	mul.w	r3, r1, r3
 800599c:	441a      	add	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b8:	3b01      	subs	r3, #1
 80059ba:	68f9      	ldr	r1, [r7, #12]
 80059bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80059be:	fb01 f303 	mul.w	r3, r1, r3
 80059c2:	441a      	add	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	22ff      	movs	r2, #255	@ 0xff
 80059cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	22ff      	movs	r2, #255	@ 0xff
 80059d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d114      	bne.n	8005a08 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d01a      	beq.n	8005a1c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3310      	adds	r3, #16
 80059ea:	4618      	mov	r0, r3
 80059ec:	f001 fb12 	bl	8007014 <xTaskRemoveFromEventList>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d012      	beq.n	8005a1c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80059f6:	4b0d      	ldr	r3, [pc, #52]	@ (8005a2c <xQueueGenericReset+0xd0>)
 80059f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	e009      	b.n	8005a1c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	3310      	adds	r3, #16
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7ff fef0 	bl	80057f2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	3324      	adds	r3, #36	@ 0x24
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7ff feeb 	bl	80057f2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a1c:	f002 fb86 	bl	800812c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a20:	2301      	movs	r3, #1
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	e000ed04 	.word	0xe000ed04

08005a30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08e      	sub	sp, #56	@ 0x38
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
 8005a3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10b      	bne.n	8005a5c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005a56:	bf00      	nop
 8005a58:	bf00      	nop
 8005a5a:	e7fd      	b.n	8005a58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10b      	bne.n	8005a7a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop
 8005a78:	e7fd      	b.n	8005a76 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <xQueueGenericCreateStatic+0x56>
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <xQueueGenericCreateStatic+0x5a>
 8005a86:	2301      	movs	r3, #1
 8005a88:	e000      	b.n	8005a8c <xQueueGenericCreateStatic+0x5c>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10b      	bne.n	8005aa8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	623b      	str	r3, [r7, #32]
}
 8005aa2:	bf00      	nop
 8005aa4:	bf00      	nop
 8005aa6:	e7fd      	b.n	8005aa4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d102      	bne.n	8005ab4 <xQueueGenericCreateStatic+0x84>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <xQueueGenericCreateStatic+0x88>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e000      	b.n	8005aba <xQueueGenericCreateStatic+0x8a>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10b      	bne.n	8005ad6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	61fb      	str	r3, [r7, #28]
}
 8005ad0:	bf00      	nop
 8005ad2:	bf00      	nop
 8005ad4:	e7fd      	b.n	8005ad2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005ad6:	2348      	movs	r3, #72	@ 0x48
 8005ad8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2b48      	cmp	r3, #72	@ 0x48
 8005ade:	d00b      	beq.n	8005af8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	61bb      	str	r3, [r7, #24]
}
 8005af2:	bf00      	nop
 8005af4:	bf00      	nop
 8005af6:	e7fd      	b.n	8005af4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005af8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00d      	beq.n	8005b20 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b0c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	4613      	mov	r3, r2
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	68b9      	ldr	r1, [r7, #8]
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 f840 	bl	8005ba0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3730      	adds	r7, #48	@ 0x30
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b08a      	sub	sp, #40	@ 0x28
 8005b2e:	af02      	add	r7, sp, #8
 8005b30:	60f8      	str	r0, [r7, #12]
 8005b32:	60b9      	str	r1, [r7, #8]
 8005b34:	4613      	mov	r3, r2
 8005b36:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10b      	bne.n	8005b56 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	613b      	str	r3, [r7, #16]
}
 8005b50:	bf00      	nop
 8005b52:	bf00      	nop
 8005b54:	e7fd      	b.n	8005b52 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	fb02 f303 	mul.w	r3, r2, r3
 8005b5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	3348      	adds	r3, #72	@ 0x48
 8005b64:	4618      	mov	r0, r3
 8005b66:	f002 fbd1 	bl	800830c <pvPortMalloc>
 8005b6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d011      	beq.n	8005b96 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	3348      	adds	r3, #72	@ 0x48
 8005b7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b84:	79fa      	ldrb	r2, [r7, #7]
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	68b9      	ldr	r1, [r7, #8]
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 f805 	bl	8005ba0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b96:	69bb      	ldr	r3, [r7, #24]
	}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3720      	adds	r7, #32
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
 8005bac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d103      	bne.n	8005bbc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	e002      	b.n	8005bc2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005bce:	2101      	movs	r1, #1
 8005bd0:	69b8      	ldr	r0, [r7, #24]
 8005bd2:	f7ff fec3 	bl	800595c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005bd6:	bf00      	nop
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b082      	sub	sp, #8
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00e      	beq.n	8005c0a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005bfe:	2300      	movs	r3, #0
 8005c00:	2200      	movs	r2, #0
 8005c02:	2100      	movs	r1, #0
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f81d 	bl	8005c44 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005c0a:	bf00      	nop
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b086      	sub	sp, #24
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	4603      	mov	r3, r0
 8005c1a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	2300      	movs	r3, #0
 8005c22:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005c24:	79fb      	ldrb	r3, [r7, #7]
 8005c26:	461a      	mov	r2, r3
 8005c28:	6939      	ldr	r1, [r7, #16]
 8005c2a:	6978      	ldr	r0, [r7, #20]
 8005c2c:	f7ff ff7d 	bl	8005b2a <xQueueGenericCreate>
 8005c30:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f7ff ffd3 	bl	8005bde <prvInitialiseMutex>

		return xNewQueue;
 8005c38:	68fb      	ldr	r3, [r7, #12]
	}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08e      	sub	sp, #56	@ 0x38
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
 8005c50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c52:	2300      	movs	r3, #0
 8005c54:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10b      	bne.n	8005c78 <xQueueGenericSend+0x34>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c72:	bf00      	nop
 8005c74:	bf00      	nop
 8005c76:	e7fd      	b.n	8005c74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d103      	bne.n	8005c86 <xQueueGenericSend+0x42>
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <xQueueGenericSend+0x46>
 8005c86:	2301      	movs	r3, #1
 8005c88:	e000      	b.n	8005c8c <xQueueGenericSend+0x48>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10b      	bne.n	8005ca8 <xQueueGenericSend+0x64>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ca2:	bf00      	nop
 8005ca4:	bf00      	nop
 8005ca6:	e7fd      	b.n	8005ca4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d103      	bne.n	8005cb6 <xQueueGenericSend+0x72>
 8005cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d101      	bne.n	8005cba <xQueueGenericSend+0x76>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e000      	b.n	8005cbc <xQueueGenericSend+0x78>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10b      	bne.n	8005cd8 <xQueueGenericSend+0x94>
	__asm volatile
 8005cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	623b      	str	r3, [r7, #32]
}
 8005cd2:	bf00      	nop
 8005cd4:	bf00      	nop
 8005cd6:	e7fd      	b.n	8005cd4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cd8:	f001 fb62 	bl	80073a0 <xTaskGetSchedulerState>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d102      	bne.n	8005ce8 <xQueueGenericSend+0xa4>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <xQueueGenericSend+0xa8>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e000      	b.n	8005cee <xQueueGenericSend+0xaa>
 8005cec:	2300      	movs	r3, #0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10b      	bne.n	8005d0a <xQueueGenericSend+0xc6>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	61fb      	str	r3, [r7, #28]
}
 8005d04:	bf00      	nop
 8005d06:	bf00      	nop
 8005d08:	e7fd      	b.n	8005d06 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d0a:	f002 f9dd 	bl	80080c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d302      	bcc.n	8005d20 <xQueueGenericSend+0xdc>
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d129      	bne.n	8005d74 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	68b9      	ldr	r1, [r7, #8]
 8005d24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d26:	f000 fb5b 	bl	80063e0 <prvCopyDataToQueue>
 8005d2a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d010      	beq.n	8005d56 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d36:	3324      	adds	r3, #36	@ 0x24
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f001 f96b 	bl	8007014 <xTaskRemoveFromEventList>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d013      	beq.n	8005d6c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d44:	4b3f      	ldr	r3, [pc, #252]	@ (8005e44 <xQueueGenericSend+0x200>)
 8005d46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	f3bf 8f6f 	isb	sy
 8005d54:	e00a      	b.n	8005d6c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d007      	beq.n	8005d6c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d5c:	4b39      	ldr	r3, [pc, #228]	@ (8005e44 <xQueueGenericSend+0x200>)
 8005d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d6c:	f002 f9de 	bl	800812c <vPortExitCritical>
				return pdPASS;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e063      	b.n	8005e3c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d103      	bne.n	8005d82 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d7a:	f002 f9d7 	bl	800812c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	e05c      	b.n	8005e3c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d106      	bne.n	8005d96 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d88:	f107 0314 	add.w	r3, r7, #20
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f001 f9a5 	bl	80070dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d92:	2301      	movs	r3, #1
 8005d94:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d96:	f002 f9c9 	bl	800812c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d9a:	f000 ff0f 	bl	8006bbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d9e:	f002 f993 	bl	80080c8 <vPortEnterCritical>
 8005da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005da8:	b25b      	sxtb	r3, r3
 8005daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dae:	d103      	bne.n	8005db8 <xQueueGenericSend+0x174>
 8005db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dbe:	b25b      	sxtb	r3, r3
 8005dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc4:	d103      	bne.n	8005dce <xQueueGenericSend+0x18a>
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dce:	f002 f9ad 	bl	800812c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dd2:	1d3a      	adds	r2, r7, #4
 8005dd4:	f107 0314 	add.w	r3, r7, #20
 8005dd8:	4611      	mov	r1, r2
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f001 f994 	bl	8007108 <xTaskCheckForTimeOut>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d124      	bne.n	8005e30 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005de6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005de8:	f000 fbf2 	bl	80065d0 <prvIsQueueFull>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d018      	beq.n	8005e24 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df4:	3310      	adds	r3, #16
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	4611      	mov	r1, r2
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f001 f8b8 	bl	8006f70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e02:	f000 fb7d 	bl	8006500 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e06:	f000 fee7 	bl	8006bd8 <xTaskResumeAll>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f47f af7c 	bne.w	8005d0a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005e12:	4b0c      	ldr	r3, [pc, #48]	@ (8005e44 <xQueueGenericSend+0x200>)
 8005e14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e18:	601a      	str	r2, [r3, #0]
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	e772      	b.n	8005d0a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e26:	f000 fb6b 	bl	8006500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e2a:	f000 fed5 	bl	8006bd8 <xTaskResumeAll>
 8005e2e:	e76c      	b.n	8005d0a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e32:	f000 fb65 	bl	8006500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e36:	f000 fecf 	bl	8006bd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3738      	adds	r7, #56	@ 0x38
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	e000ed04 	.word	0xe000ed04

08005e48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b090      	sub	sp, #64	@ 0x40
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10b      	bne.n	8005e78 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e72:	bf00      	nop
 8005e74:	bf00      	nop
 8005e76:	e7fd      	b.n	8005e74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d103      	bne.n	8005e86 <xQueueGenericSendFromISR+0x3e>
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <xQueueGenericSendFromISR+0x42>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e000      	b.n	8005e8c <xQueueGenericSendFromISR+0x44>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10b      	bne.n	8005ea8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ea2:	bf00      	nop
 8005ea4:	bf00      	nop
 8005ea6:	e7fd      	b.n	8005ea4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d103      	bne.n	8005eb6 <xQueueGenericSendFromISR+0x6e>
 8005eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d101      	bne.n	8005eba <xQueueGenericSendFromISR+0x72>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e000      	b.n	8005ebc <xQueueGenericSendFromISR+0x74>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10b      	bne.n	8005ed8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	623b      	str	r3, [r7, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	bf00      	nop
 8005ed6:	e7fd      	b.n	8005ed4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ed8:	f002 f9d6 	bl	8008288 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005edc:	f3ef 8211 	mrs	r2, BASEPRI
 8005ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	61fa      	str	r2, [r7, #28]
 8005ef2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ef4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ef6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d302      	bcc.n	8005f0a <xQueueGenericSendFromISR+0xc2>
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d12f      	bne.n	8005f6a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	68b9      	ldr	r1, [r7, #8]
 8005f1e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005f20:	f000 fa5e 	bl	80063e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f24:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2c:	d112      	bne.n	8005f54 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d016      	beq.n	8005f64 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f38:	3324      	adds	r3, #36	@ 0x24
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f001 f86a 	bl	8007014 <xTaskRemoveFromEventList>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00e      	beq.n	8005f64 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00b      	beq.n	8005f64 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	e007      	b.n	8005f64 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005f58:	3301      	adds	r3, #1
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	b25a      	sxtb	r2, r3
 8005f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005f64:	2301      	movs	r3, #1
 8005f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005f68:	e001      	b.n	8005f6e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f70:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f78:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3740      	adds	r7, #64	@ 0x40
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08c      	sub	sp, #48	@ 0x30
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f90:	2300      	movs	r3, #0
 8005f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10b      	bne.n	8005fb6 <xQueueReceive+0x32>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	623b      	str	r3, [r7, #32]
}
 8005fb0:	bf00      	nop
 8005fb2:	bf00      	nop
 8005fb4:	e7fd      	b.n	8005fb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d103      	bne.n	8005fc4 <xQueueReceive+0x40>
 8005fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <xQueueReceive+0x44>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e000      	b.n	8005fca <xQueueReceive+0x46>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10b      	bne.n	8005fe6 <xQueueReceive+0x62>
	__asm volatile
 8005fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	61fb      	str	r3, [r7, #28]
}
 8005fe0:	bf00      	nop
 8005fe2:	bf00      	nop
 8005fe4:	e7fd      	b.n	8005fe2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fe6:	f001 f9db 	bl	80073a0 <xTaskGetSchedulerState>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d102      	bne.n	8005ff6 <xQueueReceive+0x72>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <xQueueReceive+0x76>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e000      	b.n	8005ffc <xQueueReceive+0x78>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10b      	bne.n	8006018 <xQueueReceive+0x94>
	__asm volatile
 8006000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	61bb      	str	r3, [r7, #24]
}
 8006012:	bf00      	nop
 8006014:	bf00      	nop
 8006016:	e7fd      	b.n	8006014 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006018:	f002 f856 	bl	80080c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800601c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006020:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006024:	2b00      	cmp	r3, #0
 8006026:	d01f      	beq.n	8006068 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006028:	68b9      	ldr	r1, [r7, #8]
 800602a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800602c:	f000 fa42 	bl	80064b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006032:	1e5a      	subs	r2, r3, #1
 8006034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006036:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00f      	beq.n	8006060 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006042:	3310      	adds	r3, #16
 8006044:	4618      	mov	r0, r3
 8006046:	f000 ffe5 	bl	8007014 <xTaskRemoveFromEventList>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d007      	beq.n	8006060 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006050:	4b3c      	ldr	r3, [pc, #240]	@ (8006144 <xQueueReceive+0x1c0>)
 8006052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006060:	f002 f864 	bl	800812c <vPortExitCritical>
				return pdPASS;
 8006064:	2301      	movs	r3, #1
 8006066:	e069      	b.n	800613c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d103      	bne.n	8006076 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800606e:	f002 f85d 	bl	800812c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006072:	2300      	movs	r3, #0
 8006074:	e062      	b.n	800613c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006078:	2b00      	cmp	r3, #0
 800607a:	d106      	bne.n	800608a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800607c:	f107 0310 	add.w	r3, r7, #16
 8006080:	4618      	mov	r0, r3
 8006082:	f001 f82b 	bl	80070dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006086:	2301      	movs	r3, #1
 8006088:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800608a:	f002 f84f 	bl	800812c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800608e:	f000 fd95 	bl	8006bbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006092:	f002 f819 	bl	80080c8 <vPortEnterCritical>
 8006096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006098:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800609c:	b25b      	sxtb	r3, r3
 800609e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a2:	d103      	bne.n	80060ac <xQueueReceive+0x128>
 80060a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060b2:	b25b      	sxtb	r3, r3
 80060b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b8:	d103      	bne.n	80060c2 <xQueueReceive+0x13e>
 80060ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060c2:	f002 f833 	bl	800812c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060c6:	1d3a      	adds	r2, r7, #4
 80060c8:	f107 0310 	add.w	r3, r7, #16
 80060cc:	4611      	mov	r1, r2
 80060ce:	4618      	mov	r0, r3
 80060d0:	f001 f81a 	bl	8007108 <xTaskCheckForTimeOut>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d123      	bne.n	8006122 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060dc:	f000 fa62 	bl	80065a4 <prvIsQueueEmpty>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d017      	beq.n	8006116 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e8:	3324      	adds	r3, #36	@ 0x24
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	4611      	mov	r1, r2
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 ff3e 	bl	8006f70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060f6:	f000 fa03 	bl	8006500 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060fa:	f000 fd6d 	bl	8006bd8 <xTaskResumeAll>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d189      	bne.n	8006018 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006104:	4b0f      	ldr	r3, [pc, #60]	@ (8006144 <xQueueReceive+0x1c0>)
 8006106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	e780      	b.n	8006018 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006116:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006118:	f000 f9f2 	bl	8006500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800611c:	f000 fd5c 	bl	8006bd8 <xTaskResumeAll>
 8006120:	e77a      	b.n	8006018 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006122:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006124:	f000 f9ec 	bl	8006500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006128:	f000 fd56 	bl	8006bd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800612c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800612e:	f000 fa39 	bl	80065a4 <prvIsQueueEmpty>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	f43f af6f 	beq.w	8006018 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800613a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800613c:	4618      	mov	r0, r3
 800613e:	3730      	adds	r7, #48	@ 0x30
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	e000ed04 	.word	0xe000ed04

08006148 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08e      	sub	sp, #56	@ 0x38
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006152:	2300      	movs	r3, #0
 8006154:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800615a:	2300      	movs	r3, #0
 800615c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800615e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10b      	bne.n	800617c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	623b      	str	r3, [r7, #32]
}
 8006176:	bf00      	nop
 8006178:	bf00      	nop
 800617a:	e7fd      	b.n	8006178 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800617c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800617e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00b      	beq.n	800619c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	61fb      	str	r3, [r7, #28]
}
 8006196:	bf00      	nop
 8006198:	bf00      	nop
 800619a:	e7fd      	b.n	8006198 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800619c:	f001 f900 	bl	80073a0 <xTaskGetSchedulerState>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d102      	bne.n	80061ac <xQueueSemaphoreTake+0x64>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <xQueueSemaphoreTake+0x68>
 80061ac:	2301      	movs	r3, #1
 80061ae:	e000      	b.n	80061b2 <xQueueSemaphoreTake+0x6a>
 80061b0:	2300      	movs	r3, #0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10b      	bne.n	80061ce <xQueueSemaphoreTake+0x86>
	__asm volatile
 80061b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ba:	f383 8811 	msr	BASEPRI, r3
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	61bb      	str	r3, [r7, #24]
}
 80061c8:	bf00      	nop
 80061ca:	bf00      	nop
 80061cc:	e7fd      	b.n	80061ca <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061ce:	f001 ff7b 	bl	80080c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80061d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80061d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d024      	beq.n	8006228 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80061de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e0:	1e5a      	subs	r2, r3, #1
 80061e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d104      	bne.n	80061f8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80061ee:	f001 fa83 	bl	80076f8 <pvTaskIncrementMutexHeldCount>
 80061f2:	4602      	mov	r2, r0
 80061f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00f      	beq.n	8006220 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006202:	3310      	adds	r3, #16
 8006204:	4618      	mov	r0, r3
 8006206:	f000 ff05 	bl	8007014 <xTaskRemoveFromEventList>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d007      	beq.n	8006220 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006210:	4b54      	ldr	r3, [pc, #336]	@ (8006364 <xQueueSemaphoreTake+0x21c>)
 8006212:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006220:	f001 ff84 	bl	800812c <vPortExitCritical>
				return pdPASS;
 8006224:	2301      	movs	r3, #1
 8006226:	e098      	b.n	800635a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d112      	bne.n	8006254 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800622e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00b      	beq.n	800624c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	617b      	str	r3, [r7, #20]
}
 8006246:	bf00      	nop
 8006248:	bf00      	nop
 800624a:	e7fd      	b.n	8006248 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800624c:	f001 ff6e 	bl	800812c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006250:	2300      	movs	r3, #0
 8006252:	e082      	b.n	800635a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006256:	2b00      	cmp	r3, #0
 8006258:	d106      	bne.n	8006268 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800625a:	f107 030c 	add.w	r3, r7, #12
 800625e:	4618      	mov	r0, r3
 8006260:	f000 ff3c 	bl	80070dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006264:	2301      	movs	r3, #1
 8006266:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006268:	f001 ff60 	bl	800812c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800626c:	f000 fca6 	bl	8006bbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006270:	f001 ff2a 	bl	80080c8 <vPortEnterCritical>
 8006274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006276:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800627a:	b25b      	sxtb	r3, r3
 800627c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006280:	d103      	bne.n	800628a <xQueueSemaphoreTake+0x142>
 8006282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800628a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800628c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006290:	b25b      	sxtb	r3, r3
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006296:	d103      	bne.n	80062a0 <xQueueSemaphoreTake+0x158>
 8006298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062a0:	f001 ff44 	bl	800812c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062a4:	463a      	mov	r2, r7
 80062a6:	f107 030c 	add.w	r3, r7, #12
 80062aa:	4611      	mov	r1, r2
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 ff2b 	bl	8007108 <xTaskCheckForTimeOut>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d132      	bne.n	800631e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062ba:	f000 f973 	bl	80065a4 <prvIsQueueEmpty>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d026      	beq.n	8006312 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d109      	bne.n	80062e0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80062cc:	f001 fefc 	bl	80080c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f001 f881 	bl	80073dc <xTaskPriorityInherit>
 80062da:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80062dc:	f001 ff26 	bl	800812c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e2:	3324      	adds	r3, #36	@ 0x24
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	4611      	mov	r1, r2
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 fe41 	bl	8006f70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062f0:	f000 f906 	bl	8006500 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062f4:	f000 fc70 	bl	8006bd8 <xTaskResumeAll>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f47f af67 	bne.w	80061ce <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006300:	4b18      	ldr	r3, [pc, #96]	@ (8006364 <xQueueSemaphoreTake+0x21c>)
 8006302:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	e75d      	b.n	80061ce <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006312:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006314:	f000 f8f4 	bl	8006500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006318:	f000 fc5e 	bl	8006bd8 <xTaskResumeAll>
 800631c:	e757      	b.n	80061ce <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800631e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006320:	f000 f8ee 	bl	8006500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006324:	f000 fc58 	bl	8006bd8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006328:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800632a:	f000 f93b 	bl	80065a4 <prvIsQueueEmpty>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	f43f af4c 	beq.w	80061ce <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00d      	beq.n	8006358 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800633c:	f001 fec4 	bl	80080c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006340:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006342:	f000 f835 	bl	80063b0 <prvGetDisinheritPriorityAfterTimeout>
 8006346:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800634e:	4618      	mov	r0, r3
 8006350:	f001 f942 	bl	80075d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006354:	f001 feea 	bl	800812c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006358:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800635a:	4618      	mov	r0, r3
 800635c:	3738      	adds	r7, #56	@ 0x38
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	e000ed04 	.word	0xe000ed04

08006368 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10b      	bne.n	8006392 <vQueueDelete+0x2a>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	60bb      	str	r3, [r7, #8]
}
 800638c:	bf00      	nop
 800638e:	bf00      	nop
 8006390:	e7fd      	b.n	800638e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 f95e 	bl	8006654 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d102      	bne.n	80063a8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f002 f880 	bl	80084a8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80063a8:	bf00      	nop
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d006      	beq.n	80063ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f1c3 0307 	rsb	r3, r3, #7
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	e001      	b.n	80063d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80063ce:	2300      	movs	r3, #0
 80063d0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80063d2:	68fb      	ldr	r3, [r7, #12]
	}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80063ec:	2300      	movs	r3, #0
 80063ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10d      	bne.n	800641a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d14d      	bne.n	80064a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	4618      	mov	r0, r3
 800640c:	f001 f85c 	bl	80074c8 <xTaskPriorityDisinherit>
 8006410:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	609a      	str	r2, [r3, #8]
 8006418:	e043      	b.n	80064a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d119      	bne.n	8006454 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6858      	ldr	r0, [r3, #4]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006428:	461a      	mov	r2, r3
 800642a:	68b9      	ldr	r1, [r7, #8]
 800642c:	f003 f884 	bl	8009538 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006438:	441a      	add	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	429a      	cmp	r2, r3
 8006448:	d32b      	bcc.n	80064a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	605a      	str	r2, [r3, #4]
 8006452:	e026      	b.n	80064a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	68d8      	ldr	r0, [r3, #12]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645c:	461a      	mov	r2, r3
 800645e:	68b9      	ldr	r1, [r7, #8]
 8006460:	f003 f86a 	bl	8009538 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646c:	425b      	negs	r3, r3
 800646e:	441a      	add	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	429a      	cmp	r2, r3
 800647e:	d207      	bcs.n	8006490 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006488:	425b      	negs	r3, r3
 800648a:	441a      	add	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b02      	cmp	r3, #2
 8006494:	d105      	bne.n	80064a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	3b01      	subs	r3, #1
 80064a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80064aa:	697b      	ldr	r3, [r7, #20]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d018      	beq.n	80064f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68da      	ldr	r2, [r3, #12]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ce:	441a      	add	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68da      	ldr	r2, [r3, #12]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d303      	bcc.n	80064e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68d9      	ldr	r1, [r3, #12]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f0:	461a      	mov	r2, r3
 80064f2:	6838      	ldr	r0, [r7, #0]
 80064f4:	f003 f820 	bl	8009538 <memcpy>
	}
}
 80064f8:	bf00      	nop
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006508:	f001 fdde 	bl	80080c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006512:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006514:	e011      	b.n	800653a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651a:	2b00      	cmp	r3, #0
 800651c:	d012      	beq.n	8006544 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	3324      	adds	r3, #36	@ 0x24
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fd76 	bl	8007014 <xTaskRemoveFromEventList>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800652e:	f000 fe4f 	bl	80071d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006532:	7bfb      	ldrb	r3, [r7, #15]
 8006534:	3b01      	subs	r3, #1
 8006536:	b2db      	uxtb	r3, r3
 8006538:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800653a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800653e:	2b00      	cmp	r3, #0
 8006540:	dce9      	bgt.n	8006516 <prvUnlockQueue+0x16>
 8006542:	e000      	b.n	8006546 <prvUnlockQueue+0x46>
					break;
 8006544:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	22ff      	movs	r2, #255	@ 0xff
 800654a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800654e:	f001 fded 	bl	800812c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006552:	f001 fdb9 	bl	80080c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800655c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800655e:	e011      	b.n	8006584 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d012      	beq.n	800658e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3310      	adds	r3, #16
 800656c:	4618      	mov	r0, r3
 800656e:	f000 fd51 	bl	8007014 <xTaskRemoveFromEventList>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006578:	f000 fe2a 	bl	80071d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800657c:	7bbb      	ldrb	r3, [r7, #14]
 800657e:	3b01      	subs	r3, #1
 8006580:	b2db      	uxtb	r3, r3
 8006582:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006584:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006588:	2b00      	cmp	r3, #0
 800658a:	dce9      	bgt.n	8006560 <prvUnlockQueue+0x60>
 800658c:	e000      	b.n	8006590 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800658e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	22ff      	movs	r2, #255	@ 0xff
 8006594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006598:	f001 fdc8 	bl	800812c <vPortExitCritical>
}
 800659c:	bf00      	nop
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065ac:	f001 fd8c 	bl	80080c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d102      	bne.n	80065be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80065b8:	2301      	movs	r3, #1
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	e001      	b.n	80065c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065c2:	f001 fdb3 	bl	800812c <vPortExitCritical>

	return xReturn;
 80065c6:	68fb      	ldr	r3, [r7, #12]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065d8:	f001 fd76 	bl	80080c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d102      	bne.n	80065ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80065e8:	2301      	movs	r3, #1
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	e001      	b.n	80065f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065f2:	f001 fd9b 	bl	800812c <vPortExitCritical>

	return xReturn;
 80065f6:	68fb      	ldr	r3, [r7, #12]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800660a:	2300      	movs	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	e014      	b.n	800663a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006610:	4a0f      	ldr	r2, [pc, #60]	@ (8006650 <vQueueAddToRegistry+0x50>)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10b      	bne.n	8006634 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800661c:	490c      	ldr	r1, [pc, #48]	@ (8006650 <vQueueAddToRegistry+0x50>)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006626:	4a0a      	ldr	r2, [pc, #40]	@ (8006650 <vQueueAddToRegistry+0x50>)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	00db      	lsls	r3, r3, #3
 800662c:	4413      	add	r3, r2
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006632:	e006      	b.n	8006642 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	3301      	adds	r3, #1
 8006638:	60fb      	str	r3, [r7, #12]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2b07      	cmp	r3, #7
 800663e:	d9e7      	bls.n	8006610 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006640:	bf00      	nop
 8006642:	bf00      	nop
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	24000b80 	.word	0x24000b80

08006654 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800665c:	2300      	movs	r3, #0
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	e016      	b.n	8006690 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006662:	4a10      	ldr	r2, [pc, #64]	@ (80066a4 <vQueueUnregisterQueue+0x50>)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	4413      	add	r3, r2
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	429a      	cmp	r2, r3
 8006670:	d10b      	bne.n	800668a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006672:	4a0c      	ldr	r2, [pc, #48]	@ (80066a4 <vQueueUnregisterQueue+0x50>)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2100      	movs	r1, #0
 8006678:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800667c:	4a09      	ldr	r2, [pc, #36]	@ (80066a4 <vQueueUnregisterQueue+0x50>)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	00db      	lsls	r3, r3, #3
 8006682:	4413      	add	r3, r2
 8006684:	2200      	movs	r2, #0
 8006686:	605a      	str	r2, [r3, #4]
				break;
 8006688:	e006      	b.n	8006698 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3301      	adds	r3, #1
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2b07      	cmp	r3, #7
 8006694:	d9e5      	bls.n	8006662 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006696:	bf00      	nop
 8006698:	bf00      	nop
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	24000b80 	.word	0x24000b80

080066a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80066b8:	f001 fd06 	bl	80080c8 <vPortEnterCritical>
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066c2:	b25b      	sxtb	r3, r3
 80066c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c8:	d103      	bne.n	80066d2 <vQueueWaitForMessageRestricted+0x2a>
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066d8:	b25b      	sxtb	r3, r3
 80066da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066de:	d103      	bne.n	80066e8 <vQueueWaitForMessageRestricted+0x40>
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066e8:	f001 fd20 	bl	800812c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d106      	bne.n	8006702 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	3324      	adds	r3, #36	@ 0x24
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	68b9      	ldr	r1, [r7, #8]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 fc5d 	bl	8006fbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006702:	6978      	ldr	r0, [r7, #20]
 8006704:	f7ff fefc 	bl	8006500 <prvUnlockQueue>
	}
 8006708:	bf00      	nop
 800670a:	3718      	adds	r7, #24
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006710:	b580      	push	{r7, lr}
 8006712:	b08e      	sub	sp, #56	@ 0x38
 8006714:	af04      	add	r7, sp, #16
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800671e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10b      	bne.n	800673c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	623b      	str	r3, [r7, #32]
}
 8006736:	bf00      	nop
 8006738:	bf00      	nop
 800673a:	e7fd      	b.n	8006738 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800673c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10b      	bne.n	800675a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	61fb      	str	r3, [r7, #28]
}
 8006754:	bf00      	nop
 8006756:	bf00      	nop
 8006758:	e7fd      	b.n	8006756 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800675a:	23a0      	movs	r3, #160	@ 0xa0
 800675c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	2ba0      	cmp	r3, #160	@ 0xa0
 8006762:	d00b      	beq.n	800677c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	61bb      	str	r3, [r7, #24]
}
 8006776:	bf00      	nop
 8006778:	bf00      	nop
 800677a:	e7fd      	b.n	8006778 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800677c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800677e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006780:	2b00      	cmp	r3, #0
 8006782:	d01e      	beq.n	80067c2 <xTaskCreateStatic+0xb2>
 8006784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006786:	2b00      	cmp	r3, #0
 8006788:	d01b      	beq.n	80067c2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800678a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800678c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800678e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006790:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006792:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006796:	2202      	movs	r2, #2
 8006798:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800679c:	2300      	movs	r3, #0
 800679e:	9303      	str	r3, [sp, #12]
 80067a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a2:	9302      	str	r3, [sp, #8]
 80067a4:	f107 0314 	add.w	r3, r7, #20
 80067a8:	9301      	str	r3, [sp, #4]
 80067aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	68b9      	ldr	r1, [r7, #8]
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 f851 	bl	800685c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80067bc:	f000 f8ee 	bl	800699c <prvAddNewTaskToReadyList>
 80067c0:	e001      	b.n	80067c6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80067c2:	2300      	movs	r3, #0
 80067c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80067c6:	697b      	ldr	r3, [r7, #20]
	}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3728      	adds	r7, #40	@ 0x28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b08c      	sub	sp, #48	@ 0x30
 80067d4:	af04      	add	r7, sp, #16
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	603b      	str	r3, [r7, #0]
 80067dc:	4613      	mov	r3, r2
 80067de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80067e0:	88fb      	ldrh	r3, [r7, #6]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4618      	mov	r0, r3
 80067e6:	f001 fd91 	bl	800830c <pvPortMalloc>
 80067ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00e      	beq.n	8006810 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80067f2:	20a0      	movs	r0, #160	@ 0xa0
 80067f4:	f001 fd8a 	bl	800830c <pvPortMalloc>
 80067f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	631a      	str	r2, [r3, #48]	@ 0x30
 8006806:	e005      	b.n	8006814 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006808:	6978      	ldr	r0, [r7, #20]
 800680a:	f001 fe4d 	bl	80084a8 <vPortFree>
 800680e:	e001      	b.n	8006814 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006810:	2300      	movs	r3, #0
 8006812:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d017      	beq.n	800684a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006822:	88fa      	ldrh	r2, [r7, #6]
 8006824:	2300      	movs	r3, #0
 8006826:	9303      	str	r3, [sp, #12]
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	9302      	str	r3, [sp, #8]
 800682c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800682e:	9301      	str	r3, [sp, #4]
 8006830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	68b9      	ldr	r1, [r7, #8]
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 f80f 	bl	800685c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800683e:	69f8      	ldr	r0, [r7, #28]
 8006840:	f000 f8ac 	bl	800699c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006844:	2301      	movs	r3, #1
 8006846:	61bb      	str	r3, [r7, #24]
 8006848:	e002      	b.n	8006850 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800684a:	f04f 33ff 	mov.w	r3, #4294967295
 800684e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006850:	69bb      	ldr	r3, [r7, #24]
	}
 8006852:	4618      	mov	r0, r3
 8006854:	3720      	adds	r7, #32
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
	...

0800685c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800686a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800686e:	6879      	ldr	r1, [r7, #4]
 8006870:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006874:	440b      	add	r3, r1
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	f023 0307 	bic.w	r3, r3, #7
 8006882:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	f003 0307 	and.w	r3, r3, #7
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00b      	beq.n	80068a6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	617b      	str	r3, [r7, #20]
}
 80068a0:	bf00      	nop
 80068a2:	bf00      	nop
 80068a4:	e7fd      	b.n	80068a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01f      	beq.n	80068ec <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068ac:	2300      	movs	r3, #0
 80068ae:	61fb      	str	r3, [r7, #28]
 80068b0:	e012      	b.n	80068d8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	4413      	add	r3, r2
 80068b8:	7819      	ldrb	r1, [r3, #0]
 80068ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	4413      	add	r3, r2
 80068c0:	3334      	adds	r3, #52	@ 0x34
 80068c2:	460a      	mov	r2, r1
 80068c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	4413      	add	r3, r2
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d006      	beq.n	80068e0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	3301      	adds	r3, #1
 80068d6:	61fb      	str	r3, [r7, #28]
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	2b0f      	cmp	r3, #15
 80068dc:	d9e9      	bls.n	80068b2 <prvInitialiseNewTask+0x56>
 80068de:	e000      	b.n	80068e2 <prvInitialiseNewTask+0x86>
			{
				break;
 80068e0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80068e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80068ea:	e003      	b.n	80068f4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80068ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f6:	2b06      	cmp	r3, #6
 80068f8:	d901      	bls.n	80068fe <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068fa:	2306      	movs	r3, #6
 80068fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006900:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006902:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006906:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006908:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800690a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690c:	2200      	movs	r2, #0
 800690e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006912:	3304      	adds	r3, #4
 8006914:	4618      	mov	r0, r3
 8006916:	f7fe ff8c 	bl	8005832 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800691a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691c:	3318      	adds	r3, #24
 800691e:	4618      	mov	r0, r3
 8006920:	f7fe ff87 	bl	8005832 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006928:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800692a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692c:	f1c3 0207 	rsb	r2, r3, #7
 8006930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006932:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006938:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800693a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693c:	2200      	movs	r2, #0
 800693e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006944:	2200      	movs	r2, #0
 8006946:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800694a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694c:	334c      	adds	r3, #76	@ 0x4c
 800694e:	224c      	movs	r2, #76	@ 0x4c
 8006950:	2100      	movs	r1, #0
 8006952:	4618      	mov	r0, r3
 8006954:	f002 fd66 	bl	8009424 <memset>
 8006958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695a:	4a0d      	ldr	r2, [pc, #52]	@ (8006990 <prvInitialiseNewTask+0x134>)
 800695c:	651a      	str	r2, [r3, #80]	@ 0x50
 800695e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006960:	4a0c      	ldr	r2, [pc, #48]	@ (8006994 <prvInitialiseNewTask+0x138>)
 8006962:	655a      	str	r2, [r3, #84]	@ 0x54
 8006964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006966:	4a0c      	ldr	r2, [pc, #48]	@ (8006998 <prvInitialiseNewTask+0x13c>)
 8006968:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	68f9      	ldr	r1, [r7, #12]
 800696e:	69b8      	ldr	r0, [r7, #24]
 8006970:	f001 fa7a 	bl	8007e68 <pxPortInitialiseStack>
 8006974:	4602      	mov	r2, r0
 8006976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006978:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800697a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800697c:	2b00      	cmp	r3, #0
 800697e:	d002      	beq.n	8006986 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006986:	bf00      	nop
 8006988:	3720      	adds	r7, #32
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	24010818 	.word	0x24010818
 8006994:	24010880 	.word	0x24010880
 8006998:	240108e8 	.word	0x240108e8

0800699c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80069a4:	f001 fb90 	bl	80080c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80069a8:	4b2a      	ldr	r3, [pc, #168]	@ (8006a54 <prvAddNewTaskToReadyList+0xb8>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3301      	adds	r3, #1
 80069ae:	4a29      	ldr	r2, [pc, #164]	@ (8006a54 <prvAddNewTaskToReadyList+0xb8>)
 80069b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80069b2:	4b29      	ldr	r3, [pc, #164]	@ (8006a58 <prvAddNewTaskToReadyList+0xbc>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d109      	bne.n	80069ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80069ba:	4a27      	ldr	r2, [pc, #156]	@ (8006a58 <prvAddNewTaskToReadyList+0xbc>)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80069c0:	4b24      	ldr	r3, [pc, #144]	@ (8006a54 <prvAddNewTaskToReadyList+0xb8>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d110      	bne.n	80069ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80069c8:	f000 fc26 	bl	8007218 <prvInitialiseTaskLists>
 80069cc:	e00d      	b.n	80069ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80069ce:	4b23      	ldr	r3, [pc, #140]	@ (8006a5c <prvAddNewTaskToReadyList+0xc0>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d109      	bne.n	80069ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069d6:	4b20      	ldr	r3, [pc, #128]	@ (8006a58 <prvAddNewTaskToReadyList+0xbc>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d802      	bhi.n	80069ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006a58 <prvAddNewTaskToReadyList+0xbc>)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80069ea:	4b1d      	ldr	r3, [pc, #116]	@ (8006a60 <prvAddNewTaskToReadyList+0xc4>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3301      	adds	r3, #1
 80069f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006a60 <prvAddNewTaskToReadyList+0xc4>)
 80069f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f8:	2201      	movs	r2, #1
 80069fa:	409a      	lsls	r2, r3
 80069fc:	4b19      	ldr	r3, [pc, #100]	@ (8006a64 <prvAddNewTaskToReadyList+0xc8>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	4a18      	ldr	r2, [pc, #96]	@ (8006a64 <prvAddNewTaskToReadyList+0xc8>)
 8006a04:	6013      	str	r3, [r2, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4a15      	ldr	r2, [pc, #84]	@ (8006a68 <prvAddNewTaskToReadyList+0xcc>)
 8006a14:	441a      	add	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	f7fe ff15 	bl	800584c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a22:	f001 fb83 	bl	800812c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a26:	4b0d      	ldr	r3, [pc, #52]	@ (8006a5c <prvAddNewTaskToReadyList+0xc0>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00e      	beq.n	8006a4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006a58 <prvAddNewTaskToReadyList+0xbc>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d207      	bcs.n	8006a4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a6c <prvAddNewTaskToReadyList+0xd0>)
 8006a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a4c:	bf00      	nop
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	24000cc0 	.word	0x24000cc0
 8006a58:	24000bc0 	.word	0x24000bc0
 8006a5c:	24000ccc 	.word	0x24000ccc
 8006a60:	24000cdc 	.word	0x24000cdc
 8006a64:	24000cc8 	.word	0x24000cc8
 8006a68:	24000bc4 	.word	0x24000bc4
 8006a6c:	e000ed04 	.word	0xe000ed04

08006a70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d018      	beq.n	8006ab4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a82:	4b14      	ldr	r3, [pc, #80]	@ (8006ad4 <vTaskDelay+0x64>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00b      	beq.n	8006aa2 <vTaskDelay+0x32>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	60bb      	str	r3, [r7, #8]
}
 8006a9c:	bf00      	nop
 8006a9e:	bf00      	nop
 8006aa0:	e7fd      	b.n	8006a9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006aa2:	f000 f88b 	bl	8006bbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fe39 	bl	8007720 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006aae:	f000 f893 	bl	8006bd8 <xTaskResumeAll>
 8006ab2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d107      	bne.n	8006aca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006aba:	4b07      	ldr	r3, [pc, #28]	@ (8006ad8 <vTaskDelay+0x68>)
 8006abc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ac0:	601a      	str	r2, [r3, #0]
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006aca:	bf00      	nop
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	24000ce8 	.word	0x24000ce8
 8006ad8:	e000ed04 	.word	0xe000ed04

08006adc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08a      	sub	sp, #40	@ 0x28
 8006ae0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006aea:	463a      	mov	r2, r7
 8006aec:	1d39      	adds	r1, r7, #4
 8006aee:	f107 0308 	add.w	r3, r7, #8
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7f9 fedc 	bl	80008b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	9202      	str	r2, [sp, #8]
 8006b00:	9301      	str	r3, [sp, #4]
 8006b02:	2300      	movs	r3, #0
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	2300      	movs	r3, #0
 8006b08:	460a      	mov	r2, r1
 8006b0a:	4924      	ldr	r1, [pc, #144]	@ (8006b9c <vTaskStartScheduler+0xc0>)
 8006b0c:	4824      	ldr	r0, [pc, #144]	@ (8006ba0 <vTaskStartScheduler+0xc4>)
 8006b0e:	f7ff fdff 	bl	8006710 <xTaskCreateStatic>
 8006b12:	4603      	mov	r3, r0
 8006b14:	4a23      	ldr	r2, [pc, #140]	@ (8006ba4 <vTaskStartScheduler+0xc8>)
 8006b16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b18:	4b22      	ldr	r3, [pc, #136]	@ (8006ba4 <vTaskStartScheduler+0xc8>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b20:	2301      	movs	r3, #1
 8006b22:	617b      	str	r3, [r7, #20]
 8006b24:	e001      	b.n	8006b2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b26:	2300      	movs	r3, #0
 8006b28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d102      	bne.n	8006b36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006b30:	f000 fe5c 	bl	80077ec <xTimerCreateTimerTask>
 8006b34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d11b      	bne.n	8006b74 <vTaskStartScheduler+0x98>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	613b      	str	r3, [r7, #16]
}
 8006b4e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b50:	4b15      	ldr	r3, [pc, #84]	@ (8006ba8 <vTaskStartScheduler+0xcc>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	334c      	adds	r3, #76	@ 0x4c
 8006b56:	4a15      	ldr	r2, [pc, #84]	@ (8006bac <vTaskStartScheduler+0xd0>)
 8006b58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b5a:	4b15      	ldr	r3, [pc, #84]	@ (8006bb0 <vTaskStartScheduler+0xd4>)
 8006b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b62:	4b14      	ldr	r3, [pc, #80]	@ (8006bb4 <vTaskStartScheduler+0xd8>)
 8006b64:	2201      	movs	r2, #1
 8006b66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b68:	4b13      	ldr	r3, [pc, #76]	@ (8006bb8 <vTaskStartScheduler+0xdc>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b6e:	f001 fa07 	bl	8007f80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b72:	e00f      	b.n	8006b94 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7a:	d10b      	bne.n	8006b94 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	60fb      	str	r3, [r7, #12]
}
 8006b8e:	bf00      	nop
 8006b90:	bf00      	nop
 8006b92:	e7fd      	b.n	8006b90 <vTaskStartScheduler+0xb4>
}
 8006b94:	bf00      	nop
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	0800a030 	.word	0x0800a030
 8006ba0:	080071e9 	.word	0x080071e9
 8006ba4:	24000ce4 	.word	0x24000ce4
 8006ba8:	24000bc0 	.word	0x24000bc0
 8006bac:	24000014 	.word	0x24000014
 8006bb0:	24000ce0 	.word	0x24000ce0
 8006bb4:	24000ccc 	.word	0x24000ccc
 8006bb8:	24000cc4 	.word	0x24000cc4

08006bbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006bc0:	4b04      	ldr	r3, [pc, #16]	@ (8006bd4 <vTaskSuspendAll+0x18>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	4a03      	ldr	r2, [pc, #12]	@ (8006bd4 <vTaskSuspendAll+0x18>)
 8006bc8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006bca:	bf00      	nop
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	24000ce8 	.word	0x24000ce8

08006bd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006bde:	2300      	movs	r3, #0
 8006be0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006be2:	2300      	movs	r3, #0
 8006be4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006be6:	4b42      	ldr	r3, [pc, #264]	@ (8006cf0 <xTaskResumeAll+0x118>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10b      	bne.n	8006c06 <xTaskResumeAll+0x2e>
	__asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	603b      	str	r3, [r7, #0]
}
 8006c00:	bf00      	nop
 8006c02:	bf00      	nop
 8006c04:	e7fd      	b.n	8006c02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c06:	f001 fa5f 	bl	80080c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c0a:	4b39      	ldr	r3, [pc, #228]	@ (8006cf0 <xTaskResumeAll+0x118>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	4a37      	ldr	r2, [pc, #220]	@ (8006cf0 <xTaskResumeAll+0x118>)
 8006c12:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c14:	4b36      	ldr	r3, [pc, #216]	@ (8006cf0 <xTaskResumeAll+0x118>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d161      	bne.n	8006ce0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c1c:	4b35      	ldr	r3, [pc, #212]	@ (8006cf4 <xTaskResumeAll+0x11c>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d05d      	beq.n	8006ce0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c24:	e02e      	b.n	8006c84 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c26:	4b34      	ldr	r3, [pc, #208]	@ (8006cf8 <xTaskResumeAll+0x120>)
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3318      	adds	r3, #24
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7fe fe67 	bl	8005906 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7fe fe62 	bl	8005906 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c46:	2201      	movs	r2, #1
 8006c48:	409a      	lsls	r2, r3
 8006c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8006cfc <xTaskResumeAll+0x124>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	4a2a      	ldr	r2, [pc, #168]	@ (8006cfc <xTaskResumeAll+0x124>)
 8006c52:	6013      	str	r3, [r2, #0]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c58:	4613      	mov	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4a27      	ldr	r2, [pc, #156]	@ (8006d00 <xTaskResumeAll+0x128>)
 8006c62:	441a      	add	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	3304      	adds	r3, #4
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4610      	mov	r0, r2
 8006c6c:	f7fe fdee 	bl	800584c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c74:	4b23      	ldr	r3, [pc, #140]	@ (8006d04 <xTaskResumeAll+0x12c>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d302      	bcc.n	8006c84 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006c7e:	4b22      	ldr	r3, [pc, #136]	@ (8006d08 <xTaskResumeAll+0x130>)
 8006c80:	2201      	movs	r2, #1
 8006c82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c84:	4b1c      	ldr	r3, [pc, #112]	@ (8006cf8 <xTaskResumeAll+0x120>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1cc      	bne.n	8006c26 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c92:	f000 fb65 	bl	8007360 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c96:	4b1d      	ldr	r3, [pc, #116]	@ (8006d0c <xTaskResumeAll+0x134>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d010      	beq.n	8006cc4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ca2:	f000 f847 	bl	8006d34 <xTaskIncrementTick>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006cac:	4b16      	ldr	r3, [pc, #88]	@ (8006d08 <xTaskResumeAll+0x130>)
 8006cae:	2201      	movs	r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1f1      	bne.n	8006ca2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006cbe:	4b13      	ldr	r3, [pc, #76]	@ (8006d0c <xTaskResumeAll+0x134>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006cc4:	4b10      	ldr	r3, [pc, #64]	@ (8006d08 <xTaskResumeAll+0x130>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d009      	beq.n	8006ce0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8006d10 <xTaskResumeAll+0x138>)
 8006cd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ce0:	f001 fa24 	bl	800812c <vPortExitCritical>

	return xAlreadyYielded;
 8006ce4:	68bb      	ldr	r3, [r7, #8]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	24000ce8 	.word	0x24000ce8
 8006cf4:	24000cc0 	.word	0x24000cc0
 8006cf8:	24000c80 	.word	0x24000c80
 8006cfc:	24000cc8 	.word	0x24000cc8
 8006d00:	24000bc4 	.word	0x24000bc4
 8006d04:	24000bc0 	.word	0x24000bc0
 8006d08:	24000cd4 	.word	0x24000cd4
 8006d0c:	24000cd0 	.word	0x24000cd0
 8006d10:	e000ed04 	.word	0xe000ed04

08006d14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d1a:	4b05      	ldr	r3, [pc, #20]	@ (8006d30 <xTaskGetTickCount+0x1c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d20:	687b      	ldr	r3, [r7, #4]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	24000cc4 	.word	0x24000cc4

08006d34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d3e:	4b4f      	ldr	r3, [pc, #316]	@ (8006e7c <xTaskIncrementTick+0x148>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f040 808f 	bne.w	8006e66 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d48:	4b4d      	ldr	r3, [pc, #308]	@ (8006e80 <xTaskIncrementTick+0x14c>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d50:	4a4b      	ldr	r2, [pc, #300]	@ (8006e80 <xTaskIncrementTick+0x14c>)
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d121      	bne.n	8006da0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d5c:	4b49      	ldr	r3, [pc, #292]	@ (8006e84 <xTaskIncrementTick+0x150>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00b      	beq.n	8006d7e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	603b      	str	r3, [r7, #0]
}
 8006d78:	bf00      	nop
 8006d7a:	bf00      	nop
 8006d7c:	e7fd      	b.n	8006d7a <xTaskIncrementTick+0x46>
 8006d7e:	4b41      	ldr	r3, [pc, #260]	@ (8006e84 <xTaskIncrementTick+0x150>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	4b40      	ldr	r3, [pc, #256]	@ (8006e88 <xTaskIncrementTick+0x154>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a3e      	ldr	r2, [pc, #248]	@ (8006e84 <xTaskIncrementTick+0x150>)
 8006d8a:	6013      	str	r3, [r2, #0]
 8006d8c:	4a3e      	ldr	r2, [pc, #248]	@ (8006e88 <xTaskIncrementTick+0x154>)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6013      	str	r3, [r2, #0]
 8006d92:	4b3e      	ldr	r3, [pc, #248]	@ (8006e8c <xTaskIncrementTick+0x158>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	3301      	adds	r3, #1
 8006d98:	4a3c      	ldr	r2, [pc, #240]	@ (8006e8c <xTaskIncrementTick+0x158>)
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	f000 fae0 	bl	8007360 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006da0:	4b3b      	ldr	r3, [pc, #236]	@ (8006e90 <xTaskIncrementTick+0x15c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d348      	bcc.n	8006e3c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006daa:	4b36      	ldr	r3, [pc, #216]	@ (8006e84 <xTaskIncrementTick+0x150>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d104      	bne.n	8006dbe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006db4:	4b36      	ldr	r3, [pc, #216]	@ (8006e90 <xTaskIncrementTick+0x15c>)
 8006db6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dba:	601a      	str	r2, [r3, #0]
					break;
 8006dbc:	e03e      	b.n	8006e3c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dbe:	4b31      	ldr	r3, [pc, #196]	@ (8006e84 <xTaskIncrementTick+0x150>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d203      	bcs.n	8006dde <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006dd6:	4a2e      	ldr	r2, [pc, #184]	@ (8006e90 <xTaskIncrementTick+0x15c>)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ddc:	e02e      	b.n	8006e3c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	3304      	adds	r3, #4
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fe fd8f 	bl	8005906 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d004      	beq.n	8006dfa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	3318      	adds	r3, #24
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fe fd86 	bl	8005906 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfe:	2201      	movs	r2, #1
 8006e00:	409a      	lsls	r2, r3
 8006e02:	4b24      	ldr	r3, [pc, #144]	@ (8006e94 <xTaskIncrementTick+0x160>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	4a22      	ldr	r2, [pc, #136]	@ (8006e94 <xTaskIncrementTick+0x160>)
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e10:	4613      	mov	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4a1f      	ldr	r2, [pc, #124]	@ (8006e98 <xTaskIncrementTick+0x164>)
 8006e1a:	441a      	add	r2, r3
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	3304      	adds	r3, #4
 8006e20:	4619      	mov	r1, r3
 8006e22:	4610      	mov	r0, r2
 8006e24:	f7fe fd12 	bl	800584c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8006e9c <xTaskIncrementTick+0x168>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d3b9      	bcc.n	8006daa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006e36:	2301      	movs	r3, #1
 8006e38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e3a:	e7b6      	b.n	8006daa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e3c:	4b17      	ldr	r3, [pc, #92]	@ (8006e9c <xTaskIncrementTick+0x168>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e42:	4915      	ldr	r1, [pc, #84]	@ (8006e98 <xTaskIncrementTick+0x164>)
 8006e44:	4613      	mov	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	440b      	add	r3, r1
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d901      	bls.n	8006e58 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006e54:	2301      	movs	r3, #1
 8006e56:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006e58:	4b11      	ldr	r3, [pc, #68]	@ (8006ea0 <xTaskIncrementTick+0x16c>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d007      	beq.n	8006e70 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006e60:	2301      	movs	r3, #1
 8006e62:	617b      	str	r3, [r7, #20]
 8006e64:	e004      	b.n	8006e70 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006e66:	4b0f      	ldr	r3, [pc, #60]	@ (8006ea4 <xTaskIncrementTick+0x170>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8006ea4 <xTaskIncrementTick+0x170>)
 8006e6e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006e70:	697b      	ldr	r3, [r7, #20]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	24000ce8 	.word	0x24000ce8
 8006e80:	24000cc4 	.word	0x24000cc4
 8006e84:	24000c78 	.word	0x24000c78
 8006e88:	24000c7c 	.word	0x24000c7c
 8006e8c:	24000cd8 	.word	0x24000cd8
 8006e90:	24000ce0 	.word	0x24000ce0
 8006e94:	24000cc8 	.word	0x24000cc8
 8006e98:	24000bc4 	.word	0x24000bc4
 8006e9c:	24000bc0 	.word	0x24000bc0
 8006ea0:	24000cd4 	.word	0x24000cd4
 8006ea4:	24000cd0 	.word	0x24000cd0

08006ea8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006eae:	4b2a      	ldr	r3, [pc, #168]	@ (8006f58 <vTaskSwitchContext+0xb0>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006eb6:	4b29      	ldr	r3, [pc, #164]	@ (8006f5c <vTaskSwitchContext+0xb4>)
 8006eb8:	2201      	movs	r2, #1
 8006eba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ebc:	e045      	b.n	8006f4a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006ebe:	4b27      	ldr	r3, [pc, #156]	@ (8006f5c <vTaskSwitchContext+0xb4>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ec4:	4b26      	ldr	r3, [pc, #152]	@ (8006f60 <vTaskSwitchContext+0xb8>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	fab3 f383 	clz	r3, r3
 8006ed0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006ed2:	7afb      	ldrb	r3, [r7, #11]
 8006ed4:	f1c3 031f 	rsb	r3, r3, #31
 8006ed8:	617b      	str	r3, [r7, #20]
 8006eda:	4922      	ldr	r1, [pc, #136]	@ (8006f64 <vTaskSwitchContext+0xbc>)
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	440b      	add	r3, r1
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10b      	bne.n	8006f06 <vTaskSwitchContext+0x5e>
	__asm volatile
 8006eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	607b      	str	r3, [r7, #4]
}
 8006f00:	bf00      	nop
 8006f02:	bf00      	nop
 8006f04:	e7fd      	b.n	8006f02 <vTaskSwitchContext+0x5a>
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4a14      	ldr	r2, [pc, #80]	@ (8006f64 <vTaskSwitchContext+0xbc>)
 8006f12:	4413      	add	r3, r2
 8006f14:	613b      	str	r3, [r7, #16]
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	605a      	str	r2, [r3, #4]
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	3308      	adds	r3, #8
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d104      	bne.n	8006f36 <vTaskSwitchContext+0x8e>
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	605a      	str	r2, [r3, #4]
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8006f68 <vTaskSwitchContext+0xc0>)
 8006f3e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f40:	4b09      	ldr	r3, [pc, #36]	@ (8006f68 <vTaskSwitchContext+0xc0>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	334c      	adds	r3, #76	@ 0x4c
 8006f46:	4a09      	ldr	r2, [pc, #36]	@ (8006f6c <vTaskSwitchContext+0xc4>)
 8006f48:	6013      	str	r3, [r2, #0]
}
 8006f4a:	bf00      	nop
 8006f4c:	371c      	adds	r7, #28
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	24000ce8 	.word	0x24000ce8
 8006f5c:	24000cd4 	.word	0x24000cd4
 8006f60:	24000cc8 	.word	0x24000cc8
 8006f64:	24000bc4 	.word	0x24000bc4
 8006f68:	24000bc0 	.word	0x24000bc0
 8006f6c:	24000014 	.word	0x24000014

08006f70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10b      	bne.n	8006f98 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	60fb      	str	r3, [r7, #12]
}
 8006f92:	bf00      	nop
 8006f94:	bf00      	nop
 8006f96:	e7fd      	b.n	8006f94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f98:	4b07      	ldr	r3, [pc, #28]	@ (8006fb8 <vTaskPlaceOnEventList+0x48>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3318      	adds	r3, #24
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7fe fc77 	bl	8005894 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	6838      	ldr	r0, [r7, #0]
 8006faa:	f000 fbb9 	bl	8007720 <prvAddCurrentTaskToDelayedList>
}
 8006fae:	bf00      	nop
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	24000bc0 	.word	0x24000bc0

08006fbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10b      	bne.n	8006fe6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	617b      	str	r3, [r7, #20]
}
 8006fe0:	bf00      	nop
 8006fe2:	bf00      	nop
 8006fe4:	e7fd      	b.n	8006fe2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8007010 <vTaskPlaceOnEventListRestricted+0x54>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3318      	adds	r3, #24
 8006fec:	4619      	mov	r1, r3
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f7fe fc2c 	bl	800584c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d002      	beq.n	8007000 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8006ffe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007000:	6879      	ldr	r1, [r7, #4]
 8007002:	68b8      	ldr	r0, [r7, #8]
 8007004:	f000 fb8c 	bl	8007720 <prvAddCurrentTaskToDelayedList>
	}
 8007008:	bf00      	nop
 800700a:	3718      	adds	r7, #24
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	24000bc0 	.word	0x24000bc0

08007014 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10b      	bne.n	8007042 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	60fb      	str	r3, [r7, #12]
}
 800703c:	bf00      	nop
 800703e:	bf00      	nop
 8007040:	e7fd      	b.n	800703e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	3318      	adds	r3, #24
 8007046:	4618      	mov	r0, r3
 8007048:	f7fe fc5d 	bl	8005906 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800704c:	4b1d      	ldr	r3, [pc, #116]	@ (80070c4 <xTaskRemoveFromEventList+0xb0>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d11c      	bne.n	800708e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	3304      	adds	r3, #4
 8007058:	4618      	mov	r0, r3
 800705a:	f7fe fc54 	bl	8005906 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007062:	2201      	movs	r2, #1
 8007064:	409a      	lsls	r2, r3
 8007066:	4b18      	ldr	r3, [pc, #96]	@ (80070c8 <xTaskRemoveFromEventList+0xb4>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4313      	orrs	r3, r2
 800706c:	4a16      	ldr	r2, [pc, #88]	@ (80070c8 <xTaskRemoveFromEventList+0xb4>)
 800706e:	6013      	str	r3, [r2, #0]
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007074:	4613      	mov	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4a13      	ldr	r2, [pc, #76]	@ (80070cc <xTaskRemoveFromEventList+0xb8>)
 800707e:	441a      	add	r2, r3
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	3304      	adds	r3, #4
 8007084:	4619      	mov	r1, r3
 8007086:	4610      	mov	r0, r2
 8007088:	f7fe fbe0 	bl	800584c <vListInsertEnd>
 800708c:	e005      	b.n	800709a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	3318      	adds	r3, #24
 8007092:	4619      	mov	r1, r3
 8007094:	480e      	ldr	r0, [pc, #56]	@ (80070d0 <xTaskRemoveFromEventList+0xbc>)
 8007096:	f7fe fbd9 	bl	800584c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800709e:	4b0d      	ldr	r3, [pc, #52]	@ (80070d4 <xTaskRemoveFromEventList+0xc0>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d905      	bls.n	80070b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80070a8:	2301      	movs	r3, #1
 80070aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80070ac:	4b0a      	ldr	r3, [pc, #40]	@ (80070d8 <xTaskRemoveFromEventList+0xc4>)
 80070ae:	2201      	movs	r2, #1
 80070b0:	601a      	str	r2, [r3, #0]
 80070b2:	e001      	b.n	80070b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80070b4:	2300      	movs	r3, #0
 80070b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80070b8:	697b      	ldr	r3, [r7, #20]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	24000ce8 	.word	0x24000ce8
 80070c8:	24000cc8 	.word	0x24000cc8
 80070cc:	24000bc4 	.word	0x24000bc4
 80070d0:	24000c80 	.word	0x24000c80
 80070d4:	24000bc0 	.word	0x24000bc0
 80070d8:	24000cd4 	.word	0x24000cd4

080070dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070e4:	4b06      	ldr	r3, [pc, #24]	@ (8007100 <vTaskInternalSetTimeOutState+0x24>)
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80070ec:	4b05      	ldr	r3, [pc, #20]	@ (8007104 <vTaskInternalSetTimeOutState+0x28>)
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	605a      	str	r2, [r3, #4]
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	24000cd8 	.word	0x24000cd8
 8007104:	24000cc4 	.word	0x24000cc4

08007108 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10b      	bne.n	8007130 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	613b      	str	r3, [r7, #16]
}
 800712a:	bf00      	nop
 800712c:	bf00      	nop
 800712e:	e7fd      	b.n	800712c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10b      	bne.n	800714e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	60fb      	str	r3, [r7, #12]
}
 8007148:	bf00      	nop
 800714a:	bf00      	nop
 800714c:	e7fd      	b.n	800714a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800714e:	f000 ffbb 	bl	80080c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007152:	4b1d      	ldr	r3, [pc, #116]	@ (80071c8 <xTaskCheckForTimeOut+0xc0>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	69ba      	ldr	r2, [r7, #24]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716a:	d102      	bne.n	8007172 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800716c:	2300      	movs	r3, #0
 800716e:	61fb      	str	r3, [r7, #28]
 8007170:	e023      	b.n	80071ba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	4b15      	ldr	r3, [pc, #84]	@ (80071cc <xTaskCheckForTimeOut+0xc4>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	429a      	cmp	r2, r3
 800717c:	d007      	beq.n	800718e <xTaskCheckForTimeOut+0x86>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	69ba      	ldr	r2, [r7, #24]
 8007184:	429a      	cmp	r2, r3
 8007186:	d302      	bcc.n	800718e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007188:	2301      	movs	r3, #1
 800718a:	61fb      	str	r3, [r7, #28]
 800718c:	e015      	b.n	80071ba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	429a      	cmp	r2, r3
 8007196:	d20b      	bcs.n	80071b0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	1ad2      	subs	r2, r2, r3
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f7ff ff99 	bl	80070dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80071aa:	2300      	movs	r3, #0
 80071ac:	61fb      	str	r3, [r7, #28]
 80071ae:	e004      	b.n	80071ba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	2200      	movs	r2, #0
 80071b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80071b6:	2301      	movs	r3, #1
 80071b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80071ba:	f000 ffb7 	bl	800812c <vPortExitCritical>

	return xReturn;
 80071be:	69fb      	ldr	r3, [r7, #28]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3720      	adds	r7, #32
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	24000cc4 	.word	0x24000cc4
 80071cc:	24000cd8 	.word	0x24000cd8

080071d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80071d0:	b480      	push	{r7}
 80071d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80071d4:	4b03      	ldr	r3, [pc, #12]	@ (80071e4 <vTaskMissedYield+0x14>)
 80071d6:	2201      	movs	r2, #1
 80071d8:	601a      	str	r2, [r3, #0]
}
 80071da:	bf00      	nop
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	24000cd4 	.word	0x24000cd4

080071e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80071f0:	f000 f852 	bl	8007298 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071f4:	4b06      	ldr	r3, [pc, #24]	@ (8007210 <prvIdleTask+0x28>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d9f9      	bls.n	80071f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80071fc:	4b05      	ldr	r3, [pc, #20]	@ (8007214 <prvIdleTask+0x2c>)
 80071fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800720c:	e7f0      	b.n	80071f0 <prvIdleTask+0x8>
 800720e:	bf00      	nop
 8007210:	24000bc4 	.word	0x24000bc4
 8007214:	e000ed04 	.word	0xe000ed04

08007218 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800721e:	2300      	movs	r3, #0
 8007220:	607b      	str	r3, [r7, #4]
 8007222:	e00c      	b.n	800723e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	4613      	mov	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4a12      	ldr	r2, [pc, #72]	@ (8007278 <prvInitialiseTaskLists+0x60>)
 8007230:	4413      	add	r3, r2
 8007232:	4618      	mov	r0, r3
 8007234:	f7fe fadd 	bl	80057f2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	3301      	adds	r3, #1
 800723c:	607b      	str	r3, [r7, #4]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b06      	cmp	r3, #6
 8007242:	d9ef      	bls.n	8007224 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007244:	480d      	ldr	r0, [pc, #52]	@ (800727c <prvInitialiseTaskLists+0x64>)
 8007246:	f7fe fad4 	bl	80057f2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800724a:	480d      	ldr	r0, [pc, #52]	@ (8007280 <prvInitialiseTaskLists+0x68>)
 800724c:	f7fe fad1 	bl	80057f2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007250:	480c      	ldr	r0, [pc, #48]	@ (8007284 <prvInitialiseTaskLists+0x6c>)
 8007252:	f7fe face 	bl	80057f2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007256:	480c      	ldr	r0, [pc, #48]	@ (8007288 <prvInitialiseTaskLists+0x70>)
 8007258:	f7fe facb 	bl	80057f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800725c:	480b      	ldr	r0, [pc, #44]	@ (800728c <prvInitialiseTaskLists+0x74>)
 800725e:	f7fe fac8 	bl	80057f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007262:	4b0b      	ldr	r3, [pc, #44]	@ (8007290 <prvInitialiseTaskLists+0x78>)
 8007264:	4a05      	ldr	r2, [pc, #20]	@ (800727c <prvInitialiseTaskLists+0x64>)
 8007266:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007268:	4b0a      	ldr	r3, [pc, #40]	@ (8007294 <prvInitialiseTaskLists+0x7c>)
 800726a:	4a05      	ldr	r2, [pc, #20]	@ (8007280 <prvInitialiseTaskLists+0x68>)
 800726c:	601a      	str	r2, [r3, #0]
}
 800726e:	bf00      	nop
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	24000bc4 	.word	0x24000bc4
 800727c:	24000c50 	.word	0x24000c50
 8007280:	24000c64 	.word	0x24000c64
 8007284:	24000c80 	.word	0x24000c80
 8007288:	24000c94 	.word	0x24000c94
 800728c:	24000cac 	.word	0x24000cac
 8007290:	24000c78 	.word	0x24000c78
 8007294:	24000c7c 	.word	0x24000c7c

08007298 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800729e:	e019      	b.n	80072d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80072a0:	f000 ff12 	bl	80080c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072a4:	4b10      	ldr	r3, [pc, #64]	@ (80072e8 <prvCheckTasksWaitingTermination+0x50>)
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	3304      	adds	r3, #4
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7fe fb28 	bl	8005906 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072b6:	4b0d      	ldr	r3, [pc, #52]	@ (80072ec <prvCheckTasksWaitingTermination+0x54>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	4a0b      	ldr	r2, [pc, #44]	@ (80072ec <prvCheckTasksWaitingTermination+0x54>)
 80072be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072c0:	4b0b      	ldr	r3, [pc, #44]	@ (80072f0 <prvCheckTasksWaitingTermination+0x58>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3b01      	subs	r3, #1
 80072c6:	4a0a      	ldr	r2, [pc, #40]	@ (80072f0 <prvCheckTasksWaitingTermination+0x58>)
 80072c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80072ca:	f000 ff2f 	bl	800812c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f810 	bl	80072f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072d4:	4b06      	ldr	r3, [pc, #24]	@ (80072f0 <prvCheckTasksWaitingTermination+0x58>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1e1      	bne.n	80072a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80072dc:	bf00      	nop
 80072de:	bf00      	nop
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	24000c94 	.word	0x24000c94
 80072ec:	24000cc0 	.word	0x24000cc0
 80072f0:	24000ca8 	.word	0x24000ca8

080072f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	334c      	adds	r3, #76	@ 0x4c
 8007300:	4618      	mov	r0, r3
 8007302:	f002 f897 	bl	8009434 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800730c:	2b00      	cmp	r3, #0
 800730e:	d108      	bne.n	8007322 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007314:	4618      	mov	r0, r3
 8007316:	f001 f8c7 	bl	80084a8 <vPortFree>
				vPortFree( pxTCB );
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f001 f8c4 	bl	80084a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007320:	e019      	b.n	8007356 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007328:	2b01      	cmp	r3, #1
 800732a:	d103      	bne.n	8007334 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f001 f8bb 	bl	80084a8 <vPortFree>
	}
 8007332:	e010      	b.n	8007356 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800733a:	2b02      	cmp	r3, #2
 800733c:	d00b      	beq.n	8007356 <prvDeleteTCB+0x62>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	60fb      	str	r3, [r7, #12]
}
 8007350:	bf00      	nop
 8007352:	bf00      	nop
 8007354:	e7fd      	b.n	8007352 <prvDeleteTCB+0x5e>
	}
 8007356:	bf00      	nop
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
	...

08007360 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007366:	4b0c      	ldr	r3, [pc, #48]	@ (8007398 <prvResetNextTaskUnblockTime+0x38>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d104      	bne.n	800737a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007370:	4b0a      	ldr	r3, [pc, #40]	@ (800739c <prvResetNextTaskUnblockTime+0x3c>)
 8007372:	f04f 32ff 	mov.w	r2, #4294967295
 8007376:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007378:	e008      	b.n	800738c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800737a:	4b07      	ldr	r3, [pc, #28]	@ (8007398 <prvResetNextTaskUnblockTime+0x38>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	4a04      	ldr	r2, [pc, #16]	@ (800739c <prvResetNextTaskUnblockTime+0x3c>)
 800738a:	6013      	str	r3, [r2, #0]
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	24000c78 	.word	0x24000c78
 800739c:	24000ce0 	.word	0x24000ce0

080073a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80073a6:	4b0b      	ldr	r3, [pc, #44]	@ (80073d4 <xTaskGetSchedulerState+0x34>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d102      	bne.n	80073b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80073ae:	2301      	movs	r3, #1
 80073b0:	607b      	str	r3, [r7, #4]
 80073b2:	e008      	b.n	80073c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073b4:	4b08      	ldr	r3, [pc, #32]	@ (80073d8 <xTaskGetSchedulerState+0x38>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d102      	bne.n	80073c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80073bc:	2302      	movs	r3, #2
 80073be:	607b      	str	r3, [r7, #4]
 80073c0:	e001      	b.n	80073c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80073c2:	2300      	movs	r3, #0
 80073c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80073c6:	687b      	ldr	r3, [r7, #4]
	}
 80073c8:	4618      	mov	r0, r3
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	24000ccc 	.word	0x24000ccc
 80073d8:	24000ce8 	.word	0x24000ce8

080073dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80073e8:	2300      	movs	r3, #0
 80073ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d05e      	beq.n	80074b0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073f6:	4b31      	ldr	r3, [pc, #196]	@ (80074bc <xTaskPriorityInherit+0xe0>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d24e      	bcs.n	800749e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	2b00      	cmp	r3, #0
 8007406:	db06      	blt.n	8007416 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007408:	4b2c      	ldr	r3, [pc, #176]	@ (80074bc <xTaskPriorityInherit+0xe0>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740e:	f1c3 0207 	rsb	r2, r3, #7
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	6959      	ldr	r1, [r3, #20]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800741e:	4613      	mov	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4a26      	ldr	r2, [pc, #152]	@ (80074c0 <xTaskPriorityInherit+0xe4>)
 8007428:	4413      	add	r3, r2
 800742a:	4299      	cmp	r1, r3
 800742c:	d12f      	bne.n	800748e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	3304      	adds	r3, #4
 8007432:	4618      	mov	r0, r3
 8007434:	f7fe fa67 	bl	8005906 <uxListRemove>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d10a      	bne.n	8007454 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007442:	2201      	movs	r2, #1
 8007444:	fa02 f303 	lsl.w	r3, r2, r3
 8007448:	43da      	mvns	r2, r3
 800744a:	4b1e      	ldr	r3, [pc, #120]	@ (80074c4 <xTaskPriorityInherit+0xe8>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4013      	ands	r3, r2
 8007450:	4a1c      	ldr	r2, [pc, #112]	@ (80074c4 <xTaskPriorityInherit+0xe8>)
 8007452:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007454:	4b19      	ldr	r3, [pc, #100]	@ (80074bc <xTaskPriorityInherit+0xe0>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007462:	2201      	movs	r2, #1
 8007464:	409a      	lsls	r2, r3
 8007466:	4b17      	ldr	r3, [pc, #92]	@ (80074c4 <xTaskPriorityInherit+0xe8>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4313      	orrs	r3, r2
 800746c:	4a15      	ldr	r2, [pc, #84]	@ (80074c4 <xTaskPriorityInherit+0xe8>)
 800746e:	6013      	str	r3, [r2, #0]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007474:	4613      	mov	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4a10      	ldr	r2, [pc, #64]	@ (80074c0 <xTaskPriorityInherit+0xe4>)
 800747e:	441a      	add	r2, r3
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	3304      	adds	r3, #4
 8007484:	4619      	mov	r1, r3
 8007486:	4610      	mov	r0, r2
 8007488:	f7fe f9e0 	bl	800584c <vListInsertEnd>
 800748c:	e004      	b.n	8007498 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800748e:	4b0b      	ldr	r3, [pc, #44]	@ (80074bc <xTaskPriorityInherit+0xe0>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007498:	2301      	movs	r3, #1
 800749a:	60fb      	str	r3, [r7, #12]
 800749c:	e008      	b.n	80074b0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074a2:	4b06      	ldr	r3, [pc, #24]	@ (80074bc <xTaskPriorityInherit+0xe0>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d201      	bcs.n	80074b0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80074ac:	2301      	movs	r3, #1
 80074ae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074b0:	68fb      	ldr	r3, [r7, #12]
	}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	24000bc0 	.word	0x24000bc0
 80074c0:	24000bc4 	.word	0x24000bc4
 80074c4:	24000cc8 	.word	0x24000cc8

080074c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80074d4:	2300      	movs	r3, #0
 80074d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d070      	beq.n	80075c0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80074de:	4b3b      	ldr	r3, [pc, #236]	@ (80075cc <xTaskPriorityDisinherit+0x104>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d00b      	beq.n	8007500 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80074e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ec:	f383 8811 	msr	BASEPRI, r3
 80074f0:	f3bf 8f6f 	isb	sy
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	60fb      	str	r3, [r7, #12]
}
 80074fa:	bf00      	nop
 80074fc:	bf00      	nop
 80074fe:	e7fd      	b.n	80074fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10b      	bne.n	8007520 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750c:	f383 8811 	msr	BASEPRI, r3
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	60bb      	str	r3, [r7, #8]
}
 800751a:	bf00      	nop
 800751c:	bf00      	nop
 800751e:	e7fd      	b.n	800751c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007524:	1e5a      	subs	r2, r3, #1
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007532:	429a      	cmp	r2, r3
 8007534:	d044      	beq.n	80075c0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800753a:	2b00      	cmp	r3, #0
 800753c:	d140      	bne.n	80075c0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	3304      	adds	r3, #4
 8007542:	4618      	mov	r0, r3
 8007544:	f7fe f9df 	bl	8005906 <uxListRemove>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d115      	bne.n	800757a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007552:	491f      	ldr	r1, [pc, #124]	@ (80075d0 <xTaskPriorityDisinherit+0x108>)
 8007554:	4613      	mov	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	440b      	add	r3, r1
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10a      	bne.n	800757a <xTaskPriorityDisinherit+0xb2>
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007568:	2201      	movs	r2, #1
 800756a:	fa02 f303 	lsl.w	r3, r2, r3
 800756e:	43da      	mvns	r2, r3
 8007570:	4b18      	ldr	r3, [pc, #96]	@ (80075d4 <xTaskPriorityDisinherit+0x10c>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4013      	ands	r3, r2
 8007576:	4a17      	ldr	r2, [pc, #92]	@ (80075d4 <xTaskPriorityDisinherit+0x10c>)
 8007578:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007586:	f1c3 0207 	rsb	r2, r3, #7
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007592:	2201      	movs	r2, #1
 8007594:	409a      	lsls	r2, r3
 8007596:	4b0f      	ldr	r3, [pc, #60]	@ (80075d4 <xTaskPriorityDisinherit+0x10c>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4313      	orrs	r3, r2
 800759c:	4a0d      	ldr	r2, [pc, #52]	@ (80075d4 <xTaskPriorityDisinherit+0x10c>)
 800759e:	6013      	str	r3, [r2, #0]
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a4:	4613      	mov	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4a08      	ldr	r2, [pc, #32]	@ (80075d0 <xTaskPriorityDisinherit+0x108>)
 80075ae:	441a      	add	r2, r3
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	3304      	adds	r3, #4
 80075b4:	4619      	mov	r1, r3
 80075b6:	4610      	mov	r0, r2
 80075b8:	f7fe f948 	bl	800584c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80075bc:	2301      	movs	r3, #1
 80075be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075c0:	697b      	ldr	r3, [r7, #20]
	}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3718      	adds	r7, #24
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	24000bc0 	.word	0x24000bc0
 80075d0:	24000bc4 	.word	0x24000bc4
 80075d4:	24000cc8 	.word	0x24000cc8

080075d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b088      	sub	sp, #32
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80075e6:	2301      	movs	r3, #1
 80075e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d079      	beq.n	80076e4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10b      	bne.n	8007610 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80075f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	60fb      	str	r3, [r7, #12]
}
 800760a:	bf00      	nop
 800760c:	bf00      	nop
 800760e:	e7fd      	b.n	800760c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	429a      	cmp	r2, r3
 8007618:	d902      	bls.n	8007620 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	61fb      	str	r3, [r7, #28]
 800761e:	e002      	b.n	8007626 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007624:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800762a:	69fa      	ldr	r2, [r7, #28]
 800762c:	429a      	cmp	r2, r3
 800762e:	d059      	beq.n	80076e4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	429a      	cmp	r2, r3
 8007638:	d154      	bne.n	80076e4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800763a:	4b2c      	ldr	r3, [pc, #176]	@ (80076ec <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	69ba      	ldr	r2, [r7, #24]
 8007640:	429a      	cmp	r2, r3
 8007642:	d10b      	bne.n	800765c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	60bb      	str	r3, [r7, #8]
}
 8007656:	bf00      	nop
 8007658:	bf00      	nop
 800765a:	e7fd      	b.n	8007658 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007660:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	69fa      	ldr	r2, [r7, #28]
 8007666:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	2b00      	cmp	r3, #0
 800766e:	db04      	blt.n	800767a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	f1c3 0207 	rsb	r2, r3, #7
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	6959      	ldr	r1, [r3, #20]
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	4613      	mov	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4a19      	ldr	r2, [pc, #100]	@ (80076f0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800768a:	4413      	add	r3, r2
 800768c:	4299      	cmp	r1, r3
 800768e:	d129      	bne.n	80076e4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	3304      	adds	r3, #4
 8007694:	4618      	mov	r0, r3
 8007696:	f7fe f936 	bl	8005906 <uxListRemove>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10a      	bne.n	80076b6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a4:	2201      	movs	r2, #1
 80076a6:	fa02 f303 	lsl.w	r3, r2, r3
 80076aa:	43da      	mvns	r2, r3
 80076ac:	4b11      	ldr	r3, [pc, #68]	@ (80076f4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4013      	ands	r3, r2
 80076b2:	4a10      	ldr	r2, [pc, #64]	@ (80076f4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80076b4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ba:	2201      	movs	r2, #1
 80076bc:	409a      	lsls	r2, r3
 80076be:	4b0d      	ldr	r3, [pc, #52]	@ (80076f4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	4a0b      	ldr	r2, [pc, #44]	@ (80076f4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80076c6:	6013      	str	r3, [r2, #0]
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076cc:	4613      	mov	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4a06      	ldr	r2, [pc, #24]	@ (80076f0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80076d6:	441a      	add	r2, r3
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	3304      	adds	r3, #4
 80076dc:	4619      	mov	r1, r3
 80076de:	4610      	mov	r0, r2
 80076e0:	f7fe f8b4 	bl	800584c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076e4:	bf00      	nop
 80076e6:	3720      	adds	r7, #32
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	24000bc0 	.word	0x24000bc0
 80076f0:	24000bc4 	.word	0x24000bc4
 80076f4:	24000cc8 	.word	0x24000cc8

080076f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80076f8:	b480      	push	{r7}
 80076fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80076fc:	4b07      	ldr	r3, [pc, #28]	@ (800771c <pvTaskIncrementMutexHeldCount+0x24>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d004      	beq.n	800770e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007704:	4b05      	ldr	r3, [pc, #20]	@ (800771c <pvTaskIncrementMutexHeldCount+0x24>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800770a:	3201      	adds	r2, #1
 800770c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800770e:	4b03      	ldr	r3, [pc, #12]	@ (800771c <pvTaskIncrementMutexHeldCount+0x24>)
 8007710:	681b      	ldr	r3, [r3, #0]
	}
 8007712:	4618      	mov	r0, r3
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	24000bc0 	.word	0x24000bc0

08007720 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800772a:	4b29      	ldr	r3, [pc, #164]	@ (80077d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007730:	4b28      	ldr	r3, [pc, #160]	@ (80077d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3304      	adds	r3, #4
 8007736:	4618      	mov	r0, r3
 8007738:	f7fe f8e5 	bl	8005906 <uxListRemove>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d10b      	bne.n	800775a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007742:	4b24      	ldr	r3, [pc, #144]	@ (80077d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007748:	2201      	movs	r2, #1
 800774a:	fa02 f303 	lsl.w	r3, r2, r3
 800774e:	43da      	mvns	r2, r3
 8007750:	4b21      	ldr	r3, [pc, #132]	@ (80077d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4013      	ands	r3, r2
 8007756:	4a20      	ldr	r2, [pc, #128]	@ (80077d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007758:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007760:	d10a      	bne.n	8007778 <prvAddCurrentTaskToDelayedList+0x58>
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d007      	beq.n	8007778 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007768:	4b1a      	ldr	r3, [pc, #104]	@ (80077d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3304      	adds	r3, #4
 800776e:	4619      	mov	r1, r3
 8007770:	481a      	ldr	r0, [pc, #104]	@ (80077dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007772:	f7fe f86b 	bl	800584c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007776:	e026      	b.n	80077c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4413      	add	r3, r2
 800777e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007780:	4b14      	ldr	r3, [pc, #80]	@ (80077d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	429a      	cmp	r2, r3
 800778e:	d209      	bcs.n	80077a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007790:	4b13      	ldr	r3, [pc, #76]	@ (80077e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	4b0f      	ldr	r3, [pc, #60]	@ (80077d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3304      	adds	r3, #4
 800779a:	4619      	mov	r1, r3
 800779c:	4610      	mov	r0, r2
 800779e:	f7fe f879 	bl	8005894 <vListInsert>
}
 80077a2:	e010      	b.n	80077c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077a4:	4b0f      	ldr	r3, [pc, #60]	@ (80077e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	4b0a      	ldr	r3, [pc, #40]	@ (80077d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3304      	adds	r3, #4
 80077ae:	4619      	mov	r1, r3
 80077b0:	4610      	mov	r0, r2
 80077b2:	f7fe f86f 	bl	8005894 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077b6:	4b0c      	ldr	r3, [pc, #48]	@ (80077e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d202      	bcs.n	80077c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80077c0:	4a09      	ldr	r2, [pc, #36]	@ (80077e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	6013      	str	r3, [r2, #0]
}
 80077c6:	bf00      	nop
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	24000cc4 	.word	0x24000cc4
 80077d4:	24000bc0 	.word	0x24000bc0
 80077d8:	24000cc8 	.word	0x24000cc8
 80077dc:	24000cac 	.word	0x24000cac
 80077e0:	24000c7c 	.word	0x24000c7c
 80077e4:	24000c78 	.word	0x24000c78
 80077e8:	24000ce0 	.word	0x24000ce0

080077ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08a      	sub	sp, #40	@ 0x28
 80077f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80077f2:	2300      	movs	r3, #0
 80077f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80077f6:	f000 faf7 	bl	8007de8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80077fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007870 <xTimerCreateTimerTask+0x84>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d021      	beq.n	8007846 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007802:	2300      	movs	r3, #0
 8007804:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007806:	2300      	movs	r3, #0
 8007808:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800780a:	1d3a      	adds	r2, r7, #4
 800780c:	f107 0108 	add.w	r1, r7, #8
 8007810:	f107 030c 	add.w	r3, r7, #12
 8007814:	4618      	mov	r0, r3
 8007816:	f7f9 f865 	bl	80008e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800781a:	6879      	ldr	r1, [r7, #4]
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	9202      	str	r2, [sp, #8]
 8007822:	9301      	str	r3, [sp, #4]
 8007824:	2302      	movs	r3, #2
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	2300      	movs	r3, #0
 800782a:	460a      	mov	r2, r1
 800782c:	4911      	ldr	r1, [pc, #68]	@ (8007874 <xTimerCreateTimerTask+0x88>)
 800782e:	4812      	ldr	r0, [pc, #72]	@ (8007878 <xTimerCreateTimerTask+0x8c>)
 8007830:	f7fe ff6e 	bl	8006710 <xTaskCreateStatic>
 8007834:	4603      	mov	r3, r0
 8007836:	4a11      	ldr	r2, [pc, #68]	@ (800787c <xTimerCreateTimerTask+0x90>)
 8007838:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800783a:	4b10      	ldr	r3, [pc, #64]	@ (800787c <xTimerCreateTimerTask+0x90>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007842:	2301      	movs	r3, #1
 8007844:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10b      	bne.n	8007864 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800784c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007850:	f383 8811 	msr	BASEPRI, r3
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	613b      	str	r3, [r7, #16]
}
 800785e:	bf00      	nop
 8007860:	bf00      	nop
 8007862:	e7fd      	b.n	8007860 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007864:	697b      	ldr	r3, [r7, #20]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	24000d1c 	.word	0x24000d1c
 8007874:	0800a038 	.word	0x0800a038
 8007878:	080079b9 	.word	0x080079b9
 800787c:	24000d20 	.word	0x24000d20

08007880 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b08a      	sub	sp, #40	@ 0x28
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
 800788c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800788e:	2300      	movs	r3, #0
 8007890:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10b      	bne.n	80078b0 <xTimerGenericCommand+0x30>
	__asm volatile
 8007898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	623b      	str	r3, [r7, #32]
}
 80078aa:	bf00      	nop
 80078ac:	bf00      	nop
 80078ae:	e7fd      	b.n	80078ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80078b0:	4b19      	ldr	r3, [pc, #100]	@ (8007918 <xTimerGenericCommand+0x98>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d02a      	beq.n	800790e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2b05      	cmp	r3, #5
 80078c8:	dc18      	bgt.n	80078fc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80078ca:	f7ff fd69 	bl	80073a0 <xTaskGetSchedulerState>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d109      	bne.n	80078e8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80078d4:	4b10      	ldr	r3, [pc, #64]	@ (8007918 <xTimerGenericCommand+0x98>)
 80078d6:	6818      	ldr	r0, [r3, #0]
 80078d8:	f107 0114 	add.w	r1, r7, #20
 80078dc:	2300      	movs	r3, #0
 80078de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078e0:	f7fe f9b0 	bl	8005c44 <xQueueGenericSend>
 80078e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80078e6:	e012      	b.n	800790e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80078e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007918 <xTimerGenericCommand+0x98>)
 80078ea:	6818      	ldr	r0, [r3, #0]
 80078ec:	f107 0114 	add.w	r1, r7, #20
 80078f0:	2300      	movs	r3, #0
 80078f2:	2200      	movs	r2, #0
 80078f4:	f7fe f9a6 	bl	8005c44 <xQueueGenericSend>
 80078f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80078fa:	e008      	b.n	800790e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80078fc:	4b06      	ldr	r3, [pc, #24]	@ (8007918 <xTimerGenericCommand+0x98>)
 80078fe:	6818      	ldr	r0, [r3, #0]
 8007900:	f107 0114 	add.w	r1, r7, #20
 8007904:	2300      	movs	r3, #0
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	f7fe fa9e 	bl	8005e48 <xQueueGenericSendFromISR>
 800790c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800790e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007910:	4618      	mov	r0, r3
 8007912:	3728      	adds	r7, #40	@ 0x28
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	24000d1c 	.word	0x24000d1c

0800791c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b088      	sub	sp, #32
 8007920:	af02      	add	r7, sp, #8
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007926:	4b23      	ldr	r3, [pc, #140]	@ (80079b4 <prvProcessExpiredTimer+0x98>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	3304      	adds	r3, #4
 8007934:	4618      	mov	r0, r3
 8007936:	f7fd ffe6 	bl	8005906 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007940:	f003 0304 	and.w	r3, r3, #4
 8007944:	2b00      	cmp	r3, #0
 8007946:	d023      	beq.n	8007990 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	699a      	ldr	r2, [r3, #24]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	18d1      	adds	r1, r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	6978      	ldr	r0, [r7, #20]
 8007956:	f000 f8d5 	bl	8007b04 <prvInsertTimerInActiveList>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d020      	beq.n	80079a2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007960:	2300      	movs	r3, #0
 8007962:	9300      	str	r3, [sp, #0]
 8007964:	2300      	movs	r3, #0
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	2100      	movs	r1, #0
 800796a:	6978      	ldr	r0, [r7, #20]
 800796c:	f7ff ff88 	bl	8007880 <xTimerGenericCommand>
 8007970:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d114      	bne.n	80079a2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	60fb      	str	r3, [r7, #12]
}
 800798a:	bf00      	nop
 800798c:	bf00      	nop
 800798e:	e7fd      	b.n	800798c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007996:	f023 0301 	bic.w	r3, r3, #1
 800799a:	b2da      	uxtb	r2, r3
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	6978      	ldr	r0, [r7, #20]
 80079a8:	4798      	blx	r3
}
 80079aa:	bf00      	nop
 80079ac:	3718      	adds	r7, #24
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	24000d14 	.word	0x24000d14

080079b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079c0:	f107 0308 	add.w	r3, r7, #8
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 f859 	bl	8007a7c <prvGetNextExpireTime>
 80079ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	4619      	mov	r1, r3
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f000 f805 	bl	80079e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80079d6:	f000 f8d7 	bl	8007b88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079da:	bf00      	nop
 80079dc:	e7f0      	b.n	80079c0 <prvTimerTask+0x8>
	...

080079e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80079ea:	f7ff f8e7 	bl	8006bbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079ee:	f107 0308 	add.w	r3, r7, #8
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 f866 	bl	8007ac4 <prvSampleTimeNow>
 80079f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d130      	bne.n	8007a62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10a      	bne.n	8007a1c <prvProcessTimerOrBlockTask+0x3c>
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d806      	bhi.n	8007a1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a0e:	f7ff f8e3 	bl	8006bd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a12:	68f9      	ldr	r1, [r7, #12]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7ff ff81 	bl	800791c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a1a:	e024      	b.n	8007a66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d008      	beq.n	8007a34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a22:	4b13      	ldr	r3, [pc, #76]	@ (8007a70 <prvProcessTimerOrBlockTask+0x90>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d101      	bne.n	8007a30 <prvProcessTimerOrBlockTask+0x50>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e000      	b.n	8007a32 <prvProcessTimerOrBlockTask+0x52>
 8007a30:	2300      	movs	r3, #0
 8007a32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a34:	4b0f      	ldr	r3, [pc, #60]	@ (8007a74 <prvProcessTimerOrBlockTask+0x94>)
 8007a36:	6818      	ldr	r0, [r3, #0]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	4619      	mov	r1, r3
 8007a42:	f7fe fe31 	bl	80066a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a46:	f7ff f8c7 	bl	8006bd8 <xTaskResumeAll>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10a      	bne.n	8007a66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a50:	4b09      	ldr	r3, [pc, #36]	@ (8007a78 <prvProcessTimerOrBlockTask+0x98>)
 8007a52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a56:	601a      	str	r2, [r3, #0]
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	f3bf 8f6f 	isb	sy
}
 8007a60:	e001      	b.n	8007a66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a62:	f7ff f8b9 	bl	8006bd8 <xTaskResumeAll>
}
 8007a66:	bf00      	nop
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	24000d18 	.word	0x24000d18
 8007a74:	24000d1c 	.word	0x24000d1c
 8007a78:	e000ed04 	.word	0xe000ed04

08007a7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a84:	4b0e      	ldr	r3, [pc, #56]	@ (8007ac0 <prvGetNextExpireTime+0x44>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d101      	bne.n	8007a92 <prvGetNextExpireTime+0x16>
 8007a8e:	2201      	movs	r2, #1
 8007a90:	e000      	b.n	8007a94 <prvGetNextExpireTime+0x18>
 8007a92:	2200      	movs	r2, #0
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d105      	bne.n	8007aac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007aa0:	4b07      	ldr	r3, [pc, #28]	@ (8007ac0 <prvGetNextExpireTime+0x44>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	60fb      	str	r3, [r7, #12]
 8007aaa:	e001      	b.n	8007ab0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	24000d14 	.word	0x24000d14

08007ac4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007acc:	f7ff f922 	bl	8006d14 <xTaskGetTickCount>
 8007ad0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8007b00 <prvSampleTimeNow+0x3c>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d205      	bcs.n	8007ae8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007adc:	f000 f91e 	bl	8007d1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	601a      	str	r2, [r3, #0]
 8007ae6:	e002      	b.n	8007aee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007aee:	4a04      	ldr	r2, [pc, #16]	@ (8007b00 <prvSampleTimeNow+0x3c>)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007af4:	68fb      	ldr	r3, [r7, #12]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	24000d24 	.word	0x24000d24

08007b04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b086      	sub	sp, #24
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]
 8007b10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b12:	2300      	movs	r3, #0
 8007b14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d812      	bhi.n	8007b50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	1ad2      	subs	r2, r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d302      	bcc.n	8007b3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	617b      	str	r3, [r7, #20]
 8007b3c:	e01b      	b.n	8007b76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b3e:	4b10      	ldr	r3, [pc, #64]	@ (8007b80 <prvInsertTimerInActiveList+0x7c>)
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	3304      	adds	r3, #4
 8007b46:	4619      	mov	r1, r3
 8007b48:	4610      	mov	r0, r2
 8007b4a:	f7fd fea3 	bl	8005894 <vListInsert>
 8007b4e:	e012      	b.n	8007b76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d206      	bcs.n	8007b66 <prvInsertTimerInActiveList+0x62>
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d302      	bcc.n	8007b66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b60:	2301      	movs	r3, #1
 8007b62:	617b      	str	r3, [r7, #20]
 8007b64:	e007      	b.n	8007b76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b66:	4b07      	ldr	r3, [pc, #28]	@ (8007b84 <prvInsertTimerInActiveList+0x80>)
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	4619      	mov	r1, r3
 8007b70:	4610      	mov	r0, r2
 8007b72:	f7fd fe8f 	bl	8005894 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b76:	697b      	ldr	r3, [r7, #20]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3718      	adds	r7, #24
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	24000d18 	.word	0x24000d18
 8007b84:	24000d14 	.word	0x24000d14

08007b88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b08c      	sub	sp, #48	@ 0x30
 8007b8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b8e:	e0b2      	b.n	8007cf6 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f2c0 80af 	blt.w	8007cf6 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9e:	695b      	ldr	r3, [r3, #20]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d004      	beq.n	8007bae <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fd feac 	bl	8005906 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bae:	1d3b      	adds	r3, r7, #4
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7ff ff87 	bl	8007ac4 <prvSampleTimeNow>
 8007bb6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	2b09      	cmp	r3, #9
 8007bbc:	f200 8098 	bhi.w	8007cf0 <prvProcessReceivedCommands+0x168>
 8007bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc8 <prvProcessReceivedCommands+0x40>)
 8007bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc6:	bf00      	nop
 8007bc8:	08007bf1 	.word	0x08007bf1
 8007bcc:	08007bf1 	.word	0x08007bf1
 8007bd0:	08007bf1 	.word	0x08007bf1
 8007bd4:	08007c67 	.word	0x08007c67
 8007bd8:	08007c7b 	.word	0x08007c7b
 8007bdc:	08007cc7 	.word	0x08007cc7
 8007be0:	08007bf1 	.word	0x08007bf1
 8007be4:	08007bf1 	.word	0x08007bf1
 8007be8:	08007c67 	.word	0x08007c67
 8007bec:	08007c7b 	.word	0x08007c7b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007bf6:	f043 0301 	orr.w	r3, r3, #1
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	18d1      	adds	r1, r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6a3a      	ldr	r2, [r7, #32]
 8007c0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007c10:	f7ff ff78 	bl	8007b04 <prvInsertTimerInActiveList>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d06c      	beq.n	8007cf4 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007c20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007c28:	f003 0304 	and.w	r3, r3, #4
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d061      	beq.n	8007cf4 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	441a      	add	r2, r3
 8007c38:	2300      	movs	r3, #0
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	2100      	movs	r1, #0
 8007c40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007c42:	f7ff fe1d 	bl	8007880 <xTimerGenericCommand>
 8007c46:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d152      	bne.n	8007cf4 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	61bb      	str	r3, [r7, #24]
}
 8007c60:	bf00      	nop
 8007c62:	bf00      	nop
 8007c64:	e7fd      	b.n	8007c62 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007c6c:	f023 0301 	bic.w	r3, r3, #1
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8007c78:	e03d      	b.n	8007cf6 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007c80:	f043 0301 	orr.w	r3, r3, #1
 8007c84:	b2da      	uxtb	r2, r3
 8007c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c90:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10b      	bne.n	8007cb2 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	617b      	str	r3, [r7, #20]
}
 8007cac:	bf00      	nop
 8007cae:	bf00      	nop
 8007cb0:	e7fd      	b.n	8007cae <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb4:	699a      	ldr	r2, [r3, #24]
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	18d1      	adds	r1, r2, r3
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	6a3a      	ldr	r2, [r7, #32]
 8007cbe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007cc0:	f7ff ff20 	bl	8007b04 <prvInsertTimerInActiveList>
					break;
 8007cc4:	e017      	b.n	8007cf6 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007ccc:	f003 0302 	and.w	r3, r3, #2
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d103      	bne.n	8007cdc <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8007cd4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007cd6:	f000 fbe7 	bl	80084a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007cda:	e00c      	b.n	8007cf6 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cde:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007ce2:	f023 0301 	bic.w	r3, r3, #1
 8007ce6:	b2da      	uxtb	r2, r3
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8007cee:	e002      	b.n	8007cf6 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8007cf0:	bf00      	nop
 8007cf2:	e000      	b.n	8007cf6 <prvProcessReceivedCommands+0x16e>
					break;
 8007cf4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cf6:	4b08      	ldr	r3, [pc, #32]	@ (8007d18 <prvProcessReceivedCommands+0x190>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f107 0108 	add.w	r1, r7, #8
 8007cfe:	2200      	movs	r2, #0
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7fe f93f 	bl	8005f84 <xQueueReceive>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f47f af41 	bne.w	8007b90 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007d0e:	bf00      	nop
 8007d10:	bf00      	nop
 8007d12:	3728      	adds	r7, #40	@ 0x28
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	24000d1c 	.word	0x24000d1c

08007d1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b088      	sub	sp, #32
 8007d20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d22:	e049      	b.n	8007db8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d24:	4b2e      	ldr	r3, [pc, #184]	@ (8007de0 <prvSwitchTimerLists+0xc4>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8007de0 <prvSwitchTimerLists+0xc4>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fd fde2 	bl	8005906 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007d50:	f003 0304 	and.w	r3, r3, #4
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d02f      	beq.n	8007db8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	4413      	add	r3, r2
 8007d60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d90e      	bls.n	8007d88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d76:	4b1a      	ldr	r3, [pc, #104]	@ (8007de0 <prvSwitchTimerLists+0xc4>)
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	4619      	mov	r1, r3
 8007d80:	4610      	mov	r0, r2
 8007d82:	f7fd fd87 	bl	8005894 <vListInsert>
 8007d86:	e017      	b.n	8007db8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d88:	2300      	movs	r3, #0
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	2100      	movs	r1, #0
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f7ff fd74 	bl	8007880 <xTimerGenericCommand>
 8007d98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10b      	bne.n	8007db8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	603b      	str	r3, [r7, #0]
}
 8007db2:	bf00      	nop
 8007db4:	bf00      	nop
 8007db6:	e7fd      	b.n	8007db4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007db8:	4b09      	ldr	r3, [pc, #36]	@ (8007de0 <prvSwitchTimerLists+0xc4>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1b0      	bne.n	8007d24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007dc2:	4b07      	ldr	r3, [pc, #28]	@ (8007de0 <prvSwitchTimerLists+0xc4>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007dc8:	4b06      	ldr	r3, [pc, #24]	@ (8007de4 <prvSwitchTimerLists+0xc8>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a04      	ldr	r2, [pc, #16]	@ (8007de0 <prvSwitchTimerLists+0xc4>)
 8007dce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007dd0:	4a04      	ldr	r2, [pc, #16]	@ (8007de4 <prvSwitchTimerLists+0xc8>)
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	6013      	str	r3, [r2, #0]
}
 8007dd6:	bf00      	nop
 8007dd8:	3718      	adds	r7, #24
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	24000d14 	.word	0x24000d14
 8007de4:	24000d18 	.word	0x24000d18

08007de8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007dee:	f000 f96b 	bl	80080c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007df2:	4b15      	ldr	r3, [pc, #84]	@ (8007e48 <prvCheckForValidListAndQueue+0x60>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d120      	bne.n	8007e3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007dfa:	4814      	ldr	r0, [pc, #80]	@ (8007e4c <prvCheckForValidListAndQueue+0x64>)
 8007dfc:	f7fd fcf9 	bl	80057f2 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e00:	4813      	ldr	r0, [pc, #76]	@ (8007e50 <prvCheckForValidListAndQueue+0x68>)
 8007e02:	f7fd fcf6 	bl	80057f2 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e06:	4b13      	ldr	r3, [pc, #76]	@ (8007e54 <prvCheckForValidListAndQueue+0x6c>)
 8007e08:	4a10      	ldr	r2, [pc, #64]	@ (8007e4c <prvCheckForValidListAndQueue+0x64>)
 8007e0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e0c:	4b12      	ldr	r3, [pc, #72]	@ (8007e58 <prvCheckForValidListAndQueue+0x70>)
 8007e0e:	4a10      	ldr	r2, [pc, #64]	@ (8007e50 <prvCheckForValidListAndQueue+0x68>)
 8007e10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e12:	2300      	movs	r3, #0
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	4b11      	ldr	r3, [pc, #68]	@ (8007e5c <prvCheckForValidListAndQueue+0x74>)
 8007e18:	4a11      	ldr	r2, [pc, #68]	@ (8007e60 <prvCheckForValidListAndQueue+0x78>)
 8007e1a:	210c      	movs	r1, #12
 8007e1c:	200a      	movs	r0, #10
 8007e1e:	f7fd fe07 	bl	8005a30 <xQueueGenericCreateStatic>
 8007e22:	4603      	mov	r3, r0
 8007e24:	4a08      	ldr	r2, [pc, #32]	@ (8007e48 <prvCheckForValidListAndQueue+0x60>)
 8007e26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e28:	4b07      	ldr	r3, [pc, #28]	@ (8007e48 <prvCheckForValidListAndQueue+0x60>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d005      	beq.n	8007e3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e30:	4b05      	ldr	r3, [pc, #20]	@ (8007e48 <prvCheckForValidListAndQueue+0x60>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	490b      	ldr	r1, [pc, #44]	@ (8007e64 <prvCheckForValidListAndQueue+0x7c>)
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fe fbe2 	bl	8006600 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e3c:	f000 f976 	bl	800812c <vPortExitCritical>
}
 8007e40:	bf00      	nop
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	24000d1c 	.word	0x24000d1c
 8007e4c:	24000cec 	.word	0x24000cec
 8007e50:	24000d00 	.word	0x24000d00
 8007e54:	24000d14 	.word	0x24000d14
 8007e58:	24000d18 	.word	0x24000d18
 8007e5c:	24000da0 	.word	0x24000da0
 8007e60:	24000d28 	.word	0x24000d28
 8007e64:	0800a040 	.word	0x0800a040

08007e68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	3b04      	subs	r3, #4
 8007e78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007e80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3b04      	subs	r3, #4
 8007e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	f023 0201 	bic.w	r2, r3, #1
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	3b04      	subs	r3, #4
 8007e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e98:	4a0c      	ldr	r2, [pc, #48]	@ (8007ecc <pxPortInitialiseStack+0x64>)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	3b14      	subs	r3, #20
 8007ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	3b04      	subs	r3, #4
 8007eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f06f 0202 	mvn.w	r2, #2
 8007eb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3b20      	subs	r3, #32
 8007ebc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	08007ed1 	.word	0x08007ed1

08007ed0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007eda:	4b13      	ldr	r3, [pc, #76]	@ (8007f28 <prvTaskExitError+0x58>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee2:	d00b      	beq.n	8007efc <prvTaskExitError+0x2c>
	__asm volatile
 8007ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee8:	f383 8811 	msr	BASEPRI, r3
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	f3bf 8f4f 	dsb	sy
 8007ef4:	60fb      	str	r3, [r7, #12]
}
 8007ef6:	bf00      	nop
 8007ef8:	bf00      	nop
 8007efa:	e7fd      	b.n	8007ef8 <prvTaskExitError+0x28>
	__asm volatile
 8007efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	60bb      	str	r3, [r7, #8]
}
 8007f0e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f10:	bf00      	nop
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d0fc      	beq.n	8007f12 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f18:	bf00      	nop
 8007f1a:	bf00      	nop
 8007f1c:	3714      	adds	r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	24000010 	.word	0x24000010
 8007f2c:	00000000 	.word	0x00000000

08007f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f30:	4b07      	ldr	r3, [pc, #28]	@ (8007f50 <pxCurrentTCBConst2>)
 8007f32:	6819      	ldr	r1, [r3, #0]
 8007f34:	6808      	ldr	r0, [r1, #0]
 8007f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3a:	f380 8809 	msr	PSP, r0
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f04f 0000 	mov.w	r0, #0
 8007f46:	f380 8811 	msr	BASEPRI, r0
 8007f4a:	4770      	bx	lr
 8007f4c:	f3af 8000 	nop.w

08007f50 <pxCurrentTCBConst2>:
 8007f50:	24000bc0 	.word	0x24000bc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop

08007f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f58:	4808      	ldr	r0, [pc, #32]	@ (8007f7c <prvPortStartFirstTask+0x24>)
 8007f5a:	6800      	ldr	r0, [r0, #0]
 8007f5c:	6800      	ldr	r0, [r0, #0]
 8007f5e:	f380 8808 	msr	MSP, r0
 8007f62:	f04f 0000 	mov.w	r0, #0
 8007f66:	f380 8814 	msr	CONTROL, r0
 8007f6a:	b662      	cpsie	i
 8007f6c:	b661      	cpsie	f
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	df00      	svc	0
 8007f78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f7a:	bf00      	nop
 8007f7c:	e000ed08 	.word	0xe000ed08

08007f80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f86:	4b47      	ldr	r3, [pc, #284]	@ (80080a4 <xPortStartScheduler+0x124>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a47      	ldr	r2, [pc, #284]	@ (80080a8 <xPortStartScheduler+0x128>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d10b      	bne.n	8007fa8 <xPortStartScheduler+0x28>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	613b      	str	r3, [r7, #16]
}
 8007fa2:	bf00      	nop
 8007fa4:	bf00      	nop
 8007fa6:	e7fd      	b.n	8007fa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007fa8:	4b3e      	ldr	r3, [pc, #248]	@ (80080a4 <xPortStartScheduler+0x124>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a3f      	ldr	r2, [pc, #252]	@ (80080ac <xPortStartScheduler+0x12c>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d10b      	bne.n	8007fca <xPortStartScheduler+0x4a>
	__asm volatile
 8007fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb6:	f383 8811 	msr	BASEPRI, r3
 8007fba:	f3bf 8f6f 	isb	sy
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	60fb      	str	r3, [r7, #12]
}
 8007fc4:	bf00      	nop
 8007fc6:	bf00      	nop
 8007fc8:	e7fd      	b.n	8007fc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007fca:	4b39      	ldr	r3, [pc, #228]	@ (80080b0 <xPortStartScheduler+0x130>)
 8007fcc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	22ff      	movs	r2, #255	@ 0xff
 8007fda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007fe4:	78fb      	ldrb	r3, [r7, #3]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	4b31      	ldr	r3, [pc, #196]	@ (80080b4 <xPortStartScheduler+0x134>)
 8007ff0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ff2:	4b31      	ldr	r3, [pc, #196]	@ (80080b8 <xPortStartScheduler+0x138>)
 8007ff4:	2207      	movs	r2, #7
 8007ff6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ff8:	e009      	b.n	800800e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80080b8 <xPortStartScheduler+0x138>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	3b01      	subs	r3, #1
 8008000:	4a2d      	ldr	r2, [pc, #180]	@ (80080b8 <xPortStartScheduler+0x138>)
 8008002:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008004:	78fb      	ldrb	r3, [r7, #3]
 8008006:	b2db      	uxtb	r3, r3
 8008008:	005b      	lsls	r3, r3, #1
 800800a:	b2db      	uxtb	r3, r3
 800800c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800800e:	78fb      	ldrb	r3, [r7, #3]
 8008010:	b2db      	uxtb	r3, r3
 8008012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008016:	2b80      	cmp	r3, #128	@ 0x80
 8008018:	d0ef      	beq.n	8007ffa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800801a:	4b27      	ldr	r3, [pc, #156]	@ (80080b8 <xPortStartScheduler+0x138>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f1c3 0307 	rsb	r3, r3, #7
 8008022:	2b04      	cmp	r3, #4
 8008024:	d00b      	beq.n	800803e <xPortStartScheduler+0xbe>
	__asm volatile
 8008026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800802a:	f383 8811 	msr	BASEPRI, r3
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	60bb      	str	r3, [r7, #8]
}
 8008038:	bf00      	nop
 800803a:	bf00      	nop
 800803c:	e7fd      	b.n	800803a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800803e:	4b1e      	ldr	r3, [pc, #120]	@ (80080b8 <xPortStartScheduler+0x138>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	021b      	lsls	r3, r3, #8
 8008044:	4a1c      	ldr	r2, [pc, #112]	@ (80080b8 <xPortStartScheduler+0x138>)
 8008046:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008048:	4b1b      	ldr	r3, [pc, #108]	@ (80080b8 <xPortStartScheduler+0x138>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008050:	4a19      	ldr	r2, [pc, #100]	@ (80080b8 <xPortStartScheduler+0x138>)
 8008052:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	b2da      	uxtb	r2, r3
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800805c:	4b17      	ldr	r3, [pc, #92]	@ (80080bc <xPortStartScheduler+0x13c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a16      	ldr	r2, [pc, #88]	@ (80080bc <xPortStartScheduler+0x13c>)
 8008062:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008066:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008068:	4b14      	ldr	r3, [pc, #80]	@ (80080bc <xPortStartScheduler+0x13c>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a13      	ldr	r2, [pc, #76]	@ (80080bc <xPortStartScheduler+0x13c>)
 800806e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008072:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008074:	f000 f8da 	bl	800822c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008078:	4b11      	ldr	r3, [pc, #68]	@ (80080c0 <xPortStartScheduler+0x140>)
 800807a:	2200      	movs	r2, #0
 800807c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800807e:	f000 f8f9 	bl	8008274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008082:	4b10      	ldr	r3, [pc, #64]	@ (80080c4 <xPortStartScheduler+0x144>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a0f      	ldr	r2, [pc, #60]	@ (80080c4 <xPortStartScheduler+0x144>)
 8008088:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800808c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800808e:	f7ff ff63 	bl	8007f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008092:	f7fe ff09 	bl	8006ea8 <vTaskSwitchContext>
	prvTaskExitError();
 8008096:	f7ff ff1b 	bl	8007ed0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	e000ed00 	.word	0xe000ed00
 80080a8:	410fc271 	.word	0x410fc271
 80080ac:	410fc270 	.word	0x410fc270
 80080b0:	e000e400 	.word	0xe000e400
 80080b4:	24000de8 	.word	0x24000de8
 80080b8:	24000dec 	.word	0x24000dec
 80080bc:	e000ed20 	.word	0xe000ed20
 80080c0:	24000010 	.word	0x24000010
 80080c4:	e000ef34 	.word	0xe000ef34

080080c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	607b      	str	r3, [r7, #4]
}
 80080e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080e2:	4b10      	ldr	r3, [pc, #64]	@ (8008124 <vPortEnterCritical+0x5c>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	3301      	adds	r3, #1
 80080e8:	4a0e      	ldr	r2, [pc, #56]	@ (8008124 <vPortEnterCritical+0x5c>)
 80080ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008124 <vPortEnterCritical+0x5c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d110      	bne.n	8008116 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008128 <vPortEnterCritical+0x60>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00b      	beq.n	8008116 <vPortEnterCritical+0x4e>
	__asm volatile
 80080fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	603b      	str	r3, [r7, #0]
}
 8008110:	bf00      	nop
 8008112:	bf00      	nop
 8008114:	e7fd      	b.n	8008112 <vPortEnterCritical+0x4a>
	}
}
 8008116:	bf00      	nop
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	24000010 	.word	0x24000010
 8008128:	e000ed04 	.word	0xe000ed04

0800812c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008132:	4b12      	ldr	r3, [pc, #72]	@ (800817c <vPortExitCritical+0x50>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10b      	bne.n	8008152 <vPortExitCritical+0x26>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	607b      	str	r3, [r7, #4]
}
 800814c:	bf00      	nop
 800814e:	bf00      	nop
 8008150:	e7fd      	b.n	800814e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008152:	4b0a      	ldr	r3, [pc, #40]	@ (800817c <vPortExitCritical+0x50>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3b01      	subs	r3, #1
 8008158:	4a08      	ldr	r2, [pc, #32]	@ (800817c <vPortExitCritical+0x50>)
 800815a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800815c:	4b07      	ldr	r3, [pc, #28]	@ (800817c <vPortExitCritical+0x50>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d105      	bne.n	8008170 <vPortExitCritical+0x44>
 8008164:	2300      	movs	r3, #0
 8008166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	f383 8811 	msr	BASEPRI, r3
}
 800816e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr
 800817c:	24000010 	.word	0x24000010

08008180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008180:	f3ef 8009 	mrs	r0, PSP
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	4b15      	ldr	r3, [pc, #84]	@ (80081e0 <pxCurrentTCBConst>)
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	f01e 0f10 	tst.w	lr, #16
 8008190:	bf08      	it	eq
 8008192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819a:	6010      	str	r0, [r2, #0]
 800819c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80081a4:	f380 8811 	msr	BASEPRI, r0
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	f7fe fe7a 	bl	8006ea8 <vTaskSwitchContext>
 80081b4:	f04f 0000 	mov.w	r0, #0
 80081b8:	f380 8811 	msr	BASEPRI, r0
 80081bc:	bc09      	pop	{r0, r3}
 80081be:	6819      	ldr	r1, [r3, #0]
 80081c0:	6808      	ldr	r0, [r1, #0]
 80081c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c6:	f01e 0f10 	tst.w	lr, #16
 80081ca:	bf08      	it	eq
 80081cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081d0:	f380 8809 	msr	PSP, r0
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	f3af 8000 	nop.w

080081e0 <pxCurrentTCBConst>:
 80081e0:	24000bc0 	.word	0x24000bc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081e4:	bf00      	nop
 80081e6:	bf00      	nop

080081e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
	__asm volatile
 80081ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	607b      	str	r3, [r7, #4]
}
 8008200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008202:	f7fe fd97 	bl	8006d34 <xTaskIncrementTick>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d003      	beq.n	8008214 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800820c:	4b06      	ldr	r3, [pc, #24]	@ (8008228 <SysTick_Handler+0x40>)
 800820e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	2300      	movs	r3, #0
 8008216:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	f383 8811 	msr	BASEPRI, r3
}
 800821e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008220:	bf00      	nop
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	e000ed04 	.word	0xe000ed04

0800822c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800822c:	b480      	push	{r7}
 800822e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008230:	4b0b      	ldr	r3, [pc, #44]	@ (8008260 <vPortSetupTimerInterrupt+0x34>)
 8008232:	2200      	movs	r2, #0
 8008234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008236:	4b0b      	ldr	r3, [pc, #44]	@ (8008264 <vPortSetupTimerInterrupt+0x38>)
 8008238:	2200      	movs	r2, #0
 800823a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800823c:	4b0a      	ldr	r3, [pc, #40]	@ (8008268 <vPortSetupTimerInterrupt+0x3c>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a0a      	ldr	r2, [pc, #40]	@ (800826c <vPortSetupTimerInterrupt+0x40>)
 8008242:	fba2 2303 	umull	r2, r3, r2, r3
 8008246:	099b      	lsrs	r3, r3, #6
 8008248:	4a09      	ldr	r2, [pc, #36]	@ (8008270 <vPortSetupTimerInterrupt+0x44>)
 800824a:	3b01      	subs	r3, #1
 800824c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800824e:	4b04      	ldr	r3, [pc, #16]	@ (8008260 <vPortSetupTimerInterrupt+0x34>)
 8008250:	2207      	movs	r2, #7
 8008252:	601a      	str	r2, [r3, #0]
}
 8008254:	bf00      	nop
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	e000e010 	.word	0xe000e010
 8008264:	e000e018 	.word	0xe000e018
 8008268:	24000000 	.word	0x24000000
 800826c:	10624dd3 	.word	0x10624dd3
 8008270:	e000e014 	.word	0xe000e014

08008274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008274:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008284 <vPortEnableVFP+0x10>
 8008278:	6801      	ldr	r1, [r0, #0]
 800827a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800827e:	6001      	str	r1, [r0, #0]
 8008280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008282:	bf00      	nop
 8008284:	e000ed88 	.word	0xe000ed88

08008288 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800828e:	f3ef 8305 	mrs	r3, IPSR
 8008292:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2b0f      	cmp	r3, #15
 8008298:	d915      	bls.n	80082c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800829a:	4a18      	ldr	r2, [pc, #96]	@ (80082fc <vPortValidateInterruptPriority+0x74>)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4413      	add	r3, r2
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082a4:	4b16      	ldr	r3, [pc, #88]	@ (8008300 <vPortValidateInterruptPriority+0x78>)
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	7afa      	ldrb	r2, [r7, #11]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d20b      	bcs.n	80082c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	607b      	str	r3, [r7, #4]
}
 80082c0:	bf00      	nop
 80082c2:	bf00      	nop
 80082c4:	e7fd      	b.n	80082c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80082c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008304 <vPortValidateInterruptPriority+0x7c>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80082ce:	4b0e      	ldr	r3, [pc, #56]	@ (8008308 <vPortValidateInterruptPriority+0x80>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d90b      	bls.n	80082ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80082d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082da:	f383 8811 	msr	BASEPRI, r3
 80082de:	f3bf 8f6f 	isb	sy
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	603b      	str	r3, [r7, #0]
}
 80082e8:	bf00      	nop
 80082ea:	bf00      	nop
 80082ec:	e7fd      	b.n	80082ea <vPortValidateInterruptPriority+0x62>
	}
 80082ee:	bf00      	nop
 80082f0:	3714      	adds	r7, #20
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	e000e3f0 	.word	0xe000e3f0
 8008300:	24000de8 	.word	0x24000de8
 8008304:	e000ed0c 	.word	0xe000ed0c
 8008308:	24000dec 	.word	0x24000dec

0800830c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b08a      	sub	sp, #40	@ 0x28
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008314:	2300      	movs	r3, #0
 8008316:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008318:	f7fe fc50 	bl	8006bbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800831c:	4b5c      	ldr	r3, [pc, #368]	@ (8008490 <pvPortMalloc+0x184>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008324:	f000 f93c 	bl	80085a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008328:	4b5a      	ldr	r3, [pc, #360]	@ (8008494 <pvPortMalloc+0x188>)
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4013      	ands	r3, r2
 8008330:	2b00      	cmp	r3, #0
 8008332:	f040 8095 	bne.w	8008460 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d01e      	beq.n	800837a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800833c:	2208      	movs	r2, #8
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4413      	add	r3, r2
 8008342:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f003 0307 	and.w	r3, r3, #7
 800834a:	2b00      	cmp	r3, #0
 800834c:	d015      	beq.n	800837a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f023 0307 	bic.w	r3, r3, #7
 8008354:	3308      	adds	r3, #8
 8008356:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f003 0307 	and.w	r3, r3, #7
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00b      	beq.n	800837a <pvPortMalloc+0x6e>
	__asm volatile
 8008362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008366:	f383 8811 	msr	BASEPRI, r3
 800836a:	f3bf 8f6f 	isb	sy
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	617b      	str	r3, [r7, #20]
}
 8008374:	bf00      	nop
 8008376:	bf00      	nop
 8008378:	e7fd      	b.n	8008376 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d06f      	beq.n	8008460 <pvPortMalloc+0x154>
 8008380:	4b45      	ldr	r3, [pc, #276]	@ (8008498 <pvPortMalloc+0x18c>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	429a      	cmp	r2, r3
 8008388:	d86a      	bhi.n	8008460 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800838a:	4b44      	ldr	r3, [pc, #272]	@ (800849c <pvPortMalloc+0x190>)
 800838c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800838e:	4b43      	ldr	r3, [pc, #268]	@ (800849c <pvPortMalloc+0x190>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008394:	e004      	b.n	80083a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008398:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800839a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d903      	bls.n	80083b2 <pvPortMalloc+0xa6>
 80083aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1f1      	bne.n	8008396 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083b2:	4b37      	ldr	r3, [pc, #220]	@ (8008490 <pvPortMalloc+0x184>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d051      	beq.n	8008460 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80083bc:	6a3b      	ldr	r3, [r7, #32]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2208      	movs	r2, #8
 80083c2:	4413      	add	r3, r2
 80083c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80083c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	6a3b      	ldr	r3, [r7, #32]
 80083cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80083ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d0:	685a      	ldr	r2, [r3, #4]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	1ad2      	subs	r2, r2, r3
 80083d6:	2308      	movs	r3, #8
 80083d8:	005b      	lsls	r3, r3, #1
 80083da:	429a      	cmp	r2, r3
 80083dc:	d920      	bls.n	8008420 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80083de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4413      	add	r3, r2
 80083e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	f003 0307 	and.w	r3, r3, #7
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00b      	beq.n	8008408 <pvPortMalloc+0xfc>
	__asm volatile
 80083f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	613b      	str	r3, [r7, #16]
}
 8008402:	bf00      	nop
 8008404:	bf00      	nop
 8008406:	e7fd      	b.n	8008404 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	1ad2      	subs	r2, r2, r3
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800841a:	69b8      	ldr	r0, [r7, #24]
 800841c:	f000 f922 	bl	8008664 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008420:	4b1d      	ldr	r3, [pc, #116]	@ (8008498 <pvPortMalloc+0x18c>)
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	4a1b      	ldr	r2, [pc, #108]	@ (8008498 <pvPortMalloc+0x18c>)
 800842c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800842e:	4b1a      	ldr	r3, [pc, #104]	@ (8008498 <pvPortMalloc+0x18c>)
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	4b1b      	ldr	r3, [pc, #108]	@ (80084a0 <pvPortMalloc+0x194>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	429a      	cmp	r2, r3
 8008438:	d203      	bcs.n	8008442 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800843a:	4b17      	ldr	r3, [pc, #92]	@ (8008498 <pvPortMalloc+0x18c>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a18      	ldr	r2, [pc, #96]	@ (80084a0 <pvPortMalloc+0x194>)
 8008440:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008444:	685a      	ldr	r2, [r3, #4]
 8008446:	4b13      	ldr	r3, [pc, #76]	@ (8008494 <pvPortMalloc+0x188>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	431a      	orrs	r2, r3
 800844c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008452:	2200      	movs	r2, #0
 8008454:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008456:	4b13      	ldr	r3, [pc, #76]	@ (80084a4 <pvPortMalloc+0x198>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	3301      	adds	r3, #1
 800845c:	4a11      	ldr	r2, [pc, #68]	@ (80084a4 <pvPortMalloc+0x198>)
 800845e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008460:	f7fe fbba 	bl	8006bd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	f003 0307 	and.w	r3, r3, #7
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00b      	beq.n	8008486 <pvPortMalloc+0x17a>
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	60fb      	str	r3, [r7, #12]
}
 8008480:	bf00      	nop
 8008482:	bf00      	nop
 8008484:	e7fd      	b.n	8008482 <pvPortMalloc+0x176>
	return pvReturn;
 8008486:	69fb      	ldr	r3, [r7, #28]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3728      	adds	r7, #40	@ 0x28
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	240107f8 	.word	0x240107f8
 8008494:	2401080c 	.word	0x2401080c
 8008498:	240107fc 	.word	0x240107fc
 800849c:	240107f0 	.word	0x240107f0
 80084a0:	24010800 	.word	0x24010800
 80084a4:	24010804 	.word	0x24010804

080084a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b086      	sub	sp, #24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d04f      	beq.n	800855a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084ba:	2308      	movs	r3, #8
 80084bc:	425b      	negs	r3, r3
 80084be:	697a      	ldr	r2, [r7, #20]
 80084c0:	4413      	add	r3, r2
 80084c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	4b25      	ldr	r3, [pc, #148]	@ (8008564 <vPortFree+0xbc>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4013      	ands	r3, r2
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d10b      	bne.n	80084ee <vPortFree+0x46>
	__asm volatile
 80084d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084da:	f383 8811 	msr	BASEPRI, r3
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	60fb      	str	r3, [r7, #12]
}
 80084e8:	bf00      	nop
 80084ea:	bf00      	nop
 80084ec:	e7fd      	b.n	80084ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00b      	beq.n	800850e <vPortFree+0x66>
	__asm volatile
 80084f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084fa:	f383 8811 	msr	BASEPRI, r3
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	60bb      	str	r3, [r7, #8]
}
 8008508:	bf00      	nop
 800850a:	bf00      	nop
 800850c:	e7fd      	b.n	800850a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	685a      	ldr	r2, [r3, #4]
 8008512:	4b14      	ldr	r3, [pc, #80]	@ (8008564 <vPortFree+0xbc>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4013      	ands	r3, r2
 8008518:	2b00      	cmp	r3, #0
 800851a:	d01e      	beq.n	800855a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d11a      	bne.n	800855a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	4b0e      	ldr	r3, [pc, #56]	@ (8008564 <vPortFree+0xbc>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	43db      	mvns	r3, r3
 800852e:	401a      	ands	r2, r3
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008534:	f7fe fb42 	bl	8006bbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	685a      	ldr	r2, [r3, #4]
 800853c:	4b0a      	ldr	r3, [pc, #40]	@ (8008568 <vPortFree+0xc0>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4413      	add	r3, r2
 8008542:	4a09      	ldr	r2, [pc, #36]	@ (8008568 <vPortFree+0xc0>)
 8008544:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008546:	6938      	ldr	r0, [r7, #16]
 8008548:	f000 f88c 	bl	8008664 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800854c:	4b07      	ldr	r3, [pc, #28]	@ (800856c <vPortFree+0xc4>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3301      	adds	r3, #1
 8008552:	4a06      	ldr	r2, [pc, #24]	@ (800856c <vPortFree+0xc4>)
 8008554:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008556:	f7fe fb3f 	bl	8006bd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800855a:	bf00      	nop
 800855c:	3718      	adds	r7, #24
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	2401080c 	.word	0x2401080c
 8008568:	240107fc 	.word	0x240107fc
 800856c:	24010808 	.word	0x24010808

08008570 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8008570:	b480      	push	{r7}
 8008572:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8008574:	4b03      	ldr	r3, [pc, #12]	@ (8008584 <xPortGetFreeHeapSize+0x14>)
 8008576:	681b      	ldr	r3, [r3, #0]
}
 8008578:	4618      	mov	r0, r3
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	240107fc 	.word	0x240107fc

08008588 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8008588:	b480      	push	{r7}
 800858a:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 800858c:	4b03      	ldr	r3, [pc, #12]	@ (800859c <xPortGetMinimumEverFreeHeapSize+0x14>)
 800858e:	681b      	ldr	r3, [r3, #0]
}
 8008590:	4618      	mov	r0, r3
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	24010800 	.word	0x24010800

080085a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80085a6:	f44f 437a 	mov.w	r3, #64000	@ 0xfa00
 80085aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80085ac:	4b27      	ldr	r3, [pc, #156]	@ (800864c <prvHeapInit+0xac>)
 80085ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f003 0307 	and.w	r3, r3, #7
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00c      	beq.n	80085d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	3307      	adds	r3, #7
 80085be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f023 0307 	bic.w	r3, r3, #7
 80085c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	4a1f      	ldr	r2, [pc, #124]	@ (800864c <prvHeapInit+0xac>)
 80085d0:	4413      	add	r3, r2
 80085d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80085d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008650 <prvHeapInit+0xb0>)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80085de:	4b1c      	ldr	r3, [pc, #112]	@ (8008650 <prvHeapInit+0xb0>)
 80085e0:	2200      	movs	r2, #0
 80085e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	4413      	add	r3, r2
 80085ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80085ec:	2208      	movs	r2, #8
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	1a9b      	subs	r3, r3, r2
 80085f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f023 0307 	bic.w	r3, r3, #7
 80085fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	4a15      	ldr	r2, [pc, #84]	@ (8008654 <prvHeapInit+0xb4>)
 8008600:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008602:	4b14      	ldr	r3, [pc, #80]	@ (8008654 <prvHeapInit+0xb4>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2200      	movs	r2, #0
 8008608:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800860a:	4b12      	ldr	r3, [pc, #72]	@ (8008654 <prvHeapInit+0xb4>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2200      	movs	r2, #0
 8008610:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	1ad2      	subs	r2, r2, r3
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008620:	4b0c      	ldr	r3, [pc, #48]	@ (8008654 <prvHeapInit+0xb4>)
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	4a0a      	ldr	r2, [pc, #40]	@ (8008658 <prvHeapInit+0xb8>)
 800862e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	4a09      	ldr	r2, [pc, #36]	@ (800865c <prvHeapInit+0xbc>)
 8008636:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008638:	4b09      	ldr	r3, [pc, #36]	@ (8008660 <prvHeapInit+0xc0>)
 800863a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800863e:	601a      	str	r2, [r3, #0]
}
 8008640:	bf00      	nop
 8008642:	3714      	adds	r7, #20
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	24000df0 	.word	0x24000df0
 8008650:	240107f0 	.word	0x240107f0
 8008654:	240107f8 	.word	0x240107f8
 8008658:	24010800 	.word	0x24010800
 800865c:	240107fc 	.word	0x240107fc
 8008660:	2401080c 	.word	0x2401080c

08008664 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800866c:	4b28      	ldr	r3, [pc, #160]	@ (8008710 <prvInsertBlockIntoFreeList+0xac>)
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	e002      	b.n	8008678 <prvInsertBlockIntoFreeList+0x14>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	429a      	cmp	r2, r3
 8008680:	d8f7      	bhi.n	8008672 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	4413      	add	r3, r2
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	429a      	cmp	r2, r3
 8008692:	d108      	bne.n	80086a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	441a      	add	r2, r3
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	441a      	add	r2, r3
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d118      	bne.n	80086ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	4b15      	ldr	r3, [pc, #84]	@ (8008714 <prvInsertBlockIntoFreeList+0xb0>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d00d      	beq.n	80086e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685a      	ldr	r2, [r3, #4]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	441a      	add	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	e008      	b.n	80086f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80086e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008714 <prvInsertBlockIntoFreeList+0xb0>)
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	601a      	str	r2, [r3, #0]
 80086ea:	e003      	b.n	80086f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d002      	beq.n	8008702 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008702:	bf00      	nop
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	240107f0 	.word	0x240107f0
 8008714:	240107f8 	.word	0x240107f8

08008718 <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 8008718:	b480      	push	{r7}
 800871a:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 800871c:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 800871e:	4618      	mov	r0, r3
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
    return memory_order(int(__m) & int(__mod));
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4013      	ands	r3, r2
  }
 8008738:	4618      	mov	r0, r3
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <_Z11cube_mallocm>:
/**
 * @brief Malloc inline function, wraps malloc for multi-platform support, asserts successful allocation
 * @param size Size of data to malloc in bytes
 * @return Returns the pointer to the allocated data
*/
inline uint8_t* cube_malloc(uint32_t size) {
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
#ifdef COMPUTER_ENVIRONMENT
    uint8_t* ret = (uint8_t*)malloc(size);
#else
    uint8_t* ret = (uint8_t*)pvPortMalloc(size);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7ff fddd 	bl	800830c <pvPortMalloc>
 8008752:	60f8      	str	r0, [r7, #12]
#endif
    CUBE_ASSERT(ret, "cube_malloc failed");
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d105      	bne.n	8008766 <_Z11cube_mallocm+0x22>
 800875a:	4b05      	ldr	r3, [pc, #20]	@ (8008770 <_Z11cube_mallocm+0x2c>)
 800875c:	2247      	movs	r2, #71	@ 0x47
 800875e:	4905      	ldr	r1, [pc, #20]	@ (8008774 <_Z11cube_mallocm+0x30>)
 8008760:	2000      	movs	r0, #0
 8008762:	f000 fab9 	bl	8008cd8 <_Z17cube_assert_debugbPKctS0_z>
    return ret;
 8008766:	68fb      	ldr	r3, [r7, #12]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	0800a048 	.word	0x0800a048
 8008774:	0800a05c 	.word	0x0800a05c

08008778 <_Z9cube_freePv>:

/**
 * @brief Free inline function, wraps free for multi-platform support
 * @param ptr Pointer to the data to free
 */
inline void cube_free(void* ptr) {
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
#ifdef COMPUTER_ENVIRONMENT
    free(ptr);
#else
    vPortFree(ptr);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f7ff fe91 	bl	80084a8 <vPortFree>
#endif
}
 8008786:	bf00      	nop
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <_ZN7CommandC1Ev>:
/* Function Implementation ------------------------------------------------------------------*/

/**
 * @brief Default constructor for Command
*/
Command::Command(void)
 800878e:	b480      	push	{r7}
 8008790:	b083      	sub	sp, #12
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
{
    command = COMMAND_NONE;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	701a      	strb	r2, [r3, #0]
    taskCommand = 0;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	805a      	strh	r2, [r3, #2]
    data = nullptr;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	605a      	str	r2, [r3, #4]
    dataSize = 0;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	811a      	strh	r2, [r3, #8]
    bShouldFreeData = false;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	729a      	strb	r2, [r3, #10]
}
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4618      	mov	r0, r3
 80087b8:	370c      	adds	r7, #12
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr

080087c2 <_ZN7CommandC1E15GLOBAL_COMMANDSt>:
/**
 * @brief Constructor with GLOBAL_COMMANDS and taskCommand params
 * @param command GLOBAL_COMMANDS param to initiate command with
 * @param taskCommand taskCommand param to initiate command with
*/
Command::Command(GLOBAL_COMMANDS command, uint16_t taskCommand)
 80087c2:	b480      	push	{r7}
 80087c4:	b083      	sub	sp, #12
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	460b      	mov	r3, r1
 80087cc:	70fb      	strb	r3, [r7, #3]
 80087ce:	4613      	mov	r3, r2
 80087d0:	803b      	strh	r3, [r7, #0]
{
    this->command = command;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	78fa      	ldrb	r2, [r7, #3]
 80087d6:	701a      	strb	r2, [r3, #0]
    this->taskCommand = taskCommand;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	883a      	ldrh	r2, [r7, #0]
 80087dc:	805a      	strh	r2, [r3, #2]
    data = nullptr;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	605a      	str	r2, [r3, #4]
    dataSize = 0;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	811a      	strh	r2, [r3, #8]
    bShouldFreeData = false;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	729a      	strb	r2, [r3, #10]
}
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4618      	mov	r0, r3
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
	...

08008800 <_ZN7Command12AllocateDataEt>:
 * @brief Dynamically allocates memory for the command with the given data size
 * @param dataSize Size of array to allocate
 * @return Pointer to data on success, nullptr on failure (mem already allocated)
*/
uint8_t* Command::AllocateData(uint16_t dataSize)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	460b      	mov	r3, r1
 800880a:	807b      	strh	r3, [r7, #2]
    // If we don't have anything allocated, allocate and return success
    if (this->data == nullptr && !bShouldFreeData) {
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d126      	bne.n	8008862 <_ZN7Command12AllocateDataEt+0x62>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	7a9b      	ldrb	r3, [r3, #10]
 8008818:	f083 0301 	eor.w	r3, r3, #1
 800881c:	b2db      	uxtb	r3, r3
 800881e:	2b00      	cmp	r3, #0
 8008820:	d01f      	beq.n	8008862 <_ZN7Command12AllocateDataEt+0x62>
        this->data = cube_malloc(dataSize);
 8008822:	887b      	ldrh	r3, [r7, #2]
 8008824:	4618      	mov	r0, r3
 8008826:	f7ff ff8d 	bl	8008744 <_Z11cube_mallocm>
 800882a:	4602      	mov	r2, r0
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	605a      	str	r2, [r3, #4]
        this->bShouldFreeData = true;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	729a      	strb	r2, [r3, #10]
        this->dataSize = dataSize;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	887a      	ldrh	r2, [r7, #2]
 800883a:	811a      	strh	r2, [r3, #8]
        statAllocationCounter += 1;
 800883c:	2101      	movs	r1, #1
 800883e:	480b      	ldr	r0, [pc, #44]	@ (800886c <_ZN7Command12AllocateDataEt+0x6c>)
 8008840:	f000 f872 	bl	8008928 <_ZNSt13__atomic_baseItEpLEt>

        //TODO: May want to print out whenever we have an imbalance in statAllocationCounter by more than ~5 or so.
        CUBE_ASSERT(statAllocationCounter < MAX_NUMBER_OF_COMMAND_ALLOCATIONS);
 8008844:	4809      	ldr	r0, [pc, #36]	@ (800886c <_ZN7Command12AllocateDataEt+0x6c>)
 8008846:	f000 f889 	bl	800895c <_ZNKSt13__atomic_baseItEcvtEv>
 800884a:	4603      	mov	r3, r0
 800884c:	2b63      	cmp	r3, #99	@ 0x63
 800884e:	d905      	bls.n	800885c <_ZN7Command12AllocateDataEt+0x5c>
 8008850:	2300      	movs	r3, #0
 8008852:	2267      	movs	r2, #103	@ 0x67
 8008854:	4906      	ldr	r1, [pc, #24]	@ (8008870 <_ZN7Command12AllocateDataEt+0x70>)
 8008856:	2000      	movs	r0, #0
 8008858:	f000 fa3e 	bl	8008cd8 <_Z17cube_assert_debugbPKctS0_z>
        return this->data;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	e000      	b.n	8008864 <_ZN7Command12AllocateDataEt+0x64>
    }
    return nullptr;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	24010810 	.word	0x24010810
 8008870:	0800a0a4 	.word	0x0800a0a4

08008874 <_ZN7Command17CopyDataToCommandEPht>:

/**
 * @brief Copies data from the source array into memory owned by Command and sets the internal data pointer to the new array
 */
bool Command::CopyDataToCommand(uint8_t* dataSrc, uint16_t size)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	4613      	mov	r3, r2
 8008880:	80fb      	strh	r3, [r7, #6]
    // If we successfully allocate, copy the data and return success
    if(this->AllocateData(size)
 8008882:	88fb      	ldrh	r3, [r7, #6]
 8008884:	4619      	mov	r1, r3
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f7ff ffba 	bl	8008800 <_ZN7Command12AllocateDataEt>
 800888c:	4603      	mov	r3, r0
        && this->data != nullptr) {
 800888e:	2b00      	cmp	r3, #0
 8008890:	d005      	beq.n	800889e <_ZN7Command17CopyDataToCommandEPht+0x2a>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <_ZN7Command17CopyDataToCommandEPht+0x2a>
 800889a:	2301      	movs	r3, #1
 800889c:	e000      	b.n	80088a0 <_ZN7Command17CopyDataToCommandEPht+0x2c>
 800889e:	2300      	movs	r3, #0
    if(this->AllocateData(size)
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d008      	beq.n	80088b6 <_ZN7Command17CopyDataToCommandEPht+0x42>
        memcpy(this->data, dataSrc, size);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	88fa      	ldrh	r2, [r7, #6]
 80088aa:	68b9      	ldr	r1, [r7, #8]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 fe43 	bl	8009538 <memcpy>
        return true;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e000      	b.n	80088b8 <_ZN7Command17CopyDataToCommandEPht+0x44>
    }

    return false;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <_ZN7Command5ResetEv>:

/**
 * @brief Resets command, equivalent of a destructor that must be called, counts allocations and deallocations, asserts an error if the allocation count is too high
*/
void Command::Reset()
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
    if(bShouldFreeData && data != nullptr) {
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	7a9b      	ldrb	r3, [r3, #10]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d012      	beq.n	80088f6 <_ZN7Command5ResetEv+0x36>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00e      	beq.n	80088f6 <_ZN7Command5ResetEv+0x36>
        cube_free(data);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	4618      	mov	r0, r3
 80088de:	f7ff ff4b 	bl	8008778 <_Z9cube_freePv>
        statAllocationCounter -= 1;
 80088e2:	2101      	movs	r1, #1
 80088e4:	4806      	ldr	r0, [pc, #24]	@ (8008900 <_ZN7Command5ResetEv+0x40>)
 80088e6:	f000 f86b 	bl	80089c0 <_ZNSt13__atomic_baseItEmIEt>
		data = nullptr;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	605a      	str	r2, [r3, #4]
        bShouldFreeData = false;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	729a      	strb	r2, [r3, #10]
    }
}
 80088f6:	bf00      	nop
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	24010810 	.word	0x24010810

08008904 <_ZNK7Command11GetDataSizeEv>:
/**
 * @brief Getter for Data size
 * @return data size if data is allocated, otherwise returns 0 
*/
uint16_t Command::GetDataSize() const
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
    if (data == nullptr)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d101      	bne.n	8008918 <_ZNK7Command11GetDataSizeEv+0x14>
        return 0;
 8008914:	2300      	movs	r3, #0
 8008916:	e001      	b.n	800891c <_ZNK7Command11GetDataSizeEv+0x18>
    return dataSize;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	891b      	ldrh	r3, [r3, #8]
}
 800891c:	4618      	mov	r0, r3
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <_ZNSt13__atomic_baseItEpLEt>:
      __int_type
      operator--() volatile noexcept
      { return __atomic_sub_fetch(&_M_i, 1, int(memory_order_seq_cst)); }

      __int_type
      operator+=(__int_type __i) noexcept
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	460b      	mov	r3, r1
 8008932:	807b      	strh	r3, [r7, #2]
      { return __atomic_add_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	887a      	ldrh	r2, [r7, #2]
 8008938:	f3bf 8f5b 	dmb	ish
 800893c:	e8d3 1f5f 	ldrexh	r1, [r3]
 8008940:	4411      	add	r1, r2
 8008942:	e8c3 1f50 	strexh	r0, r1, [r3]
 8008946:	2800      	cmp	r0, #0
 8008948:	d1f8      	bne.n	800893c <_ZNSt13__atomic_baseItEpLEt+0x14>
 800894a:	f3bf 8f5b 	dmb	ish
 800894e:	b28b      	uxth	r3, r1
 8008950:	4618      	mov	r0, r3
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <_ZNKSt13__atomic_baseItEcvtEv>:
      operator __int_type() const noexcept
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	617b      	str	r3, [r7, #20]
 8008968:	2305      	movs	r3, #5
 800896a:	613b      	str	r3, [r7, #16]

      _GLIBCXX_ALWAYS_INLINE __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 800896c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008970:	6938      	ldr	r0, [r7, #16]
 8008972:	f7ff fed9 	bl	8008728 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 8008976:	60f8      	str	r0, [r7, #12]
	__glibcxx_assert(__b != memory_order_release);
 8008978:	f7ff fece 	bl	8008718 <_ZSt23__is_constant_evaluatedv>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d004      	beq.n	800898c <_ZNKSt13__atomic_baseItEcvtEv+0x30>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2b03      	cmp	r3, #3
 8008986:	d101      	bne.n	800898c <_ZNKSt13__atomic_baseItEcvtEv+0x30>
 8008988:	2301      	movs	r3, #1
 800898a:	e000      	b.n	800898e <_ZNKSt13__atomic_baseItEcvtEv+0x32>
 800898c:	2300      	movs	r3, #0
 800898e:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 8008990:	f7ff fec2 	bl	8008718 <_ZSt23__is_constant_evaluatedv>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d004      	beq.n	80089a4 <_ZNKSt13__atomic_baseItEcvtEv+0x48>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2b04      	cmp	r3, #4
 800899e:	d101      	bne.n	80089a4 <_ZNKSt13__atomic_baseItEcvtEv+0x48>
 80089a0:	2301      	movs	r3, #1
 80089a2:	e000      	b.n	80089a6 <_ZNKSt13__atomic_baseItEcvtEv+0x4a>
 80089a4:	2300      	movs	r3, #0
 80089a6:	2b00      	cmp	r3, #0

	return __atomic_load_n(&_M_i, int(__m));
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	f3bf 8f5b 	dmb	ish
 80089ae:	881b      	ldrh	r3, [r3, #0]
 80089b0:	f3bf 8f5b 	dmb	ish
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	bf00      	nop
      { return load(); }
 80089b8:	4618      	mov	r0, r3
 80089ba:	3718      	adds	r7, #24
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <_ZNSt13__atomic_baseItEmIEt>:
      operator-=(__int_type __i) noexcept
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	460b      	mov	r3, r1
 80089ca:	807b      	strh	r3, [r7, #2]
      { return __atomic_sub_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	887a      	ldrh	r2, [r7, #2]
 80089d0:	f3bf 8f5b 	dmb	ish
 80089d4:	e8d3 1f5f 	ldrexh	r1, [r3]
 80089d8:	eba1 0102 	sub.w	r1, r1, r2
 80089dc:	e8c3 1f50 	strexh	r0, r1, [r3]
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d1f7      	bne.n	80089d4 <_ZNSt13__atomic_baseItEmIEt+0x14>
 80089e4:	f3bf 8f5b 	dmb	ish
 80089e8:	b28b      	uxth	r3, r1
 80089ea:	4618      	mov	r0, r3
 80089ec:	370c      	adds	r7, #12
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
	...

080089f8 <_ZN5MutexC1Ev>:
#include "semphr.h"

/**
 * @brief Constructor for the Mutex class.
 */
Mutex::Mutex()
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
{
    rtSemaphoreHandle = xSemaphoreCreateMutex();
 8008a00:	2001      	movs	r0, #1
 8008a02:	f7fd f906 	bl	8005c12 <xQueueCreateMutex>
 8008a06:	4602      	mov	r2, r0
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	601a      	str	r2, [r3, #0]

    CUBE_ASSERT(rtSemaphoreHandle != NULL, "Semaphore creation failed.");
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d105      	bne.n	8008a20 <_ZN5MutexC1Ev+0x28>
 8008a14:	4b05      	ldr	r3, [pc, #20]	@ (8008a2c <_ZN5MutexC1Ev+0x34>)
 8008a16:	2215      	movs	r2, #21
 8008a18:	4905      	ldr	r1, [pc, #20]	@ (8008a30 <_ZN5MutexC1Ev+0x38>)
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	f000 f95c 	bl	8008cd8 <_Z17cube_assert_debugbPKctS0_z>
}
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4618      	mov	r0, r3
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	0800a0c0 	.word	0x0800a0c0
 8008a30:	0800a0dc 	.word	0x0800a0dc

08008a34 <_ZN5MutexD1Ev>:


/**
 * @brief Destructor for the Mutex class.
 */
Mutex::~Mutex()
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
{
    vSemaphoreDelete(rtSemaphoreHandle);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7fd fc91 	bl	8006368 <vQueueDelete>
}
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <_ZN5Mutex4LockEm>:
 * @brief This function is used to lock the Mutex.
 * @param timeout_ms The time to wait for the Mutex before it fails. If timeout_ms is not provided, the function will wait indefinitely.
 * @return True on success, false on failure.
*/
bool Mutex::Lock(uint32_t timeout_ms)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
    return xSemaphoreTake(rtSemaphoreHandle, MS_TO_TICKS(timeout_ms)) == pdTRUE;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	6839      	ldr	r1, [r7, #0]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fd fb71 	bl	8006148 <xQueueSemaphoreTake>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	bf0c      	ite	eq
 8008a6c:	2301      	moveq	r3, #1
 8008a6e:	2300      	movne	r3, #0
 8008a70:	b2db      	uxtb	r3, r3
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <_ZN5Mutex6UnlockEv>:
/**
 * @brief This function will attempt to unlock the mutex
 * @return True on success (mutex unlocked) false in failure (mutex was not unlocked)
*/
bool Mutex::Unlock()
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b082      	sub	sp, #8
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
    return xSemaphoreGive(rtSemaphoreHandle) == pdTRUE;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6818      	ldr	r0, [r3, #0]
 8008a86:	2300      	movs	r3, #0
 8008a88:	2200      	movs	r2, #0
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	f7fd f8da 	bl	8005c44 <xQueueGenericSend>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	bf0c      	ite	eq
 8008a96:	2301      	moveq	r3, #1
 8008a98:	2300      	movne	r3, #0
 8008a9a:	b2db      	uxtb	r3, r3
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <_ZN5QueueC1Et>:

/**
 * @brief Constructor with depth for the Queue class
 * @param depth Queue depth
*/
Queue::Queue(uint16_t depth)
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	460b      	mov	r3, r1
 8008aae:	807b      	strh	r3, [r7, #2]
{
    //Initialize RTOS Queue handle with given depth
    rtQueueHandle = xQueueCreate(depth, sizeof(Command));
 8008ab0:	887b      	ldrh	r3, [r7, #2]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	210c      	movs	r1, #12
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fd f837 	bl	8005b2a <xQueueGenericCreate>
 8008abc:	4602      	mov	r2, r0
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	601a      	str	r2, [r3, #0]
    queueDepth = depth;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	887a      	ldrh	r2, [r7, #2]
 8008ac6:	809a      	strh	r2, [r3, #4]
}
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4618      	mov	r0, r3
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <_ZN5Queue11SendFromISRER7Command>:
 * @brief Sends a command object to the queue, safe to call from ISR
 * @param command Command object reference to send
 * @return true on success, false on failure (queue full)
*/
bool Queue::SendFromISR(Command& command)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b082      	sub	sp, #8
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	6039      	str	r1, [r7, #0]
    //Note: There NULL param here could be used to wake a task right after after exiting the ISR
    if (xQueueSendFromISR(rtQueueHandle, &command, NULL) == pdPASS)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6818      	ldr	r0, [r3, #0]
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	6839      	ldr	r1, [r7, #0]
 8008ae6:	f7fd f9af 	bl	8005e48 <xQueueGenericSendFromISR>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	bf0c      	ite	eq
 8008af0:	2301      	moveq	r3, #1
 8008af2:	2300      	movne	r3, #0
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d001      	beq.n	8008afe <_ZN5Queue11SendFromISRER7Command+0x2c>
        return true;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e003      	b.n	8008b06 <_ZN5Queue11SendFromISRER7Command+0x34>

    command.Reset();
 8008afe:	6838      	ldr	r0, [r7, #0]
 8008b00:	f7ff fede 	bl	80088c0 <_ZN7Command5ResetEv>

    return false;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
	...

08008b10 <_ZN5Queue4SendER7Commandb>:
 * 
 * //TODO: It may be possible to have this automatically set the command to not free data externally 
 * as we've "passed" control of the data over, which might let us use a destructor to free the data  
*/
bool Queue::Send(Command& command, bool reportFull)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	71fb      	strb	r3, [r7, #7]
    if (xQueueSend(rtQueueHandle, &command, DEFAULT_QUEUE_SEND_WAIT_TICKS) == pdPASS)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6818      	ldr	r0, [r3, #0]
 8008b22:	2300      	movs	r3, #0
 8008b24:	220f      	movs	r2, #15
 8008b26:	68b9      	ldr	r1, [r7, #8]
 8008b28:	f7fd f88c 	bl	8005c44 <xQueueGenericSend>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	bf0c      	ite	eq
 8008b32:	2301      	moveq	r3, #1
 8008b34:	2300      	movne	r3, #0
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d001      	beq.n	8008b40 <_ZN5Queue4SendER7Commandb+0x30>
        return true;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e009      	b.n	8008b54 <_ZN5Queue4SendER7Commandb+0x44>

    if (reportFull) CUBE_PRINT("Could not send data to queue!\n");
 8008b40:	79fb      	ldrb	r3, [r7, #7]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d002      	beq.n	8008b4c <_ZN5Queue4SendER7Commandb+0x3c>
 8008b46:	4805      	ldr	r0, [pc, #20]	@ (8008b5c <_ZN5Queue4SendER7Commandb+0x4c>)
 8008b48:	f000 f864 	bl	8008c14 <_Z10cube_printPKcz>

    command.Reset();
 8008b4c:	68b8      	ldr	r0, [r7, #8]
 8008b4e:	f7ff feb7 	bl	80088c0 <_ZN7Command5ResetEv>

    return false;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	0800a120 	.word	0x0800a120

08008b60 <_ZN5Queue11ReceiveWaitER7Command>:
 * @brief Polls queue with specific timeout, blocks forever
 * @param cm Command object to copy received data into
 * @return TRUE if we received a command, FALSE otherwise (should rarely return false)
*/
bool Queue::ReceiveWait(Command& cm)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
    if (xQueueReceive(rtQueueHandle, &cm, HAL_MAX_DELAY) == pdTRUE) {
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fd fa05 	bl	8005f84 <xQueueReceive>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	bf0c      	ite	eq
 8008b80:	2301      	moveq	r3, #1
 8008b82:	2300      	movne	r3, #0
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d001      	beq.n	8008b8e <_ZN5Queue11ReceiveWaitER7Command+0x2e>
        return true;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e000      	b.n	8008b90 <_ZN5Queue11ReceiveWaitER7Command+0x30>
    }
    return false;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <_Znwj>:

/* Other ------------------------------------------------------------------*/
// Override the new and delete operator to ensure heap4 is used for dynamic memory allocation
inline void* operator new(size_t size) { return cube_malloc(size); }
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f7ff fdcf 	bl	8008744 <_Z11cube_mallocm>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3708      	adds	r7, #8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <_ZN4TaskC1Et>:

/**
 * @brief Constructor with queue depth
 * @param depth Optionally 0, uses the given depth for the event queue
*/
Task::Task(uint16_t depth)
 8008bb0:	b590      	push	{r4, r7, lr}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	807b      	strh	r3, [r7, #2]
 8008bbc:	4a0e      	ldr	r2, [pc, #56]	@ (8008bf8 <_ZN4TaskC1Et+0x48>)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	601a      	str	r2, [r3, #0]
{
    if (depth == 0)
 8008bc2:	887b      	ldrh	r3, [r7, #2]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d103      	bne.n	8008bd0 <_ZN4TaskC1Et+0x20>
        qEvtQueue = nullptr;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	609a      	str	r2, [r3, #8]
 8008bce:	e00b      	b.n	8008be8 <_ZN4TaskC1Et+0x38>
    else
        qEvtQueue = new Queue(depth);
 8008bd0:	2008      	movs	r0, #8
 8008bd2:	f7ff ffe1 	bl	8008b98 <_Znwj>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	461c      	mov	r4, r3
 8008bda:	887b      	ldrh	r3, [r7, #2]
 8008bdc:	4619      	mov	r1, r3
 8008bde:	4620      	mov	r0, r4
 8008be0:	f7ff ff60 	bl	8008aa4 <_ZN5QueueC1Et>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	609c      	str	r4, [r3, #8]
    rtTaskHandle = nullptr;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	605a      	str	r2, [r3, #4]
}
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd90      	pop	{r4, r7, pc}
 8008bf8:	0800a384 	.word	0x0800a384

08008bfc <_ZNK4Task13GetEventQueueEv>:
    Task(void);
    Task(uint16_t depth);

    virtual void InitTask() = 0;

    Queue* GetEventQueue() const { return qEvtQueue; }
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <_Z10cube_printPKcz>:
* @brief Variadic print function, sends a command packet to the queue
* @param str String to print with printf style formatting
* @param ... Additional arguments to print if assertion fails, in same format as printf
*/
void cube_print(const char* str, ...)
{
 8008c14:	b40f      	push	{r0, r1, r2, r3}
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b0b6      	sub	sp, #216	@ 0xd8
 8008c1a:	af00      	add	r7, sp, #0
#ifndef DISABLE_DEBUG
    //Try to take the VA list mutex
    if (Global::vaListMutex.Lock(DEBUG_TAKE_MAX_TIME_MS)) {
 8008c1c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8008c20:	482a      	ldr	r0, [pc, #168]	@ (8008ccc <_Z10cube_printPKcz+0xb8>)
 8008c22:	f7ff ff15 	bl	8008a50 <_ZN5Mutex4LockEm>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d041      	beq.n	8008cb0 <_Z10cube_printPKcz+0x9c>
        // If we have a message, and can use VA list, extract the string into a new buffer, and null terminate it
        uint8_t str_buffer[DEBUG_PRINT_MAX_SIZE] = {};
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	607b      	str	r3, [r7, #4]
 8008c30:	f107 0308 	add.w	r3, r7, #8
 8008c34:	22bc      	movs	r2, #188	@ 0xbc
 8008c36:	2100      	movs	r1, #0
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f000 fbf3 	bl	8009424 <memset>
        va_list argument_list;
        va_start(argument_list, str);
 8008c3e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8008c42:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        int16_t buflen = vsnprintf(reinterpret_cast<char*>(str_buffer), sizeof(str_buffer) - 1, str, argument_list);
 8008c46:	1d38      	adds	r0, r7, #4
 8008c48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008c4c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008c50:	21bf      	movs	r1, #191	@ 0xbf
 8008c52:	f000 fbd9 	bl	8009408 <vsniprintf>
 8008c56:	4603      	mov	r3, r0
 8008c58:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
        va_end(argument_list);
        if (buflen > 0) {
 8008c5c:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	@ 0xd6
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	dd06      	ble.n	8008c72 <_Z10cube_printPKcz+0x5e>
            str_buffer[buflen] = '\0';
 8008c64:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	@ 0xd6
 8008c68:	33d8      	adds	r3, #216	@ 0xd8
 8008c6a:	443b      	add	r3, r7
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f803 2cd4 	strb.w	r2, [r3, #-212]
        }

        // Release the VA List Mutex
        Global::vaListMutex.Unlock();
 8008c72:	4816      	ldr	r0, [pc, #88]	@ (8008ccc <_Z10cube_printPKcz+0xb8>)
 8008c74:	f7ff ff01 	bl	8008a7a <_ZN5Mutex6UnlockEv>

        //Generate a command
        Command cmd(DATA_COMMAND, (uint16_t)CUBE_TASK_COMMAND_SEND_DEBUG); // Set the UART channel to send data on
 8008c78:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	2102      	movs	r1, #2
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7ff fd9e 	bl	80087c2 <_ZN7CommandC1E15GLOBAL_COMMANDSt>

        //Copy data into the command
        cmd.CopyDataToCommand(str_buffer, buflen);
 8008c86:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 8008c8a:	1d39      	adds	r1, r7, #4
 8008c8c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7ff fdef 	bl	8008874 <_ZN7Command17CopyDataToCommandEPht>

        //Send this packet off to the UART Task
        CubeTask::Inst().GetEventQueue()->Send(cmd, false);
 8008c96:	f7f7 fd6d 	bl	8000774 <_ZN8CubeTask4InstEv>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7ff ffad 	bl	8008bfc <_ZNK4Task13GetEventQueueEv>
 8008ca2:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	4619      	mov	r1, r3
 8008caa:	f7ff ff31 	bl	8008b10 <_ZN5Queue4SendER7Commandb>
    {
        // Print out that we could not acquire the VA list mutex
        CUBE_ASSERT(false, "Could not acquire VA_LIST mutex");
    }
#endif
}
 8008cae:	e005      	b.n	8008cbc <_Z10cube_printPKcz+0xa8>
        CUBE_ASSERT(false, "Could not acquire VA_LIST mutex");
 8008cb0:	4b07      	ldr	r3, [pc, #28]	@ (8008cd0 <_Z10cube_printPKcz+0xbc>)
 8008cb2:	2238      	movs	r2, #56	@ 0x38
 8008cb4:	4907      	ldr	r1, [pc, #28]	@ (8008cd4 <_Z10cube_printPKcz+0xc0>)
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	f000 f80e 	bl	8008cd8 <_Z17cube_assert_debugbPKctS0_z>
}
 8008cbc:	bf00      	nop
 8008cbe:	37d8      	adds	r7, #216	@ 0xd8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008cc6:	b004      	add	sp, #16
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	24010814 	.word	0x24010814
 8008cd0:	0800a140 	.word	0x0800a140
 8008cd4:	0800a160 	.word	0x0800a160

08008cd8 <_Z17cube_assert_debugbPKctS0_z>:
 * @param file File that the assertion is in (__FILE__)
 * @param line Line number that the assertion is on (__LINE__)
 * @param str Optional message to print if assertion fails. Must be less than 192 characters AFTER formatting
 * @param ... Additional arguments to print if assertion fails, in same format as printf
 */
void cube_assert_debug(bool condition, const char* file, const uint16_t line, const char* str, ...) {
 8008cd8:	b408      	push	{r3}
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b0d9      	sub	sp, #356	@ 0x164
 8008cde:	af02      	add	r7, sp, #8
 8008ce0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8008ce4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8008ce8:	6019      	str	r1, [r3, #0]
 8008cea:	4611      	mov	r1, r2
 8008cec:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8008cf0:	f2a3 1351 	subw	r3, r3, #337	@ 0x151
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	701a      	strb	r2, [r3, #0]
 8008cf8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8008cfc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8008d00:	460a      	mov	r2, r1
 8008d02:	801a      	strh	r2, [r3, #0]
    // If assertion succeeds, do nothing
    if (condition) {
 8008d04:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8008d08:	f2a3 1351 	subw	r3, r3, #337	@ 0x151
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f040 8091 	bne.w	8008e36 <_Z17cube_assert_debugbPKctS0_z+0x15e>
        return;
    }

#ifndef DISABLE_DEBUG

    bool printMessage = false;
 8008d14:	2300      	movs	r3, #0
 8008d16:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157

    // NOTE: Be careful! If va_list funcs while RTOS is active ALL calls to any vsnprint functions MUST have a mutex lock/unlock
    // NOTE: https://nadler.com/embedded/newlibAndFreeRTOS.html

    // We have an assert fail, we try to take control of the Debug semaphore, and then suspend all other parts of the system
    if (Global::vaListMutex.Lock(ASSERT_TAKE_MAX_TIME_MS)) {
 8008d1a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8008d1e:	484a      	ldr	r0, [pc, #296]	@ (8008e48 <_Z17cube_assert_debugbPKctS0_z+0x170>)
 8008d20:	f7ff fe96 	bl	8008a50 <_ZN5Mutex4LockEm>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d002      	beq.n	8008d30 <_Z17cube_assert_debugbPKctS0_z+0x58>
        // We have the mutex, we can now safely print the message
        printMessage = true;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
    }

    vTaskSuspendAll();
 8008d30:	f7fd ff44 	bl	8006bbc <vTaskSuspendAll>

    //If we have the vaListMutex, we can safely use vsnprintf
    if (printMessage) {
 8008d34:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d072      	beq.n	8008e22 <_Z17cube_assert_debugbPKctS0_z+0x14a>
        // Print out the assertion header through the supported interface, we don't have a UART task running, so we directly use HAL
        uint8_t header_buf[ASSERT_BUFFER_MAX_SIZE] = {};
 8008d3c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8008d40:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8008d44:	2200      	movs	r2, #0
 8008d46:	601a      	str	r2, [r3, #0]
 8008d48:	3304      	adds	r3, #4
 8008d4a:	229c      	movs	r2, #156	@ 0x9c
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 fb68 	bl	8009424 <memset>
        int16_t res = snprintf(reinterpret_cast<char*>(header_buf), ASSERT_BUFFER_MAX_SIZE - 1, "\r\n\n-- ASSERTION FAILED --\r\nFile [%s] @ Line # [%d]\r\n", file, line);
 8008d54:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8008d58:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8008d5c:	881a      	ldrh	r2, [r3, #0]
 8008d5e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8008d62:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8008d66:	f107 000c 	add.w	r0, r7, #12
 8008d6a:	9200      	str	r2, [sp, #0]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a37      	ldr	r2, [pc, #220]	@ (8008e4c <_Z17cube_assert_debugbPKctS0_z+0x174>)
 8008d70:	219f      	movs	r1, #159	@ 0x9f
 8008d72:	f000 fae9 	bl	8009348 <sniprintf>
 8008d76:	4603      	mov	r3, r0
 8008d78:	f8a7 3154 	strh.w	r3, [r7, #340]	@ 0x154
        if (res < 0) {
 8008d7c:	f9b7 3154 	ldrsh.w	r3, [r7, #340]	@ 0x154
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	da0a      	bge.n	8008d9a <_Z17cube_assert_debugbPKctS0_z+0xc2>
            // If we failed to generate the header, just format the line number
            snprintf(reinterpret_cast<char*>(header_buf), ASSERT_BUFFER_MAX_SIZE - 1, "\r\n\n-- ASSERTION FAILED --\r\nFile [PATH_TOO_LONG] @ Line # [%d]\r\n", line);
 8008d84:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8008d88:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8008d8c:	881b      	ldrh	r3, [r3, #0]
 8008d8e:	f107 000c 	add.w	r0, r7, #12
 8008d92:	4a2f      	ldr	r2, [pc, #188]	@ (8008e50 <_Z17cube_assert_debugbPKctS0_z+0x178>)
 8008d94:	219f      	movs	r1, #159	@ 0x9f
 8008d96:	f000 fad7 	bl	8009348 <sniprintf>
        }

        // Output the header to the debug port
        DEFAULT_DEBUG_UART_DRIVER->Transmit(header_buf, strlen(reinterpret_cast<char*>(header_buf)));
 8008d9a:	f107 030c 	add.w	r3, r7, #12
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7f7 faa8 	bl	80002f4 <strlen>
 8008da4:	4603      	mov	r3, r0
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	f107 030c 	add.w	r3, r7, #12
 8008dac:	4619      	mov	r1, r3
 8008dae:	4829      	ldr	r0, [pc, #164]	@ (8008e54 <_Z17cube_assert_debugbPKctS0_z+0x17c>)
 8008db0:	f000 fa02 	bl	80091b8 <_ZN10UARTDriver8TransmitEPht>

        // If we have a message, and can use VA list, extract the string into a new buffer, and null terminate it
        if (printMessage && str != nullptr) {
 8008db4:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d037      	beq.n	8008e2c <_Z17cube_assert_debugbPKctS0_z+0x154>
 8008dbc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d033      	beq.n	8008e2c <_Z17cube_assert_debugbPKctS0_z+0x154>
            uint8_t str_buffer[ASSERT_BUFFER_MAX_SIZE] = {};
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008dca:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8008dce:	229c      	movs	r2, #156	@ 0x9c
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f000 fb26 	bl	8009424 <memset>
            va_list argument_list;
            va_start(argument_list, str);
 8008dd8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8008ddc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
            int16_t buflen = vsnprintf(reinterpret_cast<char*>(str_buffer), sizeof(str_buffer) - 1, str, argument_list);
 8008de0:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 8008de4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008de8:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8008dec:	219f      	movs	r1, #159	@ 0x9f
 8008dee:	f000 fb0b 	bl	8009408 <vsniprintf>
 8008df2:	4603      	mov	r3, r0
 8008df4:	f8a7 3152 	strh.w	r3, [r7, #338]	@ 0x152
            va_end(argument_list);
            if (buflen > 0) {
 8008df8:	f9b7 3152 	ldrsh.w	r3, [r7, #338]	@ 0x152
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	dd15      	ble.n	8008e2c <_Z17cube_assert_debugbPKctS0_z+0x154>
                str_buffer[buflen] = '\0';
 8008e00:	f9b7 3152 	ldrsh.w	r3, [r7, #338]	@ 0x152
 8008e04:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008e08:	443b      	add	r3, r7
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f803 2cac 	strb.w	r2, [r3, #-172]
                DEFAULT_DEBUG_UART_DRIVER->Transmit(str_buffer, buflen);
 8008e10:	f8b7 2152 	ldrh.w	r2, [r7, #338]	@ 0x152
 8008e14:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8008e18:	4619      	mov	r1, r3
 8008e1a:	480e      	ldr	r0, [pc, #56]	@ (8008e54 <_Z17cube_assert_debugbPKctS0_z+0x17c>)
 8008e1c:	f000 f9cc 	bl	80091b8 <_ZN10UARTDriver8TransmitEPht>
 8008e20:	e004      	b.n	8008e2c <_Z17cube_assert_debugbPKctS0_z+0x154>
            }
        }
    }
    else {
        DEFAULT_DEBUG_UART_DRIVER->Transmit((uint8_t*)"-- ASSERTION FAILED --\r\nCould not acquire vaListMutex\r\n", 55);
 8008e22:	2237      	movs	r2, #55	@ 0x37
 8008e24:	490c      	ldr	r1, [pc, #48]	@ (8008e58 <_Z17cube_assert_debugbPKctS0_z+0x180>)
 8008e26:	480b      	ldr	r0, [pc, #44]	@ (8008e54 <_Z17cube_assert_debugbPKctS0_z+0x17c>)
 8008e28:	f000 f9c6 	bl	80091b8 <_ZN10UARTDriver8TransmitEPht>
    }

#endif

    HAL_NVIC_SystemReset();
 8008e2c:	f7f8 fb9d 	bl	800156a <HAL_NVIC_SystemReset>

    // We should not reach this code, but if we do, we should resume the scheduler
    xTaskResumeAll();
 8008e30:	f7fd fed2 	bl	8006bd8 <xTaskResumeAll>
 8008e34:	e000      	b.n	8008e38 <_Z17cube_assert_debugbPKctS0_z+0x160>
        return;
 8008e36:	bf00      	nop
}
 8008e38:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e42:	b001      	add	sp, #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	24010814 	.word	0x24010814
 8008e4c:	0800a17c 	.word	0x0800a17c
 8008e50:	0800a1b4 	.word	0x0800a1b4
 8008e54:	240000bc 	.word	0x240000bc
 8008e58:	0800a1f4 	.word	0x0800a1f4

08008e5c <_Z41__static_initialization_and_destruction_0ii>:
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d107      	bne.n	8008e7c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d102      	bne.n	8008e7c <_Z41__static_initialization_and_destruction_0ii+0x20>
Mutex Global::vaListMutex;
 8008e76:	4809      	ldr	r0, [pc, #36]	@ (8008e9c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008e78:	f7ff fdbe 	bl	80089f8 <_ZN5MutexC1Ev>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d107      	bne.n	8008e92 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d102      	bne.n	8008e92 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8008e8c:	4803      	ldr	r0, [pc, #12]	@ (8008e9c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008e8e:	f7ff fdd1 	bl	8008a34 <_ZN5MutexD1Ev>
}
 8008e92:	bf00      	nop
 8008e94:	3708      	adds	r7, #8
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	24010814 	.word	0x24010814

08008ea0 <_GLOBAL__sub_I__ZN6Global11vaListMutexE>:
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008ea8:	2001      	movs	r0, #1
 8008eaa:	f7ff ffd7 	bl	8008e5c <_Z41__static_initialization_and_destruction_0ii>
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <_GLOBAL__sub_D__ZN6Global11vaListMutexE>:
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008eb8:	2000      	movs	r0, #0
 8008eba:	f7ff ffcf 	bl	8008e5c <_Z41__static_initialization_and_destruction_0ii>
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <_ZNK7Command14GetDataPointerEv>:
    uint8_t* GetDataPointer() const { return data; }
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <_ZN8CubeTask7RunTaskEPv>:
    }

    void InitTask();

protected:
    static void RunTask(void* pvParams) { CubeTask::Inst().Run(pvParams); } // Static Task Interface, passes control to the instance Run();
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	f7f7 fc48 	bl	8000774 <_ZN8CubeTask4InstEv>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	6879      	ldr	r1, [r7, #4]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f000 f837 	bl	8008f5c <_ZN8CubeTask3RunEPv>
 8008eee:	bf00      	nop
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
	...

08008ef8 <_ZN8CubeTask8InitTaskEv>:

/**
 * @brief Initializes Cube task with the RTOS scheduler
*/
void CubeTask::InitTask()
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af02      	add	r7, sp, #8
 8008efe:	6078      	str	r0, [r7, #4]
    // Make sure the task is not already initialized
    CUBE_ASSERT(rtTaskHandle == nullptr, "Cannot initialize UART task twice");
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d005      	beq.n	8008f14 <_ZN8CubeTask8InitTaskEv+0x1c>
 8008f08:	4b0f      	ldr	r3, [pc, #60]	@ (8008f48 <_ZN8CubeTask8InitTaskEv+0x50>)
 8008f0a:	2211      	movs	r2, #17
 8008f0c:	490f      	ldr	r1, [pc, #60]	@ (8008f4c <_ZN8CubeTask8InitTaskEv+0x54>)
 8008f0e:	2000      	movs	r0, #0
 8008f10:	f7ff fee2 	bl	8008cd8 <_Z17cube_assert_debugbPKctS0_z>

    // Start the task
    BaseType_t rtValue =
        xTaskCreate((TaskFunction_t)CubeTask::RunTask,
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	3304      	adds	r3, #4
 8008f18:	9301      	str	r3, [sp, #4]
 8008f1a:	2302      	movs	r3, #2
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f24:	490a      	ldr	r1, [pc, #40]	@ (8008f50 <_ZN8CubeTask8InitTaskEv+0x58>)
 8008f26:	480b      	ldr	r0, [pc, #44]	@ (8008f54 <_ZN8CubeTask8InitTaskEv+0x5c>)
 8008f28:	f7fd fc52 	bl	80067d0 <xTaskCreate>
 8008f2c:	60f8      	str	r0, [r7, #12]
            (void*)this,
            (UBaseType_t)UART_TASK_RTOS_PRIORITY,
            (TaskHandle_t*)&rtTaskHandle);

    //Ensure creation succeded
    CUBE_ASSERT(rtValue == pdPASS, "CUBETask::InitTask() - xTaskCreate() failed");
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d005      	beq.n	8008f40 <_ZN8CubeTask8InitTaskEv+0x48>
 8008f34:	4b08      	ldr	r3, [pc, #32]	@ (8008f58 <_ZN8CubeTask8InitTaskEv+0x60>)
 8008f36:	221d      	movs	r2, #29
 8008f38:	4904      	ldr	r1, [pc, #16]	@ (8008f4c <_ZN8CubeTask8InitTaskEv+0x54>)
 8008f3a:	2000      	movs	r0, #0
 8008f3c:	f7ff fecc 	bl	8008cd8 <_Z17cube_assert_debugbPKctS0_z>
}
 8008f40:	bf00      	nop
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	0800a22c 	.word	0x0800a22c
 8008f4c:	0800a250 	.word	0x0800a250
 8008f50:	0800a268 	.word	0x0800a268
 8008f54:	08008ed9 	.word	0x08008ed9
 8008f58:	0800a274 	.word	0x0800a274

08008f5c <_ZN8CubeTask3RunEPv>:
/**
 * @brief Instance Run loop for the Cube Task, runs on scheduler start as long as the task is initialized.
 * @param pvParams RTOS Passed void parameters, contains a pointer to the object instance, should not be used
*/
void CubeTask::Run(void * pvParams)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b086      	sub	sp, #24
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
    //UART Task loop
    while(1) {
        Command cm;
 8008f66:	f107 030c 	add.w	r3, r7, #12
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7ff fc0f 	bl	800878e <_ZN7CommandC1Ev>

        //Wait forever for a command
        qEvtQueue->ReceiveWait(cm);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	f107 020c 	add.w	r2, r7, #12
 8008f78:	4611      	mov	r1, r2
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7ff fdf0 	bl	8008b60 <_ZN5Queue11ReceiveWaitER7Command>

        //Process the command
        HandleCommand(cm);
 8008f80:	f107 030c 	add.w	r3, r7, #12
 8008f84:	4619      	mov	r1, r3
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f802 	bl	8008f90 <_ZN8CubeTask13HandleCommandER7Command>
    }
 8008f8c:	bf00      	nop
 8008f8e:	e7ea      	b.n	8008f66 <_ZN8CubeTask3RunEPv+0xa>

08008f90 <_ZN8CubeTask13HandleCommandER7Command>:
 * @brief HandleCommand handles any command passed to the Cube task primary event queue. Responsible for
 *           handling all commands, even if unsupported. (Unexpected commands must still be reset)
 * @param cm Reference to the command object to handle
*/
void CubeTask::HandleCommand(Command& cm)
{
 8008f90:	b590      	push	{r4, r7, lr}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
    //Switch for the GLOBAL_COMMAND
    switch (cm.GetCommand()) {
 8008f9a:	6838      	ldr	r0, [r7, #0]
 8008f9c:	f7f7 fa08 	bl	80003b0 <_ZNK7Command10GetCommandEv>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d11d      	bne.n	8008fe2 <_ZN8CubeTask13HandleCommandER7Command+0x52>
    case DATA_COMMAND: {
        //Switch for task specific command within DATA_COMMAND
        switch (cm.GetTaskCommand()) {
 8008fa6:	6838      	ldr	r0, [r7, #0]
 8008fa8:	f7f7 fa0e 	bl	80003c8 <_ZNK7Command14GetTaskCommandEv>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d10d      	bne.n	8008fce <_ZN8CubeTask13HandleCommandER7Command+0x3e>
        case CUBE_TASK_COMMAND_SEND_DEBUG:
#ifndef DISABLE_DEBUG
                DEFAULT_DEBUG_UART_DRIVER->Transmit(cm.GetDataPointer(), cm.GetDataSize());
 8008fb2:	6838      	ldr	r0, [r7, #0]
 8008fb4:	f7ff ff84 	bl	8008ec0 <_ZNK7Command14GetDataPointerEv>
 8008fb8:	4604      	mov	r4, r0
 8008fba:	6838      	ldr	r0, [r7, #0]
 8008fbc:	f7ff fca2 	bl	8008904 <_ZNK7Command11GetDataSizeEv>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	4621      	mov	r1, r4
 8008fc6:	480f      	ldr	r0, [pc, #60]	@ (8009004 <_ZN8CubeTask13HandleCommandER7Command+0x74>)
 8008fc8:	f000 f8f6 	bl	80091b8 <_ZN10UARTDriver8TransmitEPht>
#endif
            break;
 8008fcc:	e008      	b.n	8008fe0 <_ZN8CubeTask13HandleCommandER7Command+0x50>
        default:
            CUBE_PRINT("CUBETask - Received Unsupported DATA_COMMAND {%d}\n", cm.GetTaskCommand());
 8008fce:	6838      	ldr	r0, [r7, #0]
 8008fd0:	f7f7 f9fa 	bl	80003c8 <_ZNK7Command14GetTaskCommandEv>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	480b      	ldr	r0, [pc, #44]	@ (8009008 <_ZN8CubeTask13HandleCommandER7Command+0x78>)
 8008fda:	f7ff fe1b 	bl	8008c14 <_Z10cube_printPKcz>
            break;
 8008fde:	bf00      	nop
        }
        break;
 8008fe0:	e008      	b.n	8008ff4 <_ZN8CubeTask13HandleCommandER7Command+0x64>
    }
    default:
        CUBE_PRINT("CUBETask - Received Unsupported Command {%d}\n", cm.GetCommand());
 8008fe2:	6838      	ldr	r0, [r7, #0]
 8008fe4:	f7f7 f9e4 	bl	80003b0 <_ZNK7Command10GetCommandEv>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	4619      	mov	r1, r3
 8008fec:	4807      	ldr	r0, [pc, #28]	@ (800900c <_ZN8CubeTask13HandleCommandER7Command+0x7c>)
 8008fee:	f7ff fe11 	bl	8008c14 <_Z10cube_printPKcz>
        break;
 8008ff2:	bf00      	nop
    }

    //No matter what we happens, we must reset allocated data
    cm.Reset();
 8008ff4:	6838      	ldr	r0, [r7, #0]
 8008ff6:	f7ff fc63 	bl	80088c0 <_ZN7Command5ResetEv>
}
 8008ffa:	bf00      	nop
 8008ffc:	370c      	adds	r7, #12
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd90      	pop	{r4, r7, pc}
 8009002:	bf00      	nop
 8009004:	240000bc 	.word	0x240000bc
 8009008:	0800a2a0 	.word	0x0800a2a0
 800900c:	0800a2d4 	.word	0x0800a2d4

08009010 <LL_USART_IsActiveFlag_PE>:
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	69db      	ldr	r3, [r3, #28]
 800901c:	f003 0301 	and.w	r3, r3, #1
 8009020:	2b01      	cmp	r3, #1
 8009022:	d101      	bne.n	8009028 <LL_USART_IsActiveFlag_PE+0x18>
 8009024:	2301      	movs	r3, #1
 8009026:	e000      	b.n	800902a <LL_USART_IsActiveFlag_PE+0x1a>
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <LL_USART_IsActiveFlag_FE>:
{
 8009036:	b480      	push	{r7}
 8009038:	b083      	sub	sp, #12
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	69db      	ldr	r3, [r3, #28]
 8009042:	f003 0302 	and.w	r3, r3, #2
 8009046:	2b02      	cmp	r3, #2
 8009048:	d101      	bne.n	800904e <LL_USART_IsActiveFlag_FE+0x18>
 800904a:	2301      	movs	r3, #1
 800904c:	e000      	b.n	8009050 <LL_USART_IsActiveFlag_FE+0x1a>
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <LL_USART_IsActiveFlag_NE>:
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	69db      	ldr	r3, [r3, #28]
 8009068:	f003 0304 	and.w	r3, r3, #4
 800906c:	2b04      	cmp	r3, #4
 800906e:	d101      	bne.n	8009074 <LL_USART_IsActiveFlag_NE+0x18>
 8009070:	2301      	movs	r3, #1
 8009072:	e000      	b.n	8009076 <LL_USART_IsActiveFlag_NE+0x1a>
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	370c      	adds	r7, #12
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr

08009082 <LL_USART_IsActiveFlag_ORE>:
{
 8009082:	b480      	push	{r7}
 8009084:	b083      	sub	sp, #12
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	69db      	ldr	r3, [r3, #28]
 800908e:	f003 0308 	and.w	r3, r3, #8
 8009092:	2b08      	cmp	r3, #8
 8009094:	d101      	bne.n	800909a <LL_USART_IsActiveFlag_ORE+0x18>
 8009096:	2301      	movs	r3, #1
 8009098:	e000      	b.n	800909c <LL_USART_IsActiveFlag_ORE+0x1a>
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	f003 0320 	and.w	r3, r3, #32
 80090b8:	2b20      	cmp	r3, #32
 80090ba:	d101      	bne.n	80090c0 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 80090bc:	2301      	movs	r3, #1
 80090be:	e000      	b.n	80090c2 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr

080090ce <LL_USART_IsActiveFlag_TC>:
{
 80090ce:	b480      	push	{r7}
 80090d0:	b083      	sub	sp, #12
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	69db      	ldr	r3, [r3, #28]
 80090da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090de:	2b40      	cmp	r3, #64	@ 0x40
 80090e0:	d101      	bne.n	80090e6 <LL_USART_IsActiveFlag_TC+0x18>
 80090e2:	2301      	movs	r3, #1
 80090e4:	e000      	b.n	80090e8 <LL_USART_IsActiveFlag_TC+0x1a>
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	69db      	ldr	r3, [r3, #28]
 8009100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009104:	2b80      	cmp	r3, #128	@ 0x80
 8009106:	d101      	bne.n	800910c <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8009108:	2301      	movs	r3, #1
 800910a:	e000      	b.n	800910e <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	370c      	adds	r7, #12
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr

0800911a <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 800911a:	b480      	push	{r7}
 800911c:	b083      	sub	sp, #12
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2208      	movs	r2, #8
 8009126:	621a      	str	r2, [r3, #32]
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8009134:	b480      	push	{r7}
 8009136:	b089      	sub	sp, #36	@ 0x24
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	e853 3f00 	ldrex	r3, [r3]
 8009146:	60bb      	str	r3, [r7, #8]
   return(result);
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	f043 0320 	orr.w	r3, r3, #32
 800914e:	61fb      	str	r3, [r7, #28]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	69fa      	ldr	r2, [r7, #28]
 8009154:	61ba      	str	r2, [r7, #24]
 8009156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009158:	6979      	ldr	r1, [r7, #20]
 800915a:	69ba      	ldr	r2, [r7, #24]
 800915c:	e841 2300 	strex	r3, r2, [r1]
 8009160:	613b      	str	r3, [r7, #16]
   return(result);
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	2b00      	cmp	r3, #0
 8009166:	bf14      	ite	ne
 8009168:	2301      	movne	r3, #1
 800916a:	2300      	moveq	r3, #0
 800916c:	b2db      	uxtb	r3, r3
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1e4      	bne.n	800913c <LL_USART_EnableIT_RXNE_RXFNE+0x8>
}
 8009172:	bf00      	nop
 8009174:	bf00      	nop
 8009176:	3724      	adds	r7, #36	@ 0x24
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800918c:	b2db      	uxtb	r3, r3
}
 800918e:	4618      	mov	r0, r3
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr

0800919a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800919a:	b480      	push	{r7}
 800919c:	b083      	sub	sp, #12
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
 80091a2:	460b      	mov	r3, r1
 80091a4:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80091a6:	78fa      	ldrb	r2, [r7, #3]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <_ZN10UARTDriver8TransmitEPht>:
 * @param data The data to transmit
 * @param len The length of the data to transmit
 * @return True if the transmission was successful, false otherwise
 */
bool UARTDriver::Transmit(uint8_t* data, uint16_t len)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b086      	sub	sp, #24
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	4613      	mov	r3, r2
 80091c4:	80fb      	strh	r3, [r7, #6]
    // Loop through and transmit each byte via. polling
    for (uint16_t i = 0; i < len; i++) {
 80091c6:	2300      	movs	r3, #0
 80091c8:	82fb      	strh	r3, [r7, #22]
 80091ca:	e019      	b.n	8009200 <_ZN10UARTDriver8TransmitEPht+0x48>
        LL_USART_TransmitData8(kUart_, data[i]);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6818      	ldr	r0, [r3, #0]
 80091d0:	8afb      	ldrh	r3, [r7, #22]
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	4413      	add	r3, r2
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	4619      	mov	r1, r3
 80091da:	f7ff ffde 	bl	800919a <LL_USART_TransmitData8>

        // Wait until the TX Register Empty Flag is set
        while (!LL_USART_IsActiveFlag_TXE(kUart_)) {}
 80091de:	bf00      	nop
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7ff ff85 	bl	80090f4 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	bf0c      	ite	eq
 80091f0:	2301      	moveq	r3, #1
 80091f2:	2300      	movne	r3, #0
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1f2      	bne.n	80091e0 <_ZN10UARTDriver8TransmitEPht+0x28>
    for (uint16_t i = 0; i < len; i++) {
 80091fa:	8afb      	ldrh	r3, [r7, #22]
 80091fc:	3301      	adds	r3, #1
 80091fe:	82fb      	strh	r3, [r7, #22]
 8009200:	8afa      	ldrh	r2, [r7, #22]
 8009202:	88fb      	ldrh	r3, [r7, #6]
 8009204:	429a      	cmp	r2, r3
 8009206:	d3e1      	bcc.n	80091cc <_ZN10UARTDriver8TransmitEPht+0x14>
    }

    // Wait until the transfer complete flag is set
    while (!LL_USART_IsActiveFlag_TC(kUart_)) {}
 8009208:	bf00      	nop
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4618      	mov	r0, r3
 8009210:	f7ff ff5d 	bl	80090ce <LL_USART_IsActiveFlag_TC>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	bf0c      	ite	eq
 800921a:	2301      	moveq	r3, #1
 800921c:	2300      	movne	r3, #0
 800921e:	b2db      	uxtb	r3, r3
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1f2      	bne.n	800920a <_ZN10UARTDriver8TransmitEPht+0x52>

    return true;
 8009224:	2301      	movs	r3, #1
}
 8009226:	4618      	mov	r0, r3
 8009228:	3718      	adds	r7, #24
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <_ZN10UARTDriver9ReceiveITEPhP16UARTReceiverBase>:
* @brief Receives 1 byte of data via interrupt
* @param receiver
* @return TRUE if interrupt was successfully enabled, FALSE otherwise
*/
bool UARTDriver::ReceiveIT(uint8_t* charBuf, UARTReceiverBase* receiver)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b084      	sub	sp, #16
 8009232:	af00      	add	r7, sp, #0
 8009234:	60f8      	str	r0, [r7, #12]
 8009236:	60b9      	str	r1, [r7, #8]
 8009238:	607a      	str	r2, [r7, #4]
    // Check flags
    HandleAndClearRxError();
 800923a:	68f8      	ldr	r0, [r7, #12]
 800923c:	f000 f822 	bl	8009284 <_ZN10UARTDriver21HandleAndClearRxErrorEv>
    if (LL_USART_IsActiveFlag_RXNE(kUart_)) {
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4618      	mov	r0, r3
 8009246:	f7ff ff2f 	bl	80090a8 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	bf14      	ite	ne
 8009250:	2301      	movne	r3, #1
 8009252:	2300      	moveq	r3, #0
 8009254:	b2db      	uxtb	r3, r3
 8009256:	2b00      	cmp	r3, #0
 8009258:	d004      	beq.n	8009264 <_ZN10UARTDriver9ReceiveITEPhP16UARTReceiverBase+0x36>
        // Read the data and ignore it
        LL_USART_ReceiveData8(kUart_);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4618      	mov	r0, r3
 8009260:	f7ff ff8e 	bl	8009180 <LL_USART_ReceiveData8>
    }

    // Set the buffer and receiver
    rxCharBuf_ = charBuf;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	605a      	str	r2, [r3, #4]
    rxReceiver_ = receiver;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	609a      	str	r2, [r3, #8]

    // Enable the receive interrupt
    LL_USART_EnableIT_RXNE(kUart_);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4618      	mov	r0, r3
 8009276:	f7ff ff5d 	bl	8009134 <LL_USART_EnableIT_RXNE_RXFNE>

    return true;
 800927a:	2301      	movs	r3, #1
}
 800927c:	4618      	mov	r0, r3
 800927e:	3710      	adds	r7, #16
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <_ZN10UARTDriver21HandleAndClearRxErrorEv>:
/**
 * @brief Clears any error flags that may have been set
 * @return true if flags had to be cleared, false otherwise
 */
bool UARTDriver::HandleAndClearRxError()
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
    bool shouldClearFlags = false;
 800928c:	2300      	movs	r3, #0
 800928e:	73fb      	strb	r3, [r7, #15]
    if (LL_USART_IsActiveFlag_ORE(kUart_)) {
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4618      	mov	r0, r3
 8009296:	f7ff fef4 	bl	8009082 <LL_USART_IsActiveFlag_ORE>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	bf14      	ite	ne
 80092a0:	2301      	movne	r3, #1
 80092a2:	2300      	moveq	r3, #0
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <_ZN10UARTDriver21HandleAndClearRxErrorEv+0x2a>
        shouldClearFlags = true;
 80092aa:	2301      	movs	r3, #1
 80092ac:	73fb      	strb	r3, [r7, #15]
    }
    if (LL_USART_IsActiveFlag_NE(kUart_)) {
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7ff fed2 	bl	800905c <LL_USART_IsActiveFlag_NE>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	bf14      	ite	ne
 80092be:	2301      	movne	r3, #1
 80092c0:	2300      	moveq	r3, #0
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d001      	beq.n	80092cc <_ZN10UARTDriver21HandleAndClearRxErrorEv+0x48>
        shouldClearFlags = true;
 80092c8:	2301      	movs	r3, #1
 80092ca:	73fb      	strb	r3, [r7, #15]
    }
    if(LL_USART_IsActiveFlag_FE(kUart_)) {
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7ff feb0 	bl	8009036 <LL_USART_IsActiveFlag_FE>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	bf14      	ite	ne
 80092dc:	2301      	movne	r3, #1
 80092de:	2300      	moveq	r3, #0
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <_ZN10UARTDriver21HandleAndClearRxErrorEv+0x66>
        shouldClearFlags = true;
 80092e6:	2301      	movs	r3, #1
 80092e8:	73fb      	strb	r3, [r7, #15]
    }
    if(LL_USART_IsActiveFlag_PE(kUart_)) {
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7ff fe8e 	bl	8009010 <LL_USART_IsActiveFlag_PE>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	bf14      	ite	ne
 80092fa:	2301      	movne	r3, #1
 80092fc:	2300      	moveq	r3, #0
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	2b00      	cmp	r3, #0
 8009302:	d001      	beq.n	8009308 <_ZN10UARTDriver21HandleAndClearRxErrorEv+0x84>
        shouldClearFlags = true;
 8009304:	2301      	movs	r3, #1
 8009306:	73fb      	strb	r3, [r7, #15]
    }

    // Clearing the ORE here also clears PE, NE, FE, IDLE
    if(shouldClearFlags)
 8009308:	7bfb      	ldrb	r3, [r7, #15]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d004      	beq.n	8009318 <_ZN10UARTDriver21HandleAndClearRxErrorEv+0x94>
        LL_USART_ClearFlag_ORE(kUart_);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4618      	mov	r0, r3
 8009314:	f7ff ff01 	bl	800911a <LL_USART_ClearFlag_ORE>

    return !shouldClearFlags;
 8009318:	7bfb      	ldrb	r3, [r7, #15]
 800931a:	f083 0301 	eor.w	r3, r3, #1
 800931e:	b2db      	uxtb	r3, r3
}
 8009320:	4618      	mov	r0, r3
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <__cxa_guard_acquire>:
 8009328:	6802      	ldr	r2, [r0, #0]
 800932a:	07d2      	lsls	r2, r2, #31
 800932c:	4603      	mov	r3, r0
 800932e:	d405      	bmi.n	800933c <__cxa_guard_acquire+0x14>
 8009330:	7842      	ldrb	r2, [r0, #1]
 8009332:	b102      	cbz	r2, 8009336 <__cxa_guard_acquire+0xe>
 8009334:	deff      	udf	#255	@ 0xff
 8009336:	2001      	movs	r0, #1
 8009338:	7058      	strb	r0, [r3, #1]
 800933a:	4770      	bx	lr
 800933c:	2000      	movs	r0, #0
 800933e:	4770      	bx	lr

08009340 <__cxa_guard_release>:
 8009340:	2301      	movs	r3, #1
 8009342:	6003      	str	r3, [r0, #0]
 8009344:	4770      	bx	lr
	...

08009348 <sniprintf>:
 8009348:	b40c      	push	{r2, r3}
 800934a:	b530      	push	{r4, r5, lr}
 800934c:	4b17      	ldr	r3, [pc, #92]	@ (80093ac <sniprintf+0x64>)
 800934e:	1e0c      	subs	r4, r1, #0
 8009350:	681d      	ldr	r5, [r3, #0]
 8009352:	b09d      	sub	sp, #116	@ 0x74
 8009354:	da08      	bge.n	8009368 <sniprintf+0x20>
 8009356:	238b      	movs	r3, #139	@ 0x8b
 8009358:	602b      	str	r3, [r5, #0]
 800935a:	f04f 30ff 	mov.w	r0, #4294967295
 800935e:	b01d      	add	sp, #116	@ 0x74
 8009360:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009364:	b002      	add	sp, #8
 8009366:	4770      	bx	lr
 8009368:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800936c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009370:	bf14      	ite	ne
 8009372:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009376:	4623      	moveq	r3, r4
 8009378:	9304      	str	r3, [sp, #16]
 800937a:	9307      	str	r3, [sp, #28]
 800937c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009380:	9002      	str	r0, [sp, #8]
 8009382:	9006      	str	r0, [sp, #24]
 8009384:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009388:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800938a:	ab21      	add	r3, sp, #132	@ 0x84
 800938c:	a902      	add	r1, sp, #8
 800938e:	4628      	mov	r0, r5
 8009390:	9301      	str	r3, [sp, #4]
 8009392:	f000 fa33 	bl	80097fc <_svfiprintf_r>
 8009396:	1c43      	adds	r3, r0, #1
 8009398:	bfbc      	itt	lt
 800939a:	238b      	movlt	r3, #139	@ 0x8b
 800939c:	602b      	strlt	r3, [r5, #0]
 800939e:	2c00      	cmp	r4, #0
 80093a0:	d0dd      	beq.n	800935e <sniprintf+0x16>
 80093a2:	9b02      	ldr	r3, [sp, #8]
 80093a4:	2200      	movs	r2, #0
 80093a6:	701a      	strb	r2, [r3, #0]
 80093a8:	e7d9      	b.n	800935e <sniprintf+0x16>
 80093aa:	bf00      	nop
 80093ac:	24000014 	.word	0x24000014

080093b0 <_vsniprintf_r>:
 80093b0:	b530      	push	{r4, r5, lr}
 80093b2:	4614      	mov	r4, r2
 80093b4:	2c00      	cmp	r4, #0
 80093b6:	b09b      	sub	sp, #108	@ 0x6c
 80093b8:	4605      	mov	r5, r0
 80093ba:	461a      	mov	r2, r3
 80093bc:	da05      	bge.n	80093ca <_vsniprintf_r+0x1a>
 80093be:	238b      	movs	r3, #139	@ 0x8b
 80093c0:	6003      	str	r3, [r0, #0]
 80093c2:	f04f 30ff 	mov.w	r0, #4294967295
 80093c6:	b01b      	add	sp, #108	@ 0x6c
 80093c8:	bd30      	pop	{r4, r5, pc}
 80093ca:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80093ce:	f8ad 300c 	strh.w	r3, [sp, #12]
 80093d2:	bf14      	ite	ne
 80093d4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80093d8:	4623      	moveq	r3, r4
 80093da:	9302      	str	r3, [sp, #8]
 80093dc:	9305      	str	r3, [sp, #20]
 80093de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80093e2:	9100      	str	r1, [sp, #0]
 80093e4:	9104      	str	r1, [sp, #16]
 80093e6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80093ea:	4669      	mov	r1, sp
 80093ec:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80093ee:	f000 fa05 	bl	80097fc <_svfiprintf_r>
 80093f2:	1c43      	adds	r3, r0, #1
 80093f4:	bfbc      	itt	lt
 80093f6:	238b      	movlt	r3, #139	@ 0x8b
 80093f8:	602b      	strlt	r3, [r5, #0]
 80093fa:	2c00      	cmp	r4, #0
 80093fc:	d0e3      	beq.n	80093c6 <_vsniprintf_r+0x16>
 80093fe:	9b00      	ldr	r3, [sp, #0]
 8009400:	2200      	movs	r2, #0
 8009402:	701a      	strb	r2, [r3, #0]
 8009404:	e7df      	b.n	80093c6 <_vsniprintf_r+0x16>
	...

08009408 <vsniprintf>:
 8009408:	b507      	push	{r0, r1, r2, lr}
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	4613      	mov	r3, r2
 800940e:	460a      	mov	r2, r1
 8009410:	4601      	mov	r1, r0
 8009412:	4803      	ldr	r0, [pc, #12]	@ (8009420 <vsniprintf+0x18>)
 8009414:	6800      	ldr	r0, [r0, #0]
 8009416:	f7ff ffcb 	bl	80093b0 <_vsniprintf_r>
 800941a:	b003      	add	sp, #12
 800941c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009420:	24000014 	.word	0x24000014

08009424 <memset>:
 8009424:	4402      	add	r2, r0
 8009426:	4603      	mov	r3, r0
 8009428:	4293      	cmp	r3, r2
 800942a:	d100      	bne.n	800942e <memset+0xa>
 800942c:	4770      	bx	lr
 800942e:	f803 1b01 	strb.w	r1, [r3], #1
 8009432:	e7f9      	b.n	8009428 <memset+0x4>

08009434 <_reclaim_reent>:
 8009434:	4b29      	ldr	r3, [pc, #164]	@ (80094dc <_reclaim_reent+0xa8>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4283      	cmp	r3, r0
 800943a:	b570      	push	{r4, r5, r6, lr}
 800943c:	4604      	mov	r4, r0
 800943e:	d04b      	beq.n	80094d8 <_reclaim_reent+0xa4>
 8009440:	69c3      	ldr	r3, [r0, #28]
 8009442:	b1ab      	cbz	r3, 8009470 <_reclaim_reent+0x3c>
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	b16b      	cbz	r3, 8009464 <_reclaim_reent+0x30>
 8009448:	2500      	movs	r5, #0
 800944a:	69e3      	ldr	r3, [r4, #28]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	5959      	ldr	r1, [r3, r5]
 8009450:	2900      	cmp	r1, #0
 8009452:	d13b      	bne.n	80094cc <_reclaim_reent+0x98>
 8009454:	3504      	adds	r5, #4
 8009456:	2d80      	cmp	r5, #128	@ 0x80
 8009458:	d1f7      	bne.n	800944a <_reclaim_reent+0x16>
 800945a:	69e3      	ldr	r3, [r4, #28]
 800945c:	4620      	mov	r0, r4
 800945e:	68d9      	ldr	r1, [r3, #12]
 8009460:	f000 f878 	bl	8009554 <_free_r>
 8009464:	69e3      	ldr	r3, [r4, #28]
 8009466:	6819      	ldr	r1, [r3, #0]
 8009468:	b111      	cbz	r1, 8009470 <_reclaim_reent+0x3c>
 800946a:	4620      	mov	r0, r4
 800946c:	f000 f872 	bl	8009554 <_free_r>
 8009470:	6961      	ldr	r1, [r4, #20]
 8009472:	b111      	cbz	r1, 800947a <_reclaim_reent+0x46>
 8009474:	4620      	mov	r0, r4
 8009476:	f000 f86d 	bl	8009554 <_free_r>
 800947a:	69e1      	ldr	r1, [r4, #28]
 800947c:	b111      	cbz	r1, 8009484 <_reclaim_reent+0x50>
 800947e:	4620      	mov	r0, r4
 8009480:	f000 f868 	bl	8009554 <_free_r>
 8009484:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009486:	b111      	cbz	r1, 800948e <_reclaim_reent+0x5a>
 8009488:	4620      	mov	r0, r4
 800948a:	f000 f863 	bl	8009554 <_free_r>
 800948e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009490:	b111      	cbz	r1, 8009498 <_reclaim_reent+0x64>
 8009492:	4620      	mov	r0, r4
 8009494:	f000 f85e 	bl	8009554 <_free_r>
 8009498:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800949a:	b111      	cbz	r1, 80094a2 <_reclaim_reent+0x6e>
 800949c:	4620      	mov	r0, r4
 800949e:	f000 f859 	bl	8009554 <_free_r>
 80094a2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80094a4:	b111      	cbz	r1, 80094ac <_reclaim_reent+0x78>
 80094a6:	4620      	mov	r0, r4
 80094a8:	f000 f854 	bl	8009554 <_free_r>
 80094ac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80094ae:	b111      	cbz	r1, 80094b6 <_reclaim_reent+0x82>
 80094b0:	4620      	mov	r0, r4
 80094b2:	f000 f84f 	bl	8009554 <_free_r>
 80094b6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80094b8:	b111      	cbz	r1, 80094c0 <_reclaim_reent+0x8c>
 80094ba:	4620      	mov	r0, r4
 80094bc:	f000 f84a 	bl	8009554 <_free_r>
 80094c0:	6a23      	ldr	r3, [r4, #32]
 80094c2:	b14b      	cbz	r3, 80094d8 <_reclaim_reent+0xa4>
 80094c4:	4620      	mov	r0, r4
 80094c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80094ca:	4718      	bx	r3
 80094cc:	680e      	ldr	r6, [r1, #0]
 80094ce:	4620      	mov	r0, r4
 80094d0:	f000 f840 	bl	8009554 <_free_r>
 80094d4:	4631      	mov	r1, r6
 80094d6:	e7bb      	b.n	8009450 <_reclaim_reent+0x1c>
 80094d8:	bd70      	pop	{r4, r5, r6, pc}
 80094da:	bf00      	nop
 80094dc:	24000014 	.word	0x24000014

080094e0 <__errno>:
 80094e0:	4b01      	ldr	r3, [pc, #4]	@ (80094e8 <__errno+0x8>)
 80094e2:	6818      	ldr	r0, [r3, #0]
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	24000014 	.word	0x24000014

080094ec <__libc_init_array>:
 80094ec:	b570      	push	{r4, r5, r6, lr}
 80094ee:	4d0d      	ldr	r5, [pc, #52]	@ (8009524 <__libc_init_array+0x38>)
 80094f0:	4c0d      	ldr	r4, [pc, #52]	@ (8009528 <__libc_init_array+0x3c>)
 80094f2:	1b64      	subs	r4, r4, r5
 80094f4:	10a4      	asrs	r4, r4, #2
 80094f6:	2600      	movs	r6, #0
 80094f8:	42a6      	cmp	r6, r4
 80094fa:	d109      	bne.n	8009510 <__libc_init_array+0x24>
 80094fc:	4d0b      	ldr	r5, [pc, #44]	@ (800952c <__libc_init_array+0x40>)
 80094fe:	4c0c      	ldr	r4, [pc, #48]	@ (8009530 <__libc_init_array+0x44>)
 8009500:	f000 fc66 	bl	8009dd0 <_init>
 8009504:	1b64      	subs	r4, r4, r5
 8009506:	10a4      	asrs	r4, r4, #2
 8009508:	2600      	movs	r6, #0
 800950a:	42a6      	cmp	r6, r4
 800950c:	d105      	bne.n	800951a <__libc_init_array+0x2e>
 800950e:	bd70      	pop	{r4, r5, r6, pc}
 8009510:	f855 3b04 	ldr.w	r3, [r5], #4
 8009514:	4798      	blx	r3
 8009516:	3601      	adds	r6, #1
 8009518:	e7ee      	b.n	80094f8 <__libc_init_array+0xc>
 800951a:	f855 3b04 	ldr.w	r3, [r5], #4
 800951e:	4798      	blx	r3
 8009520:	3601      	adds	r6, #1
 8009522:	e7f2      	b.n	800950a <__libc_init_array+0x1e>
 8009524:	0800a3d0 	.word	0x0800a3d0
 8009528:	0800a3d0 	.word	0x0800a3d0
 800952c:	0800a3d0 	.word	0x0800a3d0
 8009530:	0800a3dc 	.word	0x0800a3dc

08009534 <__retarget_lock_acquire_recursive>:
 8009534:	4770      	bx	lr

08009536 <__retarget_lock_release_recursive>:
 8009536:	4770      	bx	lr

08009538 <memcpy>:
 8009538:	440a      	add	r2, r1
 800953a:	4291      	cmp	r1, r2
 800953c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009540:	d100      	bne.n	8009544 <memcpy+0xc>
 8009542:	4770      	bx	lr
 8009544:	b510      	push	{r4, lr}
 8009546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800954a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800954e:	4291      	cmp	r1, r2
 8009550:	d1f9      	bne.n	8009546 <memcpy+0xe>
 8009552:	bd10      	pop	{r4, pc}

08009554 <_free_r>:
 8009554:	b538      	push	{r3, r4, r5, lr}
 8009556:	4605      	mov	r5, r0
 8009558:	2900      	cmp	r1, #0
 800955a:	d041      	beq.n	80095e0 <_free_r+0x8c>
 800955c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009560:	1f0c      	subs	r4, r1, #4
 8009562:	2b00      	cmp	r3, #0
 8009564:	bfb8      	it	lt
 8009566:	18e4      	addlt	r4, r4, r3
 8009568:	f000 f8e0 	bl	800972c <__malloc_lock>
 800956c:	4a1d      	ldr	r2, [pc, #116]	@ (80095e4 <_free_r+0x90>)
 800956e:	6813      	ldr	r3, [r2, #0]
 8009570:	b933      	cbnz	r3, 8009580 <_free_r+0x2c>
 8009572:	6063      	str	r3, [r4, #4]
 8009574:	6014      	str	r4, [r2, #0]
 8009576:	4628      	mov	r0, r5
 8009578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800957c:	f000 b8dc 	b.w	8009738 <__malloc_unlock>
 8009580:	42a3      	cmp	r3, r4
 8009582:	d908      	bls.n	8009596 <_free_r+0x42>
 8009584:	6820      	ldr	r0, [r4, #0]
 8009586:	1821      	adds	r1, r4, r0
 8009588:	428b      	cmp	r3, r1
 800958a:	bf01      	itttt	eq
 800958c:	6819      	ldreq	r1, [r3, #0]
 800958e:	685b      	ldreq	r3, [r3, #4]
 8009590:	1809      	addeq	r1, r1, r0
 8009592:	6021      	streq	r1, [r4, #0]
 8009594:	e7ed      	b.n	8009572 <_free_r+0x1e>
 8009596:	461a      	mov	r2, r3
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	b10b      	cbz	r3, 80095a0 <_free_r+0x4c>
 800959c:	42a3      	cmp	r3, r4
 800959e:	d9fa      	bls.n	8009596 <_free_r+0x42>
 80095a0:	6811      	ldr	r1, [r2, #0]
 80095a2:	1850      	adds	r0, r2, r1
 80095a4:	42a0      	cmp	r0, r4
 80095a6:	d10b      	bne.n	80095c0 <_free_r+0x6c>
 80095a8:	6820      	ldr	r0, [r4, #0]
 80095aa:	4401      	add	r1, r0
 80095ac:	1850      	adds	r0, r2, r1
 80095ae:	4283      	cmp	r3, r0
 80095b0:	6011      	str	r1, [r2, #0]
 80095b2:	d1e0      	bne.n	8009576 <_free_r+0x22>
 80095b4:	6818      	ldr	r0, [r3, #0]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	6053      	str	r3, [r2, #4]
 80095ba:	4408      	add	r0, r1
 80095bc:	6010      	str	r0, [r2, #0]
 80095be:	e7da      	b.n	8009576 <_free_r+0x22>
 80095c0:	d902      	bls.n	80095c8 <_free_r+0x74>
 80095c2:	230c      	movs	r3, #12
 80095c4:	602b      	str	r3, [r5, #0]
 80095c6:	e7d6      	b.n	8009576 <_free_r+0x22>
 80095c8:	6820      	ldr	r0, [r4, #0]
 80095ca:	1821      	adds	r1, r4, r0
 80095cc:	428b      	cmp	r3, r1
 80095ce:	bf04      	itt	eq
 80095d0:	6819      	ldreq	r1, [r3, #0]
 80095d2:	685b      	ldreq	r3, [r3, #4]
 80095d4:	6063      	str	r3, [r4, #4]
 80095d6:	bf04      	itt	eq
 80095d8:	1809      	addeq	r1, r1, r0
 80095da:	6021      	streq	r1, [r4, #0]
 80095dc:	6054      	str	r4, [r2, #4]
 80095de:	e7ca      	b.n	8009576 <_free_r+0x22>
 80095e0:	bd38      	pop	{r3, r4, r5, pc}
 80095e2:	bf00      	nop
 80095e4:	2401095c 	.word	0x2401095c

080095e8 <sbrk_aligned>:
 80095e8:	b570      	push	{r4, r5, r6, lr}
 80095ea:	4e0f      	ldr	r6, [pc, #60]	@ (8009628 <sbrk_aligned+0x40>)
 80095ec:	460c      	mov	r4, r1
 80095ee:	6831      	ldr	r1, [r6, #0]
 80095f0:	4605      	mov	r5, r0
 80095f2:	b911      	cbnz	r1, 80095fa <sbrk_aligned+0x12>
 80095f4:	f000 fba6 	bl	8009d44 <_sbrk_r>
 80095f8:	6030      	str	r0, [r6, #0]
 80095fa:	4621      	mov	r1, r4
 80095fc:	4628      	mov	r0, r5
 80095fe:	f000 fba1 	bl	8009d44 <_sbrk_r>
 8009602:	1c43      	adds	r3, r0, #1
 8009604:	d103      	bne.n	800960e <sbrk_aligned+0x26>
 8009606:	f04f 34ff 	mov.w	r4, #4294967295
 800960a:	4620      	mov	r0, r4
 800960c:	bd70      	pop	{r4, r5, r6, pc}
 800960e:	1cc4      	adds	r4, r0, #3
 8009610:	f024 0403 	bic.w	r4, r4, #3
 8009614:	42a0      	cmp	r0, r4
 8009616:	d0f8      	beq.n	800960a <sbrk_aligned+0x22>
 8009618:	1a21      	subs	r1, r4, r0
 800961a:	4628      	mov	r0, r5
 800961c:	f000 fb92 	bl	8009d44 <_sbrk_r>
 8009620:	3001      	adds	r0, #1
 8009622:	d1f2      	bne.n	800960a <sbrk_aligned+0x22>
 8009624:	e7ef      	b.n	8009606 <sbrk_aligned+0x1e>
 8009626:	bf00      	nop
 8009628:	24010958 	.word	0x24010958

0800962c <_malloc_r>:
 800962c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009630:	1ccd      	adds	r5, r1, #3
 8009632:	f025 0503 	bic.w	r5, r5, #3
 8009636:	3508      	adds	r5, #8
 8009638:	2d0c      	cmp	r5, #12
 800963a:	bf38      	it	cc
 800963c:	250c      	movcc	r5, #12
 800963e:	2d00      	cmp	r5, #0
 8009640:	4606      	mov	r6, r0
 8009642:	db01      	blt.n	8009648 <_malloc_r+0x1c>
 8009644:	42a9      	cmp	r1, r5
 8009646:	d904      	bls.n	8009652 <_malloc_r+0x26>
 8009648:	230c      	movs	r3, #12
 800964a:	6033      	str	r3, [r6, #0]
 800964c:	2000      	movs	r0, #0
 800964e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009652:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009728 <_malloc_r+0xfc>
 8009656:	f000 f869 	bl	800972c <__malloc_lock>
 800965a:	f8d8 3000 	ldr.w	r3, [r8]
 800965e:	461c      	mov	r4, r3
 8009660:	bb44      	cbnz	r4, 80096b4 <_malloc_r+0x88>
 8009662:	4629      	mov	r1, r5
 8009664:	4630      	mov	r0, r6
 8009666:	f7ff ffbf 	bl	80095e8 <sbrk_aligned>
 800966a:	1c43      	adds	r3, r0, #1
 800966c:	4604      	mov	r4, r0
 800966e:	d158      	bne.n	8009722 <_malloc_r+0xf6>
 8009670:	f8d8 4000 	ldr.w	r4, [r8]
 8009674:	4627      	mov	r7, r4
 8009676:	2f00      	cmp	r7, #0
 8009678:	d143      	bne.n	8009702 <_malloc_r+0xd6>
 800967a:	2c00      	cmp	r4, #0
 800967c:	d04b      	beq.n	8009716 <_malloc_r+0xea>
 800967e:	6823      	ldr	r3, [r4, #0]
 8009680:	4639      	mov	r1, r7
 8009682:	4630      	mov	r0, r6
 8009684:	eb04 0903 	add.w	r9, r4, r3
 8009688:	f000 fb5c 	bl	8009d44 <_sbrk_r>
 800968c:	4581      	cmp	r9, r0
 800968e:	d142      	bne.n	8009716 <_malloc_r+0xea>
 8009690:	6821      	ldr	r1, [r4, #0]
 8009692:	1a6d      	subs	r5, r5, r1
 8009694:	4629      	mov	r1, r5
 8009696:	4630      	mov	r0, r6
 8009698:	f7ff ffa6 	bl	80095e8 <sbrk_aligned>
 800969c:	3001      	adds	r0, #1
 800969e:	d03a      	beq.n	8009716 <_malloc_r+0xea>
 80096a0:	6823      	ldr	r3, [r4, #0]
 80096a2:	442b      	add	r3, r5
 80096a4:	6023      	str	r3, [r4, #0]
 80096a6:	f8d8 3000 	ldr.w	r3, [r8]
 80096aa:	685a      	ldr	r2, [r3, #4]
 80096ac:	bb62      	cbnz	r2, 8009708 <_malloc_r+0xdc>
 80096ae:	f8c8 7000 	str.w	r7, [r8]
 80096b2:	e00f      	b.n	80096d4 <_malloc_r+0xa8>
 80096b4:	6822      	ldr	r2, [r4, #0]
 80096b6:	1b52      	subs	r2, r2, r5
 80096b8:	d420      	bmi.n	80096fc <_malloc_r+0xd0>
 80096ba:	2a0b      	cmp	r2, #11
 80096bc:	d917      	bls.n	80096ee <_malloc_r+0xc2>
 80096be:	1961      	adds	r1, r4, r5
 80096c0:	42a3      	cmp	r3, r4
 80096c2:	6025      	str	r5, [r4, #0]
 80096c4:	bf18      	it	ne
 80096c6:	6059      	strne	r1, [r3, #4]
 80096c8:	6863      	ldr	r3, [r4, #4]
 80096ca:	bf08      	it	eq
 80096cc:	f8c8 1000 	streq.w	r1, [r8]
 80096d0:	5162      	str	r2, [r4, r5]
 80096d2:	604b      	str	r3, [r1, #4]
 80096d4:	4630      	mov	r0, r6
 80096d6:	f000 f82f 	bl	8009738 <__malloc_unlock>
 80096da:	f104 000b 	add.w	r0, r4, #11
 80096de:	1d23      	adds	r3, r4, #4
 80096e0:	f020 0007 	bic.w	r0, r0, #7
 80096e4:	1ac2      	subs	r2, r0, r3
 80096e6:	bf1c      	itt	ne
 80096e8:	1a1b      	subne	r3, r3, r0
 80096ea:	50a3      	strne	r3, [r4, r2]
 80096ec:	e7af      	b.n	800964e <_malloc_r+0x22>
 80096ee:	6862      	ldr	r2, [r4, #4]
 80096f0:	42a3      	cmp	r3, r4
 80096f2:	bf0c      	ite	eq
 80096f4:	f8c8 2000 	streq.w	r2, [r8]
 80096f8:	605a      	strne	r2, [r3, #4]
 80096fa:	e7eb      	b.n	80096d4 <_malloc_r+0xa8>
 80096fc:	4623      	mov	r3, r4
 80096fe:	6864      	ldr	r4, [r4, #4]
 8009700:	e7ae      	b.n	8009660 <_malloc_r+0x34>
 8009702:	463c      	mov	r4, r7
 8009704:	687f      	ldr	r7, [r7, #4]
 8009706:	e7b6      	b.n	8009676 <_malloc_r+0x4a>
 8009708:	461a      	mov	r2, r3
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	42a3      	cmp	r3, r4
 800970e:	d1fb      	bne.n	8009708 <_malloc_r+0xdc>
 8009710:	2300      	movs	r3, #0
 8009712:	6053      	str	r3, [r2, #4]
 8009714:	e7de      	b.n	80096d4 <_malloc_r+0xa8>
 8009716:	230c      	movs	r3, #12
 8009718:	6033      	str	r3, [r6, #0]
 800971a:	4630      	mov	r0, r6
 800971c:	f000 f80c 	bl	8009738 <__malloc_unlock>
 8009720:	e794      	b.n	800964c <_malloc_r+0x20>
 8009722:	6005      	str	r5, [r0, #0]
 8009724:	e7d6      	b.n	80096d4 <_malloc_r+0xa8>
 8009726:	bf00      	nop
 8009728:	2401095c 	.word	0x2401095c

0800972c <__malloc_lock>:
 800972c:	4801      	ldr	r0, [pc, #4]	@ (8009734 <__malloc_lock+0x8>)
 800972e:	f7ff bf01 	b.w	8009534 <__retarget_lock_acquire_recursive>
 8009732:	bf00      	nop
 8009734:	24010954 	.word	0x24010954

08009738 <__malloc_unlock>:
 8009738:	4801      	ldr	r0, [pc, #4]	@ (8009740 <__malloc_unlock+0x8>)
 800973a:	f7ff befc 	b.w	8009536 <__retarget_lock_release_recursive>
 800973e:	bf00      	nop
 8009740:	24010954 	.word	0x24010954

08009744 <__ssputs_r>:
 8009744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009748:	688e      	ldr	r6, [r1, #8]
 800974a:	461f      	mov	r7, r3
 800974c:	42be      	cmp	r6, r7
 800974e:	680b      	ldr	r3, [r1, #0]
 8009750:	4682      	mov	sl, r0
 8009752:	460c      	mov	r4, r1
 8009754:	4690      	mov	r8, r2
 8009756:	d82d      	bhi.n	80097b4 <__ssputs_r+0x70>
 8009758:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800975c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009760:	d026      	beq.n	80097b0 <__ssputs_r+0x6c>
 8009762:	6965      	ldr	r5, [r4, #20]
 8009764:	6909      	ldr	r1, [r1, #16]
 8009766:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800976a:	eba3 0901 	sub.w	r9, r3, r1
 800976e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009772:	1c7b      	adds	r3, r7, #1
 8009774:	444b      	add	r3, r9
 8009776:	106d      	asrs	r5, r5, #1
 8009778:	429d      	cmp	r5, r3
 800977a:	bf38      	it	cc
 800977c:	461d      	movcc	r5, r3
 800977e:	0553      	lsls	r3, r2, #21
 8009780:	d527      	bpl.n	80097d2 <__ssputs_r+0x8e>
 8009782:	4629      	mov	r1, r5
 8009784:	f7ff ff52 	bl	800962c <_malloc_r>
 8009788:	4606      	mov	r6, r0
 800978a:	b360      	cbz	r0, 80097e6 <__ssputs_r+0xa2>
 800978c:	6921      	ldr	r1, [r4, #16]
 800978e:	464a      	mov	r2, r9
 8009790:	f7ff fed2 	bl	8009538 <memcpy>
 8009794:	89a3      	ldrh	r3, [r4, #12]
 8009796:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800979a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800979e:	81a3      	strh	r3, [r4, #12]
 80097a0:	6126      	str	r6, [r4, #16]
 80097a2:	6165      	str	r5, [r4, #20]
 80097a4:	444e      	add	r6, r9
 80097a6:	eba5 0509 	sub.w	r5, r5, r9
 80097aa:	6026      	str	r6, [r4, #0]
 80097ac:	60a5      	str	r5, [r4, #8]
 80097ae:	463e      	mov	r6, r7
 80097b0:	42be      	cmp	r6, r7
 80097b2:	d900      	bls.n	80097b6 <__ssputs_r+0x72>
 80097b4:	463e      	mov	r6, r7
 80097b6:	6820      	ldr	r0, [r4, #0]
 80097b8:	4632      	mov	r2, r6
 80097ba:	4641      	mov	r1, r8
 80097bc:	f000 faa8 	bl	8009d10 <memmove>
 80097c0:	68a3      	ldr	r3, [r4, #8]
 80097c2:	1b9b      	subs	r3, r3, r6
 80097c4:	60a3      	str	r3, [r4, #8]
 80097c6:	6823      	ldr	r3, [r4, #0]
 80097c8:	4433      	add	r3, r6
 80097ca:	6023      	str	r3, [r4, #0]
 80097cc:	2000      	movs	r0, #0
 80097ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d2:	462a      	mov	r2, r5
 80097d4:	f000 fac6 	bl	8009d64 <_realloc_r>
 80097d8:	4606      	mov	r6, r0
 80097da:	2800      	cmp	r0, #0
 80097dc:	d1e0      	bne.n	80097a0 <__ssputs_r+0x5c>
 80097de:	6921      	ldr	r1, [r4, #16]
 80097e0:	4650      	mov	r0, sl
 80097e2:	f7ff feb7 	bl	8009554 <_free_r>
 80097e6:	230c      	movs	r3, #12
 80097e8:	f8ca 3000 	str.w	r3, [sl]
 80097ec:	89a3      	ldrh	r3, [r4, #12]
 80097ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097f2:	81a3      	strh	r3, [r4, #12]
 80097f4:	f04f 30ff 	mov.w	r0, #4294967295
 80097f8:	e7e9      	b.n	80097ce <__ssputs_r+0x8a>
	...

080097fc <_svfiprintf_r>:
 80097fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009800:	4698      	mov	r8, r3
 8009802:	898b      	ldrh	r3, [r1, #12]
 8009804:	061b      	lsls	r3, r3, #24
 8009806:	b09d      	sub	sp, #116	@ 0x74
 8009808:	4607      	mov	r7, r0
 800980a:	460d      	mov	r5, r1
 800980c:	4614      	mov	r4, r2
 800980e:	d510      	bpl.n	8009832 <_svfiprintf_r+0x36>
 8009810:	690b      	ldr	r3, [r1, #16]
 8009812:	b973      	cbnz	r3, 8009832 <_svfiprintf_r+0x36>
 8009814:	2140      	movs	r1, #64	@ 0x40
 8009816:	f7ff ff09 	bl	800962c <_malloc_r>
 800981a:	6028      	str	r0, [r5, #0]
 800981c:	6128      	str	r0, [r5, #16]
 800981e:	b930      	cbnz	r0, 800982e <_svfiprintf_r+0x32>
 8009820:	230c      	movs	r3, #12
 8009822:	603b      	str	r3, [r7, #0]
 8009824:	f04f 30ff 	mov.w	r0, #4294967295
 8009828:	b01d      	add	sp, #116	@ 0x74
 800982a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800982e:	2340      	movs	r3, #64	@ 0x40
 8009830:	616b      	str	r3, [r5, #20]
 8009832:	2300      	movs	r3, #0
 8009834:	9309      	str	r3, [sp, #36]	@ 0x24
 8009836:	2320      	movs	r3, #32
 8009838:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800983c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009840:	2330      	movs	r3, #48	@ 0x30
 8009842:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80099e0 <_svfiprintf_r+0x1e4>
 8009846:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800984a:	f04f 0901 	mov.w	r9, #1
 800984e:	4623      	mov	r3, r4
 8009850:	469a      	mov	sl, r3
 8009852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009856:	b10a      	cbz	r2, 800985c <_svfiprintf_r+0x60>
 8009858:	2a25      	cmp	r2, #37	@ 0x25
 800985a:	d1f9      	bne.n	8009850 <_svfiprintf_r+0x54>
 800985c:	ebba 0b04 	subs.w	fp, sl, r4
 8009860:	d00b      	beq.n	800987a <_svfiprintf_r+0x7e>
 8009862:	465b      	mov	r3, fp
 8009864:	4622      	mov	r2, r4
 8009866:	4629      	mov	r1, r5
 8009868:	4638      	mov	r0, r7
 800986a:	f7ff ff6b 	bl	8009744 <__ssputs_r>
 800986e:	3001      	adds	r0, #1
 8009870:	f000 80a7 	beq.w	80099c2 <_svfiprintf_r+0x1c6>
 8009874:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009876:	445a      	add	r2, fp
 8009878:	9209      	str	r2, [sp, #36]	@ 0x24
 800987a:	f89a 3000 	ldrb.w	r3, [sl]
 800987e:	2b00      	cmp	r3, #0
 8009880:	f000 809f 	beq.w	80099c2 <_svfiprintf_r+0x1c6>
 8009884:	2300      	movs	r3, #0
 8009886:	f04f 32ff 	mov.w	r2, #4294967295
 800988a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800988e:	f10a 0a01 	add.w	sl, sl, #1
 8009892:	9304      	str	r3, [sp, #16]
 8009894:	9307      	str	r3, [sp, #28]
 8009896:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800989a:	931a      	str	r3, [sp, #104]	@ 0x68
 800989c:	4654      	mov	r4, sl
 800989e:	2205      	movs	r2, #5
 80098a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098a4:	484e      	ldr	r0, [pc, #312]	@ (80099e0 <_svfiprintf_r+0x1e4>)
 80098a6:	f7f6 fd33 	bl	8000310 <memchr>
 80098aa:	9a04      	ldr	r2, [sp, #16]
 80098ac:	b9d8      	cbnz	r0, 80098e6 <_svfiprintf_r+0xea>
 80098ae:	06d0      	lsls	r0, r2, #27
 80098b0:	bf44      	itt	mi
 80098b2:	2320      	movmi	r3, #32
 80098b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098b8:	0711      	lsls	r1, r2, #28
 80098ba:	bf44      	itt	mi
 80098bc:	232b      	movmi	r3, #43	@ 0x2b
 80098be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098c2:	f89a 3000 	ldrb.w	r3, [sl]
 80098c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80098c8:	d015      	beq.n	80098f6 <_svfiprintf_r+0xfa>
 80098ca:	9a07      	ldr	r2, [sp, #28]
 80098cc:	4654      	mov	r4, sl
 80098ce:	2000      	movs	r0, #0
 80098d0:	f04f 0c0a 	mov.w	ip, #10
 80098d4:	4621      	mov	r1, r4
 80098d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098da:	3b30      	subs	r3, #48	@ 0x30
 80098dc:	2b09      	cmp	r3, #9
 80098de:	d94b      	bls.n	8009978 <_svfiprintf_r+0x17c>
 80098e0:	b1b0      	cbz	r0, 8009910 <_svfiprintf_r+0x114>
 80098e2:	9207      	str	r2, [sp, #28]
 80098e4:	e014      	b.n	8009910 <_svfiprintf_r+0x114>
 80098e6:	eba0 0308 	sub.w	r3, r0, r8
 80098ea:	fa09 f303 	lsl.w	r3, r9, r3
 80098ee:	4313      	orrs	r3, r2
 80098f0:	9304      	str	r3, [sp, #16]
 80098f2:	46a2      	mov	sl, r4
 80098f4:	e7d2      	b.n	800989c <_svfiprintf_r+0xa0>
 80098f6:	9b03      	ldr	r3, [sp, #12]
 80098f8:	1d19      	adds	r1, r3, #4
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	9103      	str	r1, [sp, #12]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	bfbb      	ittet	lt
 8009902:	425b      	neglt	r3, r3
 8009904:	f042 0202 	orrlt.w	r2, r2, #2
 8009908:	9307      	strge	r3, [sp, #28]
 800990a:	9307      	strlt	r3, [sp, #28]
 800990c:	bfb8      	it	lt
 800990e:	9204      	strlt	r2, [sp, #16]
 8009910:	7823      	ldrb	r3, [r4, #0]
 8009912:	2b2e      	cmp	r3, #46	@ 0x2e
 8009914:	d10a      	bne.n	800992c <_svfiprintf_r+0x130>
 8009916:	7863      	ldrb	r3, [r4, #1]
 8009918:	2b2a      	cmp	r3, #42	@ 0x2a
 800991a:	d132      	bne.n	8009982 <_svfiprintf_r+0x186>
 800991c:	9b03      	ldr	r3, [sp, #12]
 800991e:	1d1a      	adds	r2, r3, #4
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	9203      	str	r2, [sp, #12]
 8009924:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009928:	3402      	adds	r4, #2
 800992a:	9305      	str	r3, [sp, #20]
 800992c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80099f0 <_svfiprintf_r+0x1f4>
 8009930:	7821      	ldrb	r1, [r4, #0]
 8009932:	2203      	movs	r2, #3
 8009934:	4650      	mov	r0, sl
 8009936:	f7f6 fceb 	bl	8000310 <memchr>
 800993a:	b138      	cbz	r0, 800994c <_svfiprintf_r+0x150>
 800993c:	9b04      	ldr	r3, [sp, #16]
 800993e:	eba0 000a 	sub.w	r0, r0, sl
 8009942:	2240      	movs	r2, #64	@ 0x40
 8009944:	4082      	lsls	r2, r0
 8009946:	4313      	orrs	r3, r2
 8009948:	3401      	adds	r4, #1
 800994a:	9304      	str	r3, [sp, #16]
 800994c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009950:	4824      	ldr	r0, [pc, #144]	@ (80099e4 <_svfiprintf_r+0x1e8>)
 8009952:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009956:	2206      	movs	r2, #6
 8009958:	f7f6 fcda 	bl	8000310 <memchr>
 800995c:	2800      	cmp	r0, #0
 800995e:	d036      	beq.n	80099ce <_svfiprintf_r+0x1d2>
 8009960:	4b21      	ldr	r3, [pc, #132]	@ (80099e8 <_svfiprintf_r+0x1ec>)
 8009962:	bb1b      	cbnz	r3, 80099ac <_svfiprintf_r+0x1b0>
 8009964:	9b03      	ldr	r3, [sp, #12]
 8009966:	3307      	adds	r3, #7
 8009968:	f023 0307 	bic.w	r3, r3, #7
 800996c:	3308      	adds	r3, #8
 800996e:	9303      	str	r3, [sp, #12]
 8009970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009972:	4433      	add	r3, r6
 8009974:	9309      	str	r3, [sp, #36]	@ 0x24
 8009976:	e76a      	b.n	800984e <_svfiprintf_r+0x52>
 8009978:	fb0c 3202 	mla	r2, ip, r2, r3
 800997c:	460c      	mov	r4, r1
 800997e:	2001      	movs	r0, #1
 8009980:	e7a8      	b.n	80098d4 <_svfiprintf_r+0xd8>
 8009982:	2300      	movs	r3, #0
 8009984:	3401      	adds	r4, #1
 8009986:	9305      	str	r3, [sp, #20]
 8009988:	4619      	mov	r1, r3
 800998a:	f04f 0c0a 	mov.w	ip, #10
 800998e:	4620      	mov	r0, r4
 8009990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009994:	3a30      	subs	r2, #48	@ 0x30
 8009996:	2a09      	cmp	r2, #9
 8009998:	d903      	bls.n	80099a2 <_svfiprintf_r+0x1a6>
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0c6      	beq.n	800992c <_svfiprintf_r+0x130>
 800999e:	9105      	str	r1, [sp, #20]
 80099a0:	e7c4      	b.n	800992c <_svfiprintf_r+0x130>
 80099a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80099a6:	4604      	mov	r4, r0
 80099a8:	2301      	movs	r3, #1
 80099aa:	e7f0      	b.n	800998e <_svfiprintf_r+0x192>
 80099ac:	ab03      	add	r3, sp, #12
 80099ae:	9300      	str	r3, [sp, #0]
 80099b0:	462a      	mov	r2, r5
 80099b2:	4b0e      	ldr	r3, [pc, #56]	@ (80099ec <_svfiprintf_r+0x1f0>)
 80099b4:	a904      	add	r1, sp, #16
 80099b6:	4638      	mov	r0, r7
 80099b8:	f3af 8000 	nop.w
 80099bc:	1c42      	adds	r2, r0, #1
 80099be:	4606      	mov	r6, r0
 80099c0:	d1d6      	bne.n	8009970 <_svfiprintf_r+0x174>
 80099c2:	89ab      	ldrh	r3, [r5, #12]
 80099c4:	065b      	lsls	r3, r3, #25
 80099c6:	f53f af2d 	bmi.w	8009824 <_svfiprintf_r+0x28>
 80099ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099cc:	e72c      	b.n	8009828 <_svfiprintf_r+0x2c>
 80099ce:	ab03      	add	r3, sp, #12
 80099d0:	9300      	str	r3, [sp, #0]
 80099d2:	462a      	mov	r2, r5
 80099d4:	4b05      	ldr	r3, [pc, #20]	@ (80099ec <_svfiprintf_r+0x1f0>)
 80099d6:	a904      	add	r1, sp, #16
 80099d8:	4638      	mov	r0, r7
 80099da:	f000 f879 	bl	8009ad0 <_printf_i>
 80099de:	e7ed      	b.n	80099bc <_svfiprintf_r+0x1c0>
 80099e0:	0800a394 	.word	0x0800a394
 80099e4:	0800a39e 	.word	0x0800a39e
 80099e8:	00000000 	.word	0x00000000
 80099ec:	08009745 	.word	0x08009745
 80099f0:	0800a39a 	.word	0x0800a39a

080099f4 <_printf_common>:
 80099f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099f8:	4616      	mov	r6, r2
 80099fa:	4698      	mov	r8, r3
 80099fc:	688a      	ldr	r2, [r1, #8]
 80099fe:	690b      	ldr	r3, [r1, #16]
 8009a00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a04:	4293      	cmp	r3, r2
 8009a06:	bfb8      	it	lt
 8009a08:	4613      	movlt	r3, r2
 8009a0a:	6033      	str	r3, [r6, #0]
 8009a0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009a10:	4607      	mov	r7, r0
 8009a12:	460c      	mov	r4, r1
 8009a14:	b10a      	cbz	r2, 8009a1a <_printf_common+0x26>
 8009a16:	3301      	adds	r3, #1
 8009a18:	6033      	str	r3, [r6, #0]
 8009a1a:	6823      	ldr	r3, [r4, #0]
 8009a1c:	0699      	lsls	r1, r3, #26
 8009a1e:	bf42      	ittt	mi
 8009a20:	6833      	ldrmi	r3, [r6, #0]
 8009a22:	3302      	addmi	r3, #2
 8009a24:	6033      	strmi	r3, [r6, #0]
 8009a26:	6825      	ldr	r5, [r4, #0]
 8009a28:	f015 0506 	ands.w	r5, r5, #6
 8009a2c:	d106      	bne.n	8009a3c <_printf_common+0x48>
 8009a2e:	f104 0a19 	add.w	sl, r4, #25
 8009a32:	68e3      	ldr	r3, [r4, #12]
 8009a34:	6832      	ldr	r2, [r6, #0]
 8009a36:	1a9b      	subs	r3, r3, r2
 8009a38:	42ab      	cmp	r3, r5
 8009a3a:	dc26      	bgt.n	8009a8a <_printf_common+0x96>
 8009a3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009a40:	6822      	ldr	r2, [r4, #0]
 8009a42:	3b00      	subs	r3, #0
 8009a44:	bf18      	it	ne
 8009a46:	2301      	movne	r3, #1
 8009a48:	0692      	lsls	r2, r2, #26
 8009a4a:	d42b      	bmi.n	8009aa4 <_printf_common+0xb0>
 8009a4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009a50:	4641      	mov	r1, r8
 8009a52:	4638      	mov	r0, r7
 8009a54:	47c8      	blx	r9
 8009a56:	3001      	adds	r0, #1
 8009a58:	d01e      	beq.n	8009a98 <_printf_common+0xa4>
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	6922      	ldr	r2, [r4, #16]
 8009a5e:	f003 0306 	and.w	r3, r3, #6
 8009a62:	2b04      	cmp	r3, #4
 8009a64:	bf02      	ittt	eq
 8009a66:	68e5      	ldreq	r5, [r4, #12]
 8009a68:	6833      	ldreq	r3, [r6, #0]
 8009a6a:	1aed      	subeq	r5, r5, r3
 8009a6c:	68a3      	ldr	r3, [r4, #8]
 8009a6e:	bf0c      	ite	eq
 8009a70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a74:	2500      	movne	r5, #0
 8009a76:	4293      	cmp	r3, r2
 8009a78:	bfc4      	itt	gt
 8009a7a:	1a9b      	subgt	r3, r3, r2
 8009a7c:	18ed      	addgt	r5, r5, r3
 8009a7e:	2600      	movs	r6, #0
 8009a80:	341a      	adds	r4, #26
 8009a82:	42b5      	cmp	r5, r6
 8009a84:	d11a      	bne.n	8009abc <_printf_common+0xc8>
 8009a86:	2000      	movs	r0, #0
 8009a88:	e008      	b.n	8009a9c <_printf_common+0xa8>
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	4652      	mov	r2, sl
 8009a8e:	4641      	mov	r1, r8
 8009a90:	4638      	mov	r0, r7
 8009a92:	47c8      	blx	r9
 8009a94:	3001      	adds	r0, #1
 8009a96:	d103      	bne.n	8009aa0 <_printf_common+0xac>
 8009a98:	f04f 30ff 	mov.w	r0, #4294967295
 8009a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa0:	3501      	adds	r5, #1
 8009aa2:	e7c6      	b.n	8009a32 <_printf_common+0x3e>
 8009aa4:	18e1      	adds	r1, r4, r3
 8009aa6:	1c5a      	adds	r2, r3, #1
 8009aa8:	2030      	movs	r0, #48	@ 0x30
 8009aaa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009aae:	4422      	add	r2, r4
 8009ab0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ab4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ab8:	3302      	adds	r3, #2
 8009aba:	e7c7      	b.n	8009a4c <_printf_common+0x58>
 8009abc:	2301      	movs	r3, #1
 8009abe:	4622      	mov	r2, r4
 8009ac0:	4641      	mov	r1, r8
 8009ac2:	4638      	mov	r0, r7
 8009ac4:	47c8      	blx	r9
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	d0e6      	beq.n	8009a98 <_printf_common+0xa4>
 8009aca:	3601      	adds	r6, #1
 8009acc:	e7d9      	b.n	8009a82 <_printf_common+0x8e>
	...

08009ad0 <_printf_i>:
 8009ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad4:	7e0f      	ldrb	r7, [r1, #24]
 8009ad6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ad8:	2f78      	cmp	r7, #120	@ 0x78
 8009ada:	4691      	mov	r9, r2
 8009adc:	4680      	mov	r8, r0
 8009ade:	460c      	mov	r4, r1
 8009ae0:	469a      	mov	sl, r3
 8009ae2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009ae6:	d807      	bhi.n	8009af8 <_printf_i+0x28>
 8009ae8:	2f62      	cmp	r7, #98	@ 0x62
 8009aea:	d80a      	bhi.n	8009b02 <_printf_i+0x32>
 8009aec:	2f00      	cmp	r7, #0
 8009aee:	f000 80d2 	beq.w	8009c96 <_printf_i+0x1c6>
 8009af2:	2f58      	cmp	r7, #88	@ 0x58
 8009af4:	f000 80b9 	beq.w	8009c6a <_printf_i+0x19a>
 8009af8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009afc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009b00:	e03a      	b.n	8009b78 <_printf_i+0xa8>
 8009b02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009b06:	2b15      	cmp	r3, #21
 8009b08:	d8f6      	bhi.n	8009af8 <_printf_i+0x28>
 8009b0a:	a101      	add	r1, pc, #4	@ (adr r1, 8009b10 <_printf_i+0x40>)
 8009b0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b10:	08009b69 	.word	0x08009b69
 8009b14:	08009b7d 	.word	0x08009b7d
 8009b18:	08009af9 	.word	0x08009af9
 8009b1c:	08009af9 	.word	0x08009af9
 8009b20:	08009af9 	.word	0x08009af9
 8009b24:	08009af9 	.word	0x08009af9
 8009b28:	08009b7d 	.word	0x08009b7d
 8009b2c:	08009af9 	.word	0x08009af9
 8009b30:	08009af9 	.word	0x08009af9
 8009b34:	08009af9 	.word	0x08009af9
 8009b38:	08009af9 	.word	0x08009af9
 8009b3c:	08009c7d 	.word	0x08009c7d
 8009b40:	08009ba7 	.word	0x08009ba7
 8009b44:	08009c37 	.word	0x08009c37
 8009b48:	08009af9 	.word	0x08009af9
 8009b4c:	08009af9 	.word	0x08009af9
 8009b50:	08009c9f 	.word	0x08009c9f
 8009b54:	08009af9 	.word	0x08009af9
 8009b58:	08009ba7 	.word	0x08009ba7
 8009b5c:	08009af9 	.word	0x08009af9
 8009b60:	08009af9 	.word	0x08009af9
 8009b64:	08009c3f 	.word	0x08009c3f
 8009b68:	6833      	ldr	r3, [r6, #0]
 8009b6a:	1d1a      	adds	r2, r3, #4
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	6032      	str	r2, [r6, #0]
 8009b70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e09d      	b.n	8009cb8 <_printf_i+0x1e8>
 8009b7c:	6833      	ldr	r3, [r6, #0]
 8009b7e:	6820      	ldr	r0, [r4, #0]
 8009b80:	1d19      	adds	r1, r3, #4
 8009b82:	6031      	str	r1, [r6, #0]
 8009b84:	0606      	lsls	r6, r0, #24
 8009b86:	d501      	bpl.n	8009b8c <_printf_i+0xbc>
 8009b88:	681d      	ldr	r5, [r3, #0]
 8009b8a:	e003      	b.n	8009b94 <_printf_i+0xc4>
 8009b8c:	0645      	lsls	r5, r0, #25
 8009b8e:	d5fb      	bpl.n	8009b88 <_printf_i+0xb8>
 8009b90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009b94:	2d00      	cmp	r5, #0
 8009b96:	da03      	bge.n	8009ba0 <_printf_i+0xd0>
 8009b98:	232d      	movs	r3, #45	@ 0x2d
 8009b9a:	426d      	negs	r5, r5
 8009b9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ba0:	4859      	ldr	r0, [pc, #356]	@ (8009d08 <_printf_i+0x238>)
 8009ba2:	230a      	movs	r3, #10
 8009ba4:	e011      	b.n	8009bca <_printf_i+0xfa>
 8009ba6:	6821      	ldr	r1, [r4, #0]
 8009ba8:	6833      	ldr	r3, [r6, #0]
 8009baa:	0608      	lsls	r0, r1, #24
 8009bac:	f853 5b04 	ldr.w	r5, [r3], #4
 8009bb0:	d402      	bmi.n	8009bb8 <_printf_i+0xe8>
 8009bb2:	0649      	lsls	r1, r1, #25
 8009bb4:	bf48      	it	mi
 8009bb6:	b2ad      	uxthmi	r5, r5
 8009bb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009bba:	4853      	ldr	r0, [pc, #332]	@ (8009d08 <_printf_i+0x238>)
 8009bbc:	6033      	str	r3, [r6, #0]
 8009bbe:	bf14      	ite	ne
 8009bc0:	230a      	movne	r3, #10
 8009bc2:	2308      	moveq	r3, #8
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009bca:	6866      	ldr	r6, [r4, #4]
 8009bcc:	60a6      	str	r6, [r4, #8]
 8009bce:	2e00      	cmp	r6, #0
 8009bd0:	bfa2      	ittt	ge
 8009bd2:	6821      	ldrge	r1, [r4, #0]
 8009bd4:	f021 0104 	bicge.w	r1, r1, #4
 8009bd8:	6021      	strge	r1, [r4, #0]
 8009bda:	b90d      	cbnz	r5, 8009be0 <_printf_i+0x110>
 8009bdc:	2e00      	cmp	r6, #0
 8009bde:	d04b      	beq.n	8009c78 <_printf_i+0x1a8>
 8009be0:	4616      	mov	r6, r2
 8009be2:	fbb5 f1f3 	udiv	r1, r5, r3
 8009be6:	fb03 5711 	mls	r7, r3, r1, r5
 8009bea:	5dc7      	ldrb	r7, [r0, r7]
 8009bec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009bf0:	462f      	mov	r7, r5
 8009bf2:	42bb      	cmp	r3, r7
 8009bf4:	460d      	mov	r5, r1
 8009bf6:	d9f4      	bls.n	8009be2 <_printf_i+0x112>
 8009bf8:	2b08      	cmp	r3, #8
 8009bfa:	d10b      	bne.n	8009c14 <_printf_i+0x144>
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	07df      	lsls	r7, r3, #31
 8009c00:	d508      	bpl.n	8009c14 <_printf_i+0x144>
 8009c02:	6923      	ldr	r3, [r4, #16]
 8009c04:	6861      	ldr	r1, [r4, #4]
 8009c06:	4299      	cmp	r1, r3
 8009c08:	bfde      	ittt	le
 8009c0a:	2330      	movle	r3, #48	@ 0x30
 8009c0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c14:	1b92      	subs	r2, r2, r6
 8009c16:	6122      	str	r2, [r4, #16]
 8009c18:	f8cd a000 	str.w	sl, [sp]
 8009c1c:	464b      	mov	r3, r9
 8009c1e:	aa03      	add	r2, sp, #12
 8009c20:	4621      	mov	r1, r4
 8009c22:	4640      	mov	r0, r8
 8009c24:	f7ff fee6 	bl	80099f4 <_printf_common>
 8009c28:	3001      	adds	r0, #1
 8009c2a:	d14a      	bne.n	8009cc2 <_printf_i+0x1f2>
 8009c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c30:	b004      	add	sp, #16
 8009c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c36:	6823      	ldr	r3, [r4, #0]
 8009c38:	f043 0320 	orr.w	r3, r3, #32
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	4833      	ldr	r0, [pc, #204]	@ (8009d0c <_printf_i+0x23c>)
 8009c40:	2778      	movs	r7, #120	@ 0x78
 8009c42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009c46:	6823      	ldr	r3, [r4, #0]
 8009c48:	6831      	ldr	r1, [r6, #0]
 8009c4a:	061f      	lsls	r7, r3, #24
 8009c4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009c50:	d402      	bmi.n	8009c58 <_printf_i+0x188>
 8009c52:	065f      	lsls	r7, r3, #25
 8009c54:	bf48      	it	mi
 8009c56:	b2ad      	uxthmi	r5, r5
 8009c58:	6031      	str	r1, [r6, #0]
 8009c5a:	07d9      	lsls	r1, r3, #31
 8009c5c:	bf44      	itt	mi
 8009c5e:	f043 0320 	orrmi.w	r3, r3, #32
 8009c62:	6023      	strmi	r3, [r4, #0]
 8009c64:	b11d      	cbz	r5, 8009c6e <_printf_i+0x19e>
 8009c66:	2310      	movs	r3, #16
 8009c68:	e7ac      	b.n	8009bc4 <_printf_i+0xf4>
 8009c6a:	4827      	ldr	r0, [pc, #156]	@ (8009d08 <_printf_i+0x238>)
 8009c6c:	e7e9      	b.n	8009c42 <_printf_i+0x172>
 8009c6e:	6823      	ldr	r3, [r4, #0]
 8009c70:	f023 0320 	bic.w	r3, r3, #32
 8009c74:	6023      	str	r3, [r4, #0]
 8009c76:	e7f6      	b.n	8009c66 <_printf_i+0x196>
 8009c78:	4616      	mov	r6, r2
 8009c7a:	e7bd      	b.n	8009bf8 <_printf_i+0x128>
 8009c7c:	6833      	ldr	r3, [r6, #0]
 8009c7e:	6825      	ldr	r5, [r4, #0]
 8009c80:	6961      	ldr	r1, [r4, #20]
 8009c82:	1d18      	adds	r0, r3, #4
 8009c84:	6030      	str	r0, [r6, #0]
 8009c86:	062e      	lsls	r6, r5, #24
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	d501      	bpl.n	8009c90 <_printf_i+0x1c0>
 8009c8c:	6019      	str	r1, [r3, #0]
 8009c8e:	e002      	b.n	8009c96 <_printf_i+0x1c6>
 8009c90:	0668      	lsls	r0, r5, #25
 8009c92:	d5fb      	bpl.n	8009c8c <_printf_i+0x1bc>
 8009c94:	8019      	strh	r1, [r3, #0]
 8009c96:	2300      	movs	r3, #0
 8009c98:	6123      	str	r3, [r4, #16]
 8009c9a:	4616      	mov	r6, r2
 8009c9c:	e7bc      	b.n	8009c18 <_printf_i+0x148>
 8009c9e:	6833      	ldr	r3, [r6, #0]
 8009ca0:	1d1a      	adds	r2, r3, #4
 8009ca2:	6032      	str	r2, [r6, #0]
 8009ca4:	681e      	ldr	r6, [r3, #0]
 8009ca6:	6862      	ldr	r2, [r4, #4]
 8009ca8:	2100      	movs	r1, #0
 8009caa:	4630      	mov	r0, r6
 8009cac:	f7f6 fb30 	bl	8000310 <memchr>
 8009cb0:	b108      	cbz	r0, 8009cb6 <_printf_i+0x1e6>
 8009cb2:	1b80      	subs	r0, r0, r6
 8009cb4:	6060      	str	r0, [r4, #4]
 8009cb6:	6863      	ldr	r3, [r4, #4]
 8009cb8:	6123      	str	r3, [r4, #16]
 8009cba:	2300      	movs	r3, #0
 8009cbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cc0:	e7aa      	b.n	8009c18 <_printf_i+0x148>
 8009cc2:	6923      	ldr	r3, [r4, #16]
 8009cc4:	4632      	mov	r2, r6
 8009cc6:	4649      	mov	r1, r9
 8009cc8:	4640      	mov	r0, r8
 8009cca:	47d0      	blx	sl
 8009ccc:	3001      	adds	r0, #1
 8009cce:	d0ad      	beq.n	8009c2c <_printf_i+0x15c>
 8009cd0:	6823      	ldr	r3, [r4, #0]
 8009cd2:	079b      	lsls	r3, r3, #30
 8009cd4:	d413      	bmi.n	8009cfe <_printf_i+0x22e>
 8009cd6:	68e0      	ldr	r0, [r4, #12]
 8009cd8:	9b03      	ldr	r3, [sp, #12]
 8009cda:	4298      	cmp	r0, r3
 8009cdc:	bfb8      	it	lt
 8009cde:	4618      	movlt	r0, r3
 8009ce0:	e7a6      	b.n	8009c30 <_printf_i+0x160>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	4632      	mov	r2, r6
 8009ce6:	4649      	mov	r1, r9
 8009ce8:	4640      	mov	r0, r8
 8009cea:	47d0      	blx	sl
 8009cec:	3001      	adds	r0, #1
 8009cee:	d09d      	beq.n	8009c2c <_printf_i+0x15c>
 8009cf0:	3501      	adds	r5, #1
 8009cf2:	68e3      	ldr	r3, [r4, #12]
 8009cf4:	9903      	ldr	r1, [sp, #12]
 8009cf6:	1a5b      	subs	r3, r3, r1
 8009cf8:	42ab      	cmp	r3, r5
 8009cfa:	dcf2      	bgt.n	8009ce2 <_printf_i+0x212>
 8009cfc:	e7eb      	b.n	8009cd6 <_printf_i+0x206>
 8009cfe:	2500      	movs	r5, #0
 8009d00:	f104 0619 	add.w	r6, r4, #25
 8009d04:	e7f5      	b.n	8009cf2 <_printf_i+0x222>
 8009d06:	bf00      	nop
 8009d08:	0800a3a5 	.word	0x0800a3a5
 8009d0c:	0800a3b6 	.word	0x0800a3b6

08009d10 <memmove>:
 8009d10:	4288      	cmp	r0, r1
 8009d12:	b510      	push	{r4, lr}
 8009d14:	eb01 0402 	add.w	r4, r1, r2
 8009d18:	d902      	bls.n	8009d20 <memmove+0x10>
 8009d1a:	4284      	cmp	r4, r0
 8009d1c:	4623      	mov	r3, r4
 8009d1e:	d807      	bhi.n	8009d30 <memmove+0x20>
 8009d20:	1e43      	subs	r3, r0, #1
 8009d22:	42a1      	cmp	r1, r4
 8009d24:	d008      	beq.n	8009d38 <memmove+0x28>
 8009d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d2e:	e7f8      	b.n	8009d22 <memmove+0x12>
 8009d30:	4402      	add	r2, r0
 8009d32:	4601      	mov	r1, r0
 8009d34:	428a      	cmp	r2, r1
 8009d36:	d100      	bne.n	8009d3a <memmove+0x2a>
 8009d38:	bd10      	pop	{r4, pc}
 8009d3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d42:	e7f7      	b.n	8009d34 <memmove+0x24>

08009d44 <_sbrk_r>:
 8009d44:	b538      	push	{r3, r4, r5, lr}
 8009d46:	4d06      	ldr	r5, [pc, #24]	@ (8009d60 <_sbrk_r+0x1c>)
 8009d48:	2300      	movs	r3, #0
 8009d4a:	4604      	mov	r4, r0
 8009d4c:	4608      	mov	r0, r1
 8009d4e:	602b      	str	r3, [r5, #0]
 8009d50:	f7f7 f9c4 	bl	80010dc <_sbrk>
 8009d54:	1c43      	adds	r3, r0, #1
 8009d56:	d102      	bne.n	8009d5e <_sbrk_r+0x1a>
 8009d58:	682b      	ldr	r3, [r5, #0]
 8009d5a:	b103      	cbz	r3, 8009d5e <_sbrk_r+0x1a>
 8009d5c:	6023      	str	r3, [r4, #0]
 8009d5e:	bd38      	pop	{r3, r4, r5, pc}
 8009d60:	24010950 	.word	0x24010950

08009d64 <_realloc_r>:
 8009d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d68:	4680      	mov	r8, r0
 8009d6a:	4615      	mov	r5, r2
 8009d6c:	460c      	mov	r4, r1
 8009d6e:	b921      	cbnz	r1, 8009d7a <_realloc_r+0x16>
 8009d70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d74:	4611      	mov	r1, r2
 8009d76:	f7ff bc59 	b.w	800962c <_malloc_r>
 8009d7a:	b92a      	cbnz	r2, 8009d88 <_realloc_r+0x24>
 8009d7c:	f7ff fbea 	bl	8009554 <_free_r>
 8009d80:	2400      	movs	r4, #0
 8009d82:	4620      	mov	r0, r4
 8009d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d88:	f000 f81a 	bl	8009dc0 <_malloc_usable_size_r>
 8009d8c:	4285      	cmp	r5, r0
 8009d8e:	4606      	mov	r6, r0
 8009d90:	d802      	bhi.n	8009d98 <_realloc_r+0x34>
 8009d92:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009d96:	d8f4      	bhi.n	8009d82 <_realloc_r+0x1e>
 8009d98:	4629      	mov	r1, r5
 8009d9a:	4640      	mov	r0, r8
 8009d9c:	f7ff fc46 	bl	800962c <_malloc_r>
 8009da0:	4607      	mov	r7, r0
 8009da2:	2800      	cmp	r0, #0
 8009da4:	d0ec      	beq.n	8009d80 <_realloc_r+0x1c>
 8009da6:	42b5      	cmp	r5, r6
 8009da8:	462a      	mov	r2, r5
 8009daa:	4621      	mov	r1, r4
 8009dac:	bf28      	it	cs
 8009dae:	4632      	movcs	r2, r6
 8009db0:	f7ff fbc2 	bl	8009538 <memcpy>
 8009db4:	4621      	mov	r1, r4
 8009db6:	4640      	mov	r0, r8
 8009db8:	f7ff fbcc 	bl	8009554 <_free_r>
 8009dbc:	463c      	mov	r4, r7
 8009dbe:	e7e0      	b.n	8009d82 <_realloc_r+0x1e>

08009dc0 <_malloc_usable_size_r>:
 8009dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dc4:	1f18      	subs	r0, r3, #4
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	bfbc      	itt	lt
 8009dca:	580b      	ldrlt	r3, [r1, r0]
 8009dcc:	18c0      	addlt	r0, r0, r3
 8009dce:	4770      	bx	lr

08009dd0 <_init>:
 8009dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd2:	bf00      	nop
 8009dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dd6:	bc08      	pop	{r3}
 8009dd8:	469e      	mov	lr, r3
 8009dda:	4770      	bx	lr

08009ddc <_fini>:
 8009ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dde:	bf00      	nop
 8009de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009de2:	bc08      	pop	{r3}
 8009de4:	469e      	mov	lr, r3
 8009de6:	4770      	bx	lr
